index,question_id,ground_truth,error_message,q1,q2,outputs,question,schema
24,5,N,"<Austin> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Joshua>
... ommitted ...
--------------------","SELECT name FROM drinker WHERE NOT EXISTS (SELECT f.bar FROM frequents f, serves s WHERE f.drinker = drinker.name AND f.bar = s.bar AND s.beer NOT IN (SELECT beer FROM likes WHERE drinker = drinker.name));","SELECT name FROM drinker WHERE EXISTS (SELECT f.bar FROM frequents f, serves s WHERE f.drinker = drinker.name AND f.bar = s.bar AND s.beer NOT IN (SELECT beer FROM likes WHERE drinker = drinker.name));","{'student_result': [['Amy'], ['Ben'], ['Coy'], ['Dan'], ['Eve']], 'teacher_result': []}",Find names of all drinkers who do not frequent any bar that serves any beer they do not like.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
25,5,N,"<Lindsey> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Sean>
... ommitted ...
--------------------","SELECT name FROM drinker WHERE NOT EXISTS (SELECT f.bar FROM frequents f, serves s WHERE f.drinker = drinker.name AND f.bar = s.bar AND s.beer NOT IN (SELECT beer FROM likes WHERE drinker = drinker.name));","SELECT name FROM drinker WHERE NOT EXISTS (SELECT f.bar FROM frequents f, serves s WHERE f.drinker = drinker.name AND f.bar = s.bar AND s.beer IN (SELECT beer FROM likes WHERE drinker = drinker.name));","{'student_result': [['Coy']], 'teacher_result': []}",Find names of all drinkers who do not frequent any bar that serves any beer they do not like.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
33,1,N,"<Talk of the Town> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Schlemmer Grill>
... ommitted ...
--------------------",SELECT DISTINCT bar FROM Serves WHERE (beer = 'Amstel' OR beer = 'Corona') AND price > 2;,SELECT DISTINCT bar FROM serves WHERE beer = 'Amstel' or  beer = 'Corona' AND price > 2;,"{'student_result': [['Down Under Pub'], ['James Joyce Pub'], ['Satisfaction'], ['Talk of the Town'], ['The Edge']], 'teacher_result': [['Down Under Pub'], ['James Joyce Pub'], ['Satisfaction'], ['The Edge']]}",Find names of bars that serve either Amstel or Corona at price higher than $2.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
45,5,N,"<Andrea> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Andrea>
... ommitted ...
--------------------","SELECT name FROM drinker WHERE NOT EXISTS (SELECT f.bar FROM frequents f, serves s WHERE f.drinker = drinker.name AND f.bar = s.bar AND s.beer NOT IN (SELECT beer FROM likes WHERE drinker = drinker.name));","SELECT Q5.name
FROM 
	(SELECT frequents2.drinker as name, COUNT(frequents2.bar) as NumBarFreq
	FROM frequents as frequents2
	GROUP BY frequents2.drinker
	ORDER BY frequents2.drinker ASC) as Q5
JOIN
	(SELECT frequents1.drinker as drinker, COUNT(frequents1.bar) as NumBarFreqLike
	FROM frequents as frequents1
	JOIN
		(SELECT Q2.drinker as drinker, Q2.bar as bar
		FROM
			(SELECT likes2.drinker as drinker, serves.bar as bar, COUNT(serves.bar) as CountBarServesBeerLiked
			FROM serves, likes as likes2
			WHERE likes2.beer = serves.beer
			GROUP BY likes2.drinker, serves.bar
			ORDER BY likes2.drinker ASC, serves.bar ASC) AS Q2
		JOIN
			(SELECT likes1.drinker as drinker, COUNT(likes1.beer) as CountBeerLiked
			FROM likes as likes1
			GROUP BY likes1.drinker
			ORDER BY likes1.drinker ASC) AS Q1
		ON Q2.drinker = Q1.drinker
		AND Q2.CountBarServesBeerLiked = Q1.CountBeerLiked) as Q3
	ON frequents1.drinker = Q3.drinker
	AND frequents1.bar = Q3.bar
	GROUP BY frequents1.drinker) as Q4
ON Q5.name = Q4.drinker
AND Q5.NumBarFreq = Q4.NumBarFreqLike
ORDER BY Q5.name ASC;","{'student_result': [['Amy'], ['Eve']], 'teacher_result': []}",Find names of all drinkers who do not frequent any bar that serves any beer they do not like.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
47,4,N,"<Luis|Nichole> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Brian|Donald>
... ommitted ...
--------------------","SELECT f1.drinker, f2.drinker FROM (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f1, (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f2 WHERE f1.drinker < f2.drinker AND f1.st = f2.st","SELECT DISTINCT A.drinker AS drinkerA, B.drinker AS drinkerB
FROM frequents A, frequents B
WHERE A.drinker != B.drinker
    AND A.times_a_week = B.times_a_week
    AND A.drinker < B.drinker;","{'student_result': [['Amy', 'Ben'], ['Amy', 'Dan'], ['Amy', 'Eve'], ['Ben', 'Coy'], ['Ben', 'Dan'], ['Ben', 'Eve'], ['Coy', 'Dan'], ['Dan', 'Eve']], 'teacher_result': [['Coy', 'Eve'], ['Amy', 'Eve'], ['Amy', 'Coy']]}","Find the pair of drinkers who frequent bars the same total number of times per week. Don't list (drinkerA, drinkerA). Only list pairs (drinkerA, drinkerB) where drinkerA < drinkerB  in the answer; don't list (drinkerB, drinkerA) again.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
50,1,N,"<Talk of the Town> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Land & Leute>
... ommitted ...
--------------------",SELECT DISTINCT bar FROM Serves WHERE (beer = 'Amstel' OR beer = 'Corona') AND price > 2;,"SELECT bar
FROM serves 
WHERE beer = 'Amstel'
    OR beer = 'Corona'
	AND price > 2;","{'student_result': [['Down Under Pub'], ['Down Under Pub'], ['The Edge'], ['The Edge'], ['James Joyce Pub'], ['James Joyce Pub'], ['Satisfaction'], ['Satisfaction'], ['Talk of the Town']], 'teacher_result': [['Down Under Pub'], ['James Joyce Pub'], ['Satisfaction'], ['The Edge']]}",Find names of bars that serve either Amstel or Corona at price higher than $2.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
72,8,N,"3-th tuple in answer should be <American Pale Ale|1.25|3.0> instead of <American Pale Ale|1.25|2.8333333333333335>
(there may be other errors too)
your output >>>>>
--------------------
<471 Extra ESB|0.25|2.375>
... ommitted ...
--------------------","SELECT beer, MAX(price) - MIN(price) AS price_gap, AVG(price) AS avg_price FROM serves WHERE beer IN (SELECT s.beer FROM serves s, frequents f WHERE s.bar = f.bar AND f.drinker LIKE 'B%' GROUP BY s.beer HAVING COUNT(DISTINCT s.bar) >= 2) GROUP BY beer ORDER BY beer;","WITH BeersByBDrinker AS (
    SELECT DISTINCT s.beer
    FROM serves s
    JOIN frequents f ON s.bar = f.bar
    JOIN drinker d ON f.drinker = d.name
    WHERE d.name LIKE 'B%'
),
BeerStats AS (
    SELECT s.beer,
           MAX(s.price) - MIN(s.price) AS price_gap,
           AVG(s.price) AS avg_price,
           COUNT(DISTINCT s.bar) AS bar_count
    FROM serves s
    JOIN BeersByBDrinker bbd ON s.beer = bbd.beer
    GROUP BY s.beer
    HAVING COUNT(DISTINCT s.bar) >= 2
)

SELECT bs.beer, bs.price_gap, bs.avg_price
FROM BeerStats bs
ORDER BY bs.beer;","{'student_result': [['Amstel', Decimal('0.75'), Decimal('1.4000000000000000')], ['Budweiser', Decimal('0.30'), Decimal('2.3000000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')]], 'teacher_result': [['Amstel', Decimal('0.75'), Decimal('1.4166666666666667')], ['Budweiser', Decimal('0.05'), Decimal('2.2250000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')]]}","Find, for each beer served at least 2 bars that frequented by drinkers whose name starts with 'B', the difference of maximum and minimum (price gap) and average price of the beers in all serving bars, order by bar name. I.e., your query should output beer, price_gap, and avg_price.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
85,2,N,"answer should have 1 instead of 2 occurrence(s) of <Norman>
(there may be other errors too)
your output >>>>>
--------------------
<Norman>
... ommitted ...
--------------------",SELECT DISTINCT drinker FROM frequents NATURAL JOIN serves WHERE beer = 'Corona' AND drinker not in (SELECT drinker FROM Likes WHERE beer = 'Corona');,"SELECT f.drinker
FROM frequents f
JOIN serves s ON f.bar = s.bar
WHERE s.beer = 'Corona' 
  AND f.drinker NOT IN (
    SELECT l.drinker
    FROM likes l
    WHERE l.beer = 'Corona'
  );","{'student_result': [['Coy'], ['Coy'], ['Ben'], ['Ben']], 'teacher_result': [['Ben'], ['Coy']]}",Find the names of all drinkers that do not like Corona but frequent a bar that serves Corona.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
93,2,N,"<Dustin> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Ben>
... ommitted ...
--------------------",SELECT DISTINCT drinker FROM frequents NATURAL JOIN serves WHERE beer = 'Corona' AND drinker not in (SELECT drinker FROM Likes WHERE beer = 'Corona');,"SELECT frequents.drinker 
FROM frequents, serves, likes 
WHERE frequents.bar = serves.bar AND frequents.drinker = likes.drinker AND serves.beer = 'Corona' AND likes.beer <> 'Corona';","{'student_result': [['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Coy'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Coy'], ['Eve'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Ben'], ['Ben'], ['Amy'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Ben'], ['Ben']], 'teacher_result': [['Ben'], ['Coy']]}",Find the names of all drinkers that do not like Corona but frequent a bar that serves Corona.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
100,5,N,"<Trevor> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Cindy>
... ommitted ...
--------------------","SELECT name FROM drinker WHERE NOT EXISTS (SELECT f.bar FROM frequents f, serves s WHERE f.drinker = drinker.name AND f.bar = s.bar AND s.beer NOT IN (SELECT beer FROM likes WHERE drinker = drinker.name));","SELECT DISTINCT U.drinker
FROM frequents U
WHERE U.drinker NOT IN (
    SELECT DISTINCT X.drinker
    FROM frequents X
    WHERE NOT EXISTS (
        SELECT *
        FROM serves Y, likes Z
        WHERE X.bar = Y.bar
          AND X.drinker = Z.drinker
          AND Y.beer = Z.beer
    )
);","{'student_result': [['Amy'], ['Ben'], ['Dan'], ['Eve']], 'teacher_result': []}",Find names of all drinkers who do not frequent any bar that serves any beer they do not like.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
112,8,N,"3-th tuple in answer should be <American Pale Ale|1.25|3.0> instead of <American Pale Ale|1.25|2.8333333333333335>
(there may be other errors too)
your output >>>>>
--------------------
<471 Extra ESB|0.25|2.375>
... ommitted ...
--------------------","SELECT beer, MAX(price) - MIN(price) AS price_gap, AVG(price) AS avg_price FROM serves WHERE beer IN (SELECT s.beer FROM serves s, frequents f WHERE s.bar = f.bar AND f.drinker LIKE 'B%' GROUP BY s.beer HAVING COUNT(DISTINCT s.bar) >= 2) GROUP BY beer ORDER BY beer;","WITH bars_frequented_by_b_drinkers AS (
    SELECT DISTINCT f.bar
    FROM frequents f
    JOIN drinker d ON f.drinker = d.name
    WHERE d.name LIKE 'B%'
),
beers_served_in_selected_bars AS (
    SELECT s.beer, s.bar, s.price
    FROM serves s
    JOIN bars_frequented_by_b_drinkers bfbb ON s.bar = bfbb.bar
),
beer_price_stats AS (
    SELECT 
        beer,
        MAX(price) - MIN(price) AS price_gap,
        AVG(price) AS avg_price
    FROM beers_served_in_selected_bars
    GROUP BY beer
)
SELECT beer, price_gap, avg_price
FROM beer_price_stats
ORDER BY beer;
","{'student_result': [['Amstel', Decimal('0.75'), Decimal('1.4166666666666667')], ['Budweiser', Decimal('0.05'), Decimal('2.2250000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')], ['Erdinger', Decimal('0.00'), Decimal('3.5000000000000000')], ['Full Sail', Decimal('0.00'), Decimal('7.7500000000000000')]], 'teacher_result': [['Amstel', Decimal('0.75'), Decimal('1.4166666666666667')], ['Budweiser', Decimal('0.05'), Decimal('2.2250000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')]]}","Find, for each beer served at least 2 bars that frequented by drinkers whose name starts with 'B', the difference of maximum and minimum (price gap) and average price of the beers in all serving bars, order by bar name. I.e., your query should output beer, price_gap, and avg_price.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
126,5,N,"<Kara> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Sean>
... ommitted ...
--------------------","SELECT name FROM drinker WHERE NOT EXISTS (SELECT f.bar FROM frequents f, serves s WHERE f.drinker = drinker.name AND f.bar = s.bar AND s.beer NOT IN (SELECT beer FROM likes WHERE drinker = drinker.name));","SELECT x.drinker
FROM frequents x
WHERE NOT EXISTS (
    SELECT *
    FROM frequents y
    JOIN serves z ON y.bar = z.bar
    JOIN likes u ON y.drinker = u.drinker AND z.beer = u.beer
    WHERE x.drinker = y.drinker
);
","{'student_result': [['Coy'], ['Coy']], 'teacher_result': []}",Find names of all drinkers who do not frequent any bar that serves any beer they do not like.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
128,5,N,"<Cesar> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Joshua>
... ommitted ...
--------------------","SELECT name FROM drinker WHERE NOT EXISTS (SELECT f.bar FROM frequents f, serves s WHERE f.drinker = drinker.name AND f.bar = s.bar AND s.beer NOT IN (SELECT beer FROM likes WHERE drinker = drinker.name));","select x.drinker
from frequents x
where exists (select * from frequents y, serves z, likes u
                  where x.drinker=y.drinker
                   and  y.bar = z.bar and z.beer = u.beer
                   and y.drinker = u.drinker)","{'student_result': [['Ben'], ['Ben'], ['Ben'], ['Amy'], ['Eve'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan']], 'teacher_result': []}",Find names of all drinkers who do not frequent any bar that serves any beer they do not like.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
131,5,N,"<David> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Dustin>
... ommitted ...
--------------------","SELECT name FROM drinker WHERE NOT EXISTS (SELECT f.bar FROM frequents f, serves s WHERE f.drinker = drinker.name AND f.bar = s.bar AND s.beer NOT IN (SELECT beer FROM likes WHERE drinker = drinker.name));","select x.drinker
from frequents x
where not exists(select * from serves y
                 where x.bar = y.bar
                   and not exists (select * from likes z
                                   where z.drinker=x.drinker
                                     and y.beer = z.beer))","{'student_result': [['Ben'], ['Dan'], ['Dan'], ['Dan'], ['Dan']], 'teacher_result': []}",Find names of all drinkers who do not frequent any bar that serves any beer they do not like.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
132,5,N,"<Emily> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Adam>
... ommitted ...
--------------------","SELECT name FROM drinker WHERE NOT EXISTS (SELECT f.bar FROM frequents f, serves s WHERE f.drinker = drinker.name AND f.bar = s.bar AND s.beer NOT IN (SELECT beer FROM likes WHERE drinker = drinker.name));","SELECT DISTINCT f.drinker
FROM frequents f
WHERE NOT EXISTS (
    SELECT *
    FROM frequents f2
    WHERE f.drinker = f2.drinker AND f2.bar NOT IN (
        SELECT s.bar
        FROM serves s
        WHERE NOT EXISTS (
            SELECT *
            FROM likes l
            WHERE l.drinker = f2.drinker AND l.beer = s.beer
        )
    )
);
","{'student_result': [['Amy'], ['Coy'], ['Eve']], 'teacher_result': []}",Find names of all drinkers who do not frequent any bar that serves any beer they do not like.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
133,5,N,"<Andrea> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Andrea>
--------------------","SELECT name FROM drinker WHERE NOT EXISTS (SELECT f.bar FROM frequents f, serves s WHERE f.drinker = drinker.name AND f.bar = s.bar AND s.beer NOT IN (SELECT beer FROM likes WHERE drinker = drinker.name));","SELECT DISTINCT f.drinker
FROM frequents f
WHERE NOT EXISTS (
    SELECT s.bar
    FROM serves s
    WHERE s.bar = f.bar
    AND NOT EXISTS (
        SELECT l.beer
        FROM likes l
        WHERE l.drinker = f.drinker
        AND l.beer = s.beer
    )
)
AND NOT EXISTS (
    SELECT s.bar
    FROM serves s
    WHERE s.bar = f.bar
    AND EXISTS (
        SELECT l.beer
        FROM likes l
        WHERE l.drinker = f.drinker
        AND l.beer != s.beer
    )
);
","{'student_result': [], 'teacher_result': []}",Find names of all drinkers who do not frequent any bar that serves any beer they do not like.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
138,5,N,"<Ben> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Ben>
--------------------","SELECT name FROM drinker WHERE NOT EXISTS (SELECT f.bar FROM frequents f, serves s WHERE f.drinker = drinker.name AND f.bar = s.bar AND s.beer NOT IN (SELECT beer FROM likes WHERE drinker = drinker.name));","SELECT DISTINCT f.drinker
FROM frequents f
WHERE NOT EXISTS (
    SELECT s.bar
    FROM serves s
    WHERE s.bar = f.bar
    AND NOT EXISTS (
        SELECT l.beer
        FROM likes l
        WHERE l.drinker = f.drinker
        AND l.beer = s.beer
    )
)
AND NOT EXISTS (
    SELECT s.bar
    FROM serves s
    WHERE s.bar NOT IN (
        SELECT f2.bar
        FROM frequents f2
        WHERE f2.drinker = f.drinker
    )
);
","{'student_result': [['Dan']], 'teacher_result': []}",Find names of all drinkers who do not frequent any bar that serves any beer they do not like.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
145,5,N,"<Edwin> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Alyssa>
... ommitted ...
--------------------","SELECT name FROM drinker WHERE NOT EXISTS (SELECT f.bar FROM frequents f, serves s WHERE f.drinker = drinker.name AND f.bar = s.bar AND s.beer NOT IN (SELECT beer FROM likes WHERE drinker = drinker.name));","SELECT DISTINCT f.drinker
FROM frequents f
WHERE NOT EXISTS (
    SELECT s.bar
    FROM serves s
    LEFT JOIN likes l ON s.beer = l.beer AND f.drinker = l.drinker
    WHERE s.bar = f.bar
    AND (l.drinker IS NULL OR l.drinker <> f.drinker)
)
AND NOT EXISTS (
    SELECT s.bar
    FROM serves s
    WHERE s.bar = f.bar
    AND s.beer NOT IN (
        SELECT l.beer
        FROM likes l
        WHERE l.drinker = f.drinker
    )
);
","{'student_result': [['Ben'], ['Dan']], 'teacher_result': []}",Find names of all drinkers who do not frequent any bar that serves any beer they do not like.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
156,4,N,"<Albert|Maria> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Joshua|Julia>
... ommitted ...
--------------------","SELECT f1.drinker, f2.drinker FROM (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f1, (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f2 WHERE f1.drinker < f2.drinker AND f1.st = f2.st","SELECT t1.drinker, t2.drinker
FROM frequents t1
JOIN frequents t2 ON t1.times_a_week = t2.times_a_week
WHERE t1.drinker < t2.drinker;","{'student_result': [['Amy', 'Eve'], ['Amy', 'Dan'], ['Amy', 'Dan'], ['Amy', 'Dan'], ['Amy', 'Ben'], ['Ben', 'Dan'], ['Ben', 'Dan'], ['Ben', 'Coy'], ['Ben', 'Coy'], ['Ben', 'Eve'], ['Ben', 'Dan'], ['Ben', 'Dan'], ['Ben', 'Dan'], ['Ben', 'Dan'], ['Ben', 'Dan'], ['Ben', 'Coy'], ['Ben', 'Coy'], ['Coy', 'Dan'], ['Coy', 'Dan'], ['Coy', 'Dan'], ['Coy', 'Dan'], ['Dan', 'Eve'], ['Dan', 'Eve'], ['Dan', 'Eve']], 'teacher_result': [['Coy', 'Eve'], ['Amy', 'Eve'], ['Amy', 'Coy']]}","Find the pair of drinkers who frequent bars the same total number of times per week. Don't list (drinkerA, drinkerA). Only list pairs (drinkerA, drinkerB) where drinkerA < drinkerB  in the answer; don't list (drinkerB, drinkerA) again.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
178,4,N,"<Tony|Jesus> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Denise|Denise>
... ommitted ...
--------------------","SELECT f1.drinker, f2.drinker FROM (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f1, (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f2 WHERE f1.drinker < f2.drinker AND f1.st = f2.st","SELECT drinkerA.name, drinkerB.name
FROM drinker AS drinkerA, drinker AS drinkerB
WHERE 
    (SELECT SUM(frequents.times_a_week) FROM frequents WHERE frequents.drinker = drinkerA.name)
    =
    (SELECT SUM(frequents.times_a_week) FROM frequents WHERE frequents.drinker = drinkerB.name);","{'student_result': [['Amy', 'Eve'], ['Amy', 'Coy'], ['Amy', 'Amy'], ['Ben', 'Ben'], ['Coy', 'Eve'], ['Coy', 'Coy'], ['Coy', 'Amy'], ['Dan', 'Dan'], ['Eve', 'Eve'], ['Eve', 'Coy'], ['Eve', 'Amy']], 'teacher_result': [['Coy', 'Eve'], ['Amy', 'Eve'], ['Amy', 'Coy']]}","Find the pair of drinkers who frequent bars the same total number of times per week. Don't list (drinkerA, drinkerA). Only list pairs (drinkerA, drinkerB) where drinkerA < drinkerB  in the answer; don't list (drinkerB, drinkerA) again.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
197,8,N,"1-th tuple in answer should be <471 Extra ESB|0.25|2.375> instead of <American Pale Ale|1.25|2.8333333333333335>
(there may be other errors too)
your output >>>>>
--------------------
<American Pale Ale|1.25|2.8333333333333335>
... ommitted ...
--------------------","SELECT beer, MAX(price) - MIN(price) AS price_gap, AVG(price) AS avg_price FROM serves WHERE beer IN (SELECT s.beer FROM serves s, frequents f WHERE s.bar = f.bar AND f.drinker LIKE 'B%' GROUP BY s.beer HAVING COUNT(DISTINCT s.bar) >= 2) GROUP BY beer ORDER BY beer;","WITH bars_name_b AS (
    SELECT DISTINCT f.bar
    FROM frequents f
    JOIN drinker d ON f.drinker = d.name
    WHERE d.name LIKE 'C%'
),

beer_in_two_bars AS (
    SELECT s.beer
    FROM serves s
    JOIN bars_name_b b ON s.bar = b.bar
    GROUP BY s.beer
    HAVING COUNT(DISTINCT s.bar) >= 2
),

price_stats AS (
    SELECT 
        s.beer, 
        MAX(s.price) - MIN(s.price) AS gap, 
        AVG(s.price) AS avg_price
    FROM serves s
    WHERE s.beer IN (SELECT beer FROM beer_in_two_bars)
    GROUP BY s.beer
)

SELECT 
    beer, 
    gap, 
   avg_price
FROM price_stats
ORDER BY beer;
","{'student_result': [['Amstel', Decimal('0.75'), Decimal('1.4000000000000000')], ['Budweiser', Decimal('0.30'), Decimal('2.3000000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')]], 'teacher_result': [['Amstel', Decimal('0.75'), Decimal('1.4166666666666667')], ['Budweiser', Decimal('0.05'), Decimal('2.2250000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')]]}","Find, for each beer served at least 2 bars that frequented by drinkers whose name starts with 'B', the difference of maximum and minimum (price gap) and average price of the beers in all serving bars, order by bar name. I.e., your query should output beer, price_gap, and avg_price.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
215,5,N,"<Brenda> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Julia>
... ommitted ...
--------------------","SELECT name FROM drinker WHERE NOT EXISTS (SELECT f.bar FROM frequents f, serves s WHERE f.drinker = drinker.name AND f.bar = s.bar AND s.beer NOT IN (SELECT beer FROM likes WHERE drinker = drinker.name));","SELECT l.drinker
FROM serves s 
JOIN likes l ON s.beer = l.beer
JOIN frequents f ON s.bar = f.bar
WHERE s.beer = l.beer","{'student_result': [['Eve'], ['Eve'], ['Dan'], ['Dan'], ['Ben'], ['Ben'], ['Amy'], ['Amy'], ['Dan'], ['Dan'], ['Ben'], ['Ben'], ['Eve'], ['Eve'], ['Dan'], ['Dan'], ['Amy'], ['Amy'], ['Eve'], ['Eve'], ['Dan'], ['Dan'], ['Ben'], ['Ben'], ['Amy'], ['Amy'], ['Dan'], ['Dan'], ['Ben'], ['Ben'], ['Eve'], ['Eve'], ['Dan'], ['Dan'], ['Amy'], ['Amy'], ['Eve'], ['Eve'], ['Eve'], ['Eve'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Amy'], ['Amy'], ['Amy'], ['Amy'], ['Eve'], ['Eve'], ['Eve'], ['Eve'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Amy'], ['Amy'], ['Amy'], ['Amy'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Coy'], ['Coy'], ['Coy'], ['Coy'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Eve'], ['Eve'], ['Dan'], ['Dan'], ['Ben'], ['Ben'], ['Amy'], ['Amy'], ['Dan'], ['Dan'], ['Ben'], ['Ben'], ['Eve'], ['Eve'], ['Dan'], ['Dan'], ['Amy'], ['Amy'], ['Dan'], ['Dan'], ['Coy'], ['Coy'], ['Eve'], ['Eve'], ['Dan'], ['Dan'], ['Ben'], ['Ben'], ['Amy'], ['Amy'], ['Dan'], ['Dan'], ['Ben'], ['Ben']], 'teacher_result': []}",Find names of all drinkers who do not frequent any bar that serves any beer they do not like.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
241,6,N,"answer should have 1 instead of 2 occurrence(s) of <Neu Kong Fondue Restaurant|Down Under Pub>
(there may be other errors too)
your output >>>>>
--------------------
<Neu Kong Fondue Restaurant|Down Under Pub>
... ommitted ...
--------------------","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE NOT EXISTS (SELECT s1.beer FROM serves s1 WHERE s1.bar = b1.name AND NOT EXISTS (SELECT 1 FROM serves s2 WHERE s2.bar = b2.name AND s2.beer = s1.beer)) AND EXISTS (SELECT s2.beer FROM serves s2 WHERE s2.bar = b2.name AND NOT EXISTS (SELECT 1 FROM serves s1 WHERE s1.bar = b1.name AND s1.beer = s2.beer));","SELECT s1.bar AS bar1, s2.bar AS bar2
FROM serves s1
JOIN serves s2 ON s1.beer = s2.beer AND s1.bar <> s2.bar
WHERE NOT EXISTS (
    SELECT 1
    FROM serves s3
    WHERE s3.bar = s1.bar
    AND s3.beer NOT IN (
        SELECT s4.beer
        FROM serves s4
        WHERE s4.bar = s2.bar
    )
)
AND EXISTS (
    SELECT 1
    FROM serves s5
    WHERE s5.bar = s2.bar
    AND s5.beer NOT IN (
        SELECT s6.beer
        FROM serves s6
        WHERE s6.bar = s1.bar
    )
);
","{'student_result': [['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Satisfaction'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'Satisfaction'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Down Under Pub']], 'teacher_result': [['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction']]}","Find all (bar1, bar2) pairs where the set of beers served at bar1 is a proper subset of the those served at bar2; i.e., bar2 serves every beer that bar1 serves and plus some more.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
243,1,N,"<Michaela> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Melanie>
... ommitted ...
--------------------",SELECT DISTINCT bar FROM Serves WHERE (beer = 'Amstel' OR beer = 'Corona') AND price > 2;,"SELECT DISTINCT drinker 
FROM
frequents
WHERE
(drinker IN (SELECT DISTINCT drinker FROM likes WHERE beer <> 'Corona')
AND
bar IN (SELECT DISTINCT bar FROM serves WHERE beer = 'Corona'));","{'student_result': [['Amy'], ['Ben'], ['Coy'], ['Dan'], ['Eve']], 'teacher_result': [['Down Under Pub'], ['James Joyce Pub'], ['Satisfaction'], ['The Edge']]}",Find names of bars that serve either Amstel or Corona at price higher than $2.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
256,3,N,"<31> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<31>
--------------------",SELECT bar FROM Serves GROUP BY bar HAVING COUNT(beer) >= 5;,"SELECT COUNT(*) AS bar_count
FROM (
    SELECT bar
    FROM serves
    GROUP BY bar
    HAVING COUNT(DISTINCT beer) >= 5
) AS bars_with_5_beers;","{'student_result': [[1]], 'teacher_result': [['Satisfaction']]}",Find the names of all bars that serve at least 5 beers.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
275,4,N,"<Summer|Mario> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Jeffrey|Erin>
... ommitted ...
--------------------","SELECT f1.drinker, f2.drinker FROM (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f1, (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f2 WHERE f1.drinker < f2.drinker AND f1.st = f2.st","select distinct f1.drinker, f2.drinker
from frequents as f1, frequents as f2
where 
(
	f1.drinker <> f2.drinker 
	AND
	f1.times_a_week = f2.times_a_week
)","{'student_result': [['Amy', 'Ben'], ['Dan', 'Eve'], ['Coy', 'Ben'], ['Amy', 'Eve'], ['Ben', 'Eve'], ['Amy', 'Dan'], ['Dan', 'Amy'], ['Eve', 'Ben'], ['Eve', 'Dan'], ['Dan', 'Ben'], ['Ben', 'Coy'], ['Ben', 'Dan'], ['Ben', 'Amy'], ['Dan', 'Coy'], ['Coy', 'Dan'], ['Eve', 'Amy']], 'teacher_result': [['Coy', 'Eve'], ['Amy', 'Eve'], ['Amy', 'Coy']]}","Find the pair of drinkers who frequent bars the same total number of times per week. Don't list (drinkerA, drinkerA). Only list pairs (drinkerA, drinkerB) where drinkerA < drinkerB  in the answer; don't list (drinkerB, drinkerA) again.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
276,5,N,"<Marilyn> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Gregory>
... ommitted ...
--------------------","SELECT name FROM drinker WHERE NOT EXISTS (SELECT f.bar FROM frequents f, serves s WHERE f.drinker = drinker.name AND f.bar = s.bar AND s.beer NOT IN (SELECT beer FROM likes WHERE drinker = drinker.name));","WITH BarBeers AS (
    SELECT bar, beer
    FROM serves
),
DrinkerLikes AS (
    SELECT drinker, beer
    FROM likes
),
DrinkerFrequencies AS (
    SELECT DISTINCT drinker, bar
    FROM frequents
)
SELECT df.drinker
FROM DrinkerFrequencies df
LEFT JOIN BarBeers bb ON df.bar = bb.bar
LEFT JOIN DrinkerLikes dl ON df.drinker = dl.drinker AND bb.beer = dl.beer
GROUP BY df.drinker, df.bar
HAVING COUNT(bb.beer) = COUNT(dl.beer)
AND NOT EXISTS (
    SELECT 1
    FROM serves s
    LEFT JOIN likes l ON s.beer = l.beer AND df.drinker = l.drinker
    WHERE s.bar = df.bar
    AND l.drinker IS NULL
);
","{'student_result': [['Dan'], ['Ben'], ['Dan'], ['Dan'], ['Dan']], 'teacher_result': []}",Find names of all drinkers who do not frequent any bar that serves any beer they do not like.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
282,4,N,"<Crystal|Anthony> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Kaitlyn|Greg>
... ommitted ...
--------------------","SELECT f1.drinker, f2.drinker FROM (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f1, (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f2 WHERE f1.drinker < f2.drinker AND f1.st = f2.st","select distinct f1.drinker, f2.drinker
from 
(
	select drinker, sum(times_a_week) as totalVisits
	from frequents
	group by drinker
) as f1, 
(
	select drinker, sum(times_a_week) as totalVisits
	from frequents
	group by drinker
) as f2
where 
(
	f1.drinker <> f2.drinker
	and
	f1.totalVisits = f2.totalVisits
	and 
	f1.drinker > f2.drinker
);","{'student_result': [['Coy', 'Amy'], ['Eve', 'Amy'], ['Eve', 'Coy']], 'teacher_result': [['Coy', 'Eve'], ['Amy', 'Eve'], ['Amy', 'Coy']]}","Find the pair of drinkers who frequent bars the same total number of times per week. Don't list (drinkerA, drinkerA). Only list pairs (drinkerA, drinkerB) where drinkerA < drinkerB  in the answer; don't list (drinkerB, drinkerA) again.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
317,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Adel.es Restaurant|3|3.0|Dylan>
(there may be other errors too)
your output >>>>>
--------------------
<Adel.es Restaurant|3|3.0|Dylan>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","SELECT Q4.bar, Q5.total_num_drinker, Q5.avg_price, Q4.most_reg_drinker 
FROM
	(SELECT Q1.Bar AS bar, Q1.NumFreq as total_num_drinker, Q2.AvgBeerPrice AS avg_price
	FROM
		(SELECT DISTINCT frequents.bar AS Bar, COUNT(frequents.drinker) AS NumFreq
		FROM frequents
		group by frequents.bar) AS Q1
	JOIN
		(SELECT DISTINCT serves.bar AS Bar, AVG(serves.price) AS AvgBeerPrice
		FROM serves
		GROUP BY serves.bar) AS Q2
	ON Q1.Bar = Q2.Bar) AS Q5
JOIN
	(SELECT f1.bar AS bar, f1.drinker AS most_reg_drinker
	FROM frequents f1
	JOIN
		(SELECT bar AS bar, MAX(times_a_week) MaxTimes
		FROM frequents
		GROUP BY bar) AS Q3
	ON f1.times_a_week = Q3.MaxTimes
	AND f1.bar = Q3.bar
	GROUP BY f1.bar, f1.drinker
	ORDER BY f1.bar ASC, f1.drinker ASC) AS Q4
ON Q4.bar = Q5.bar
ORDER BY Q4.bar ASC, Q4.most_reg_drinker ASC;","{'student_result': [['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Eve'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Dan'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Dan']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
329,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Adel.es Restaurant|3|3.0|Ben>
(there may be other errors too)
your output >>>>>
--------------------
<Adel.es Restaurant|3|3.0|Ben>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","SELECT 
    f.bar,
    COUNT(DISTINCT f.drinker) AS num_drinkers,
    AVG(s.price) AS avg_price,
    mf.most_frequent_customer
FROM 
    frequents f
JOIN 
    serves s ON f.bar = s.bar
JOIN (
    SELECT 
        f1.bar,
        f1.drinker AS most_frequent_customer
    FROM 
        frequents f1
    JOIN (
        SELECT 
            bar,
            drinker,
            MAX(times_a_week) AS max_times
        FROM 
            frequents
        GROUP BY 
            bar, drinker
    ) mf_sub ON f1.bar = mf_sub.bar AND f1.drinker = mf_sub.drinker AND f1.times_a_week = mf_sub.max_times
) mf ON f.bar = mf.bar
GROUP BY 
    f.bar, mf.most_frequent_customer
ORDER BY 
    f.bar;
","{'student_result': [['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Coy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Ben'], ['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Dan'], ['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Eve'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Dan'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Dan']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
344,5,N,"<Sydney> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Joshua>
... ommitted ...
--------------------","SELECT name FROM drinker WHERE NOT EXISTS (SELECT f.bar FROM frequents f, serves s WHERE f.drinker = drinker.name AND f.bar = s.bar AND s.beer NOT IN (SELECT beer FROM likes WHERE drinker = drinker.name));","SELECT frequents.drinker
FROM frequents
WHERE EXISTS 
   (
    SELECT serves.beer
    FROM serves
    WHERE serves.bar = frequents.bar 
    AND serves.beer IN (SELECT likes.beer FROM likes WHERE likes.drinker = frequents.drinker)
   );","{'student_result': [['Amy'], ['Ben'], ['Ben'], ['Ben'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Eve']], 'teacher_result': []}",Find names of all drinkers who do not frequent any bar that serves any beer they do not like.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
351,4,N,"<Miguel|Justin> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Joshua|Bradley>
... ommitted ...
--------------------","SELECT f1.drinker, f2.drinker FROM (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f1, (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f2 WHERE f1.drinker < f2.drinker AND f1.st = f2.st","select a.drinker, b.drinker
from Frequents a
cross join Frequents b
where a.drinker != b.drinker
AND a.bar = b.bar
AND a.times_a_week = b.times_a_week;","{'student_result': [['Amy', 'Eve'], ['Ben', 'Dan'], ['Ben', 'Dan'], ['Coy', 'Dan'], ['Dan', 'Coy'], ['Dan', 'Ben'], ['Dan', 'Ben'], ['Eve', 'Amy']], 'teacher_result': [['Coy', 'Eve'], ['Amy', 'Eve'], ['Amy', 'Coy']]}","Find the pair of drinkers who frequent bars the same total number of times per week. Don't list (drinkerA, drinkerA). Only list pairs (drinkerA, drinkerB) where drinkerA < drinkerB  in the answer; don't list (drinkerB, drinkerA) again.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
353,4,N,"<Miguel|Justin> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Kelsey|Micheal>
... ommitted ...
--------------------","SELECT f1.drinker, f2.drinker FROM (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f1, (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f2 WHERE f1.drinker < f2.drinker AND f1.st = f2.st","select DISTINCT a.drinker, b.drinker
from Frequents a
cross join Frequents b
where a.drinker != b.drinker
AND a.bar = b.bar
AND a.times_a_week = b.times_a_week;","{'student_result': [['Amy', 'Eve'], ['Ben', 'Dan'], ['Coy', 'Dan'], ['Dan', 'Ben'], ['Dan', 'Coy'], ['Eve', 'Amy']], 'teacher_result': [['Coy', 'Eve'], ['Amy', 'Eve'], ['Amy', 'Coy']]}","Find the pair of drinkers who frequent bars the same total number of times per week. Don't list (drinkerA, drinkerA). Only list pairs (drinkerA, drinkerB) where drinkerA < drinkerB  in the answer; don't list (drinkerB, drinkerA) again.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
361,4,N,"<Bonnie|Sheila> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Alicia|Amanda>
... ommitted ...
--------------------","SELECT f1.drinker, f2.drinker FROM (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f1, (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f2 WHERE f1.drinker < f2.drinker AND f1.st = f2.st","select DISTINCT a.drinker, b.drinker
from Frequents a
cross join Frequents b
where a.drinker < b.drinker
AND a.bar = b.bar
AND a.times_a_week = b.times_a_week;","{'student_result': [['Amy', 'Eve'], ['Ben', 'Dan'], ['Coy', 'Dan']], 'teacher_result': [['Coy', 'Eve'], ['Amy', 'Eve'], ['Amy', 'Coy']]}","Find the pair of drinkers who frequent bars the same total number of times per week. Don't list (drinkerA, drinkerA). Only list pairs (drinkerA, drinkerB) where drinkerA < drinkerB  in the answer; don't list (drinkerB, drinkerA) again.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
365,8,N,"1-th tuple in answer should be <471 Extra ESB|0.25|2.375> instead of <Old Bawdy 2006|0.75|2.8>
(there may be other errors too)
your output >>>>>
--------------------
<Old Bawdy 2006|0.75|2.8>
... ommitted ...
--------------------","SELECT beer, MAX(price) - MIN(price) AS price_gap, AVG(price) AS avg_price FROM serves WHERE beer IN (SELECT s.beer FROM serves s, frequents f WHERE s.bar = f.bar AND f.drinker LIKE 'B%' GROUP BY s.beer HAVING COUNT(DISTINCT s.bar) >= 2) GROUP BY beer ORDER BY beer;","
SELECT s.beer, MAX(s.price)-MIN(s.price), AVG(s.price) FROM serves s
	RIGHT JOIN
	(SELECT beers_and_count.beer FROM
	(SELECT s1.beer, COUNT(s1.bar) AS beer_count FROM serves s1
		RIGHT JOIN
			(SELECT bar FROM frequents WHERE drinker LIKE 'B%') AS s2
		ON
			s1.bar = s2.bar
		GROUP BY s1.beer) AS beers_and_count
	WHERE beers_and_count.beer_count >= 2) AS b
	ON b.beer = s.beer
GROUP BY s.beer","{'student_result': [['Amstel', Decimal('0.75'), Decimal('1.4000000000000000')], ['Budweiser', Decimal('0.30'), Decimal('2.3000000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')]], 'teacher_result': [['Amstel', Decimal('0.75'), Decimal('1.4000000000000000')], ['Budweiser', Decimal('0.30'), Decimal('2.3000000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')]]}","Find, for each beer served at least 2 bars that frequented by drinkers whose name starts with 'B', the difference of maximum and minimum (price gap) and average price of the beers in all serving bars, order by bar name. I.e., your query should output beer, price_gap, and avg_price.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
371,6,N,"<Land & Leute|Down Under Pub> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Adel.es Restaurant|Akebono>
... ommitted ...
--------------------","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE NOT EXISTS (SELECT s1.beer FROM serves s1 WHERE s1.bar = b1.name AND NOT EXISTS (SELECT 1 FROM serves s2 WHERE s2.bar = b2.name AND s2.beer = s1.beer)) AND EXISTS (SELECT s2.beer FROM serves s2 WHERE s2.bar = b2.name AND NOT EXISTS (SELECT 1 FROM serves s1 WHERE s1.bar = b1.name AND s1.beer = s2.beer));","WITH bar_beers AS (
    SELECT bar, beer
    FROM serves
),
bar1_beers AS (
    SELECT b1.bar AS bar1, b2.bar AS bar2
    FROM serves b1
    JOIN serves b2 ON b1.beer = b2.beer AND b1.bar <> b2.bar
    GROUP BY b1.bar, b2.bar
),
bar2_beers AS (
    SELECT bar1_beers.bar1, bar1_beers.bar2
    FROM bar1_beers
    JOIN (SELECT bar, COUNT(DISTINCT beer) AS beer_count FROM serves GROUP BY bar) bar_counts
    ON bar1_beers.bar2 = bar_counts.bar
    WHERE bar_counts.beer_count > (SELECT COUNT(DISTINCT beer) FROM serves WHERE bar = bar1_beers.bar1)
)
SELECT DISTINCT bar1, bar2
FROM bar2_beers
ORDER BY bar1, bar2;
","{'student_result': [['Down Under Pub', 'James Joyce Pub'], ['Down Under Pub', 'Satisfaction'], ['James Joyce Pub', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'James Joyce Pub'], ['Talk of the Town', 'Satisfaction'], ['Talk of the Town', 'The Edge'], ['The Edge', 'James Joyce Pub'], ['The Edge', 'Satisfaction']], 'teacher_result': [['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction']]}","Find all (bar1, bar2) pairs where the set of beers served at bar1 is a proper subset of the those served at bar2; i.e., bar2 serves every beer that bar1 serves and plus some more.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
374,9,N,"<Gaststatte Metzger|Pride & Joy Mild Ale|2.5> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Restaurant Hotel Bessunger Forst|471 Extra ESB|2.25>
... ommitted ...
--------------------","SELECT beer.name, min_price, bar FROM beer LEFT OUTER JOIN (SELECT beer, MIN(price) AS min_price FROM serves GROUP BY beer) t ON beer.name = t.beer LEFT OUTER JOIN serves ON beer.name = serves.beer AND min_price = serves.price;","SELECT b.name, b1.beer, b1.min_price
FROM (
    SELECT s.beer, MIN(s.price) AS min_price
    FROM serves s
    GROUP BY s.beer
) AS b1
LEFT JOIN serves s ON b1.beer = s.beer AND b1.min_price = s.price
LEFT JOIN bar b ON s.bar = b.name
ORDER BY b1.beer;","{'student_result': [['James Joyce Pub', 'Amstel', Decimal('1.00')], ['Down Under Pub', 'Amstel', Decimal('1.00')], ['Talk of the Town', 'Budweiser', Decimal('2.20')], ['Satisfaction', 'Corona', Decimal('7.00')], ['James Joyce Pub', 'Corona', Decimal('7.00')], ['The Edge', 'Corona', Decimal('7.00')], ['Down Under Pub', 'Corona', Decimal('7.00')], ['Satisfaction', 'Dixie', Decimal('2.75')], ['James Joyce Pub', 'Erdinger', Decimal('3.50')], ['Satisfaction', 'Full Sail', Decimal('7.75')]], 'teacher_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Talk of the Town']]}","Find, for each beer, its lowest serving price and the bar(s) serving it at this price. The output should be a list of (beer, price, bar) triples. If some beer B is not served anywhere, you should still output (B, NULL, NULL).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
385,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Land & Leute|8|3.0|Adam>
(there may be other errors too)
your output >>>>>
--------------------
<Land & Leute|8|3.0|Adam>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","Select maintable.bar, total_num_drinker, avg_price, most_reg_drinker
From
-- total num of drinkers and avg price joined
(SELECT total.bar, total_num_drinker, avg_price
-- Total weekly drinkers
FROM 
(SELECT bar, Count(DISTINCT drinker) as total_num_drinker
FROM
(SELECT DISTINCT bar, drinker
FROM frequents) as cnt

RIGHT JOIN
	
(SELECT bar.name as bar
FROM bar) as bar
USING (bar)
GROUP BY bar) as total

INNER JOIN 

-- average price of beers per bar
(SELECT bar, avg_price
FROM (
	SELECT bar.name as bar
	FROM bar
) as bar

LEFT JOIN

(SELECT bar, AVG(price) as avg_price
FROM serves
GROUP BY bar) as average
USING (bar)) as average

ON total.bar = average.bar) as maintable

INNER JOIN 

-- Find drinkers who attend the max value
(SELECT frequents.bar, drinker as most_reg_drinker
FROM frequents,
-- Find the maximum value of drinkers a week
(SELECT bar, MAX(times_a_week) as Maxdrinker
FROM frequents
GROUP BY bar) as Maxvalues
WHERE (frequents.bar = Maxvalues.bar) and (times_a_week = Maxdrinker)) as Maxdrinkers

ON maintable.bar = Maxdrinkers.bar

ORDER BY most_reg_drinker ASC, total_num_drinker DESC;","{'student_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Dan'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Eve']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
401,2,N,"<Pizzeria Triangolo> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Land & Leute>
... ommitted ...
--------------------",SELECT DISTINCT drinker FROM frequents NATURAL JOIN serves WHERE beer = 'Corona' AND drinker not in (SELECT drinker FROM Likes WHERE beer = 'Corona');,SELECT bar FROM serves WHERE (beer = 'Amstel' OR beer = 'Corona') AND price > 2;,"{'student_result': [['Down Under Pub'], ['The Edge'], ['James Joyce Pub'], ['Satisfaction']], 'teacher_result': [['Ben'], ['Coy']]}",Find the names of all drinkers that do not like Corona but frequent a bar that serves Corona.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
425,7,N,"128-th tuple in answer should be <Talk of the Town|6|2.175|Amy> instead of <Talk of the Town|6|2.1750000000000003|Amy>
(there may be other errors too)
your output >>>>>
--------------------
<Donerhaus Dest|16|2.95|Faith>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","SELECT 
    b.name AS bar_name,
    COALESCE(COUNT(DISTINCT f.drinker), 0) AS total_num_drinker,
    COALESCE(AVG(s.price), NULL) AS avg_price,
    (
        SELECT drinker
        FROM frequents
        WHERE bar = b.name
        GROUP BY drinker
        ORDER BY SUM(times_a_week) DESC, drinker ASC
        LIMIT 1
    ) AS most_reg_drinker
FROM 
    bar b
LEFT JOIN frequents f ON b.name = f.bar
LEFT JOIN serves s ON b.name = s.bar
GROUP BY b.name
ORDER BY 
    total_num_drinker DESC, 
    b.name;
","{'student_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
438,8,N,"3-th tuple in answer should be <American Pale Ale|1.25|2.8333333333333335> instead of <American Pale Ale|1.2500000000000000|3.0000000000000000>
(there may be other errors too)
your output >>>>>
--------------------
<471 Extra ESB|0.2500000000000000|2.3750000000000000>
... ommitted ...
--------------------","SELECT beer, MAX(price) - MIN(price) AS price_gap, AVG(price) AS avg_price FROM serves WHERE beer IN (SELECT s.beer FROM serves s, frequents f WHERE s.bar = f.bar AND f.drinker LIKE 'B%' GROUP BY s.beer HAVING COUNT(DISTINCT s.bar) >= 2) GROUP BY beer ORDER BY beer;","SELECT 
    s.beer,
    CAST(MAX(s.price) - MIN(s.price) AS NUMERIC(20, 16)) AS price_gap,
    CAST(AVG(s.price) AS NUMERIC(20, 16)) AS avg_price
FROM 
    serves s
JOIN 
    frequents f ON s.bar = f.bar
JOIN 
    drinker d ON f.drinker = d.name AND d.name LIKE 'B%'
WHERE 
    s.beer IN (
        SELECT s2.beer
        FROM serves s2
        JOIN frequents f2 ON s2.bar = f2.bar
        JOIN drinker d2 ON f2.drinker = d2.name AND d2.name LIKE 'B%'
        GROUP BY s2.beer
        HAVING COUNT(DISTINCT s2.bar) >= 2
    )
GROUP BY 
    s.beer
ORDER BY 
    s.beer;
","{'student_result': [['Amstel', Decimal('0.7500000000000000'), Decimal('1.4166666666666667')], ['Budweiser', Decimal('0.0500000000000000'), Decimal('2.2250000000000000')], ['Corona', Decimal('0E-16'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.2500000000000000'), Decimal('2.8750000000000000')]], 'teacher_result': [['Amstel', Decimal('0.75'), Decimal('1.4000000000000000')], ['Budweiser', Decimal('0.30'), Decimal('2.3000000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')]]}","Find, for each beer served at least 2 bars that frequented by drinkers whose name starts with 'B', the difference of maximum and minimum (price gap) and average price of the beers in all serving bars, order by bar name. I.e., your query should output beer, price_gap, and avg_price.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
484,5,N,"<Raymond> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Ben>
... ommitted ...
--------------------","SELECT name FROM drinker WHERE NOT EXISTS (SELECT f.bar FROM frequents f, serves s WHERE f.drinker = drinker.name AND f.bar = s.bar AND s.beer NOT IN (SELECT beer FROM likes WHERE drinker = drinker.name));","WITH innie AS (
	SELECT Serves.bar, Serves.beer, Likes.drinker
	FROM Serves
	JOIN Likes ON Serves.beer=Likes.beer
	JOIN Frequents ON Likes.drinker=Frequents.drinker
	WHERE Serves.bar=Frequents.bar
	ORDER BY Serves.bar
), otherBeers AS (
	SELECT Serves.bar, Serves.beer, Frequents.drinker
	FROM Frequents
	JOIN Serves ON Serves.bar=Frequents.bar
	ORDER BY Frequents.drinker
)
SELECT drinker
FROM (
	SELECT *
	FROM innie 
) AS pickyDrinkers;","{'student_result': [['Dan'], ['Dan'], ['Dan'], ['Amy'], ['Eve'], ['Dan'], ['Ben'], ['Amy'], ['Eve'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Ben'], ['Dan'], ['Ben'], ['Dan'], ['Dan'], ['Dan'], ['Ben'], ['Dan'], ['Ben'], ['Dan'], ['Dan'], ['Dan']], 'teacher_result': []}",Find names of all drinkers who do not frequent any bar that serves any beer they do not like.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
488,5,N,"<Raymond> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Adam>
... ommitted ...
--------------------","SELECT name FROM drinker WHERE NOT EXISTS (SELECT f.bar FROM frequents f, serves s WHERE f.drinker = drinker.name AND f.bar = s.bar AND s.beer NOT IN (SELECT beer FROM likes WHERE drinker = drinker.name));","WITH innie AS (
	SELECT Serves.bar, Serves.beer, Likes.drinker
	FROM Serves
	JOIN Likes ON Serves.beer=Likes.beer
	JOIN Frequents ON Likes.drinker=Frequents.drinker
	WHERE Serves.bar=Frequents.bar
	ORDER BY Serves.bar
), otherBeers AS (
	SELECT Serves.bar, Serves.beer, Frequents.drinker
	FROM Frequents
	JOIN Serves ON Serves.bar=Frequents.bar
	ORDER BY Frequents.drinker
)
SELECT drinker
FROM (
	SELECT *
	FROM otherBeers
) AS pickyDrinkers;","{'student_result': [['Amy'], ['Amy'], ['Amy'], ['Amy'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Coy'], ['Coy'], ['Coy'], ['Coy'], ['Coy'], ['Coy'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Eve'], ['Eve'], ['Eve'], ['Eve']], 'teacher_result': []}",Find names of all drinkers who do not frequent any bar that serves any beer they do not like.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
492,9,N,"<Budweiser|2.2|The Edge> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<471 Extra ESB|2.25|Pizzeria Santa Lucia>
... ommitted ...
--------------------","SELECT beer.name, min_price, bar FROM beer LEFT OUTER JOIN (SELECT beer, MIN(price) AS min_price FROM serves GROUP BY beer) t ON beer.name = t.beer LEFT OUTER JOIN serves ON beer.name = serves.beer AND min_price = serves.price;","WITH LowestBeerPrices AS (
    SELECT beer, MIN(price) AS min_price
    FROM serves
    GROUP BY beer
)

SELECT 
    lbp.beer,
    COALESCE(lbp.min_price, -1) AS price, -- Replace 'None' with -1
    COALESCE(s.bar, 'None') AS bar
FROM 
    LowestBeerPrices lbp
LEFT JOIN 
    serves s ON lbp.beer = s.beer
ORDER BY 
    lbp.beer;
","{'student_result': [['Amstel', Decimal('1.00'), 'Talk of the Town'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Amstel', Decimal('1.00'), 'Satisfaction'], ['Amstel', Decimal('1.00'), 'The Edge'], ['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Budweiser', Decimal('2.20'), 'Talk of the Town'], ['Budweiser', Decimal('2.20'), 'Down Under Pub'], ['Budweiser', Decimal('2.20'), 'The Edge'], ['Budweiser', Decimal('2.20'), 'Satisfaction'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'James Joyce Pub'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Full Sail', Decimal('7.75'), 'Satisfaction']], 'teacher_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Talk of the Town']]}","Find, for each beer, its lowest serving price and the bar(s) serving it at this price. The output should be a list of (beer, price, bar) triples. If some beer B is not served anywhere, you should still output (B, NULL, NULL).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
528,9,N,"<None|None|None> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<471 Extra ESB|2.25|Restaurant Hotel Bessunger Forst>
... ommitted ...
--------------------","SELECT beer.name, min_price, bar FROM beer LEFT OUTER JOIN (SELECT beer, MIN(price) AS min_price FROM serves GROUP BY beer) t ON beer.name = t.beer LEFT OUTER JOIN serves ON beer.name = serves.beer AND min_price = serves.price;","SELECT b1.beer, b1.min_price as price, s.bar
FROM (
    SELECT s.beer, MIN(s.price) AS min_price
    FROM serves s
    GROUP BY s.beer
) AS b1
LEFT JOIN serves s ON b1.beer = s.beer AND b1.min_price = s.price
FULL OUTER JOIN beer b ON b1.beer = b.name
ORDER BY b1.beer, b1.min_price, b.name;","{'student_result': [['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Budweiser', Decimal('2.20'), 'Talk of the Town'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Full Sail', Decimal('7.75'), 'Satisfaction']], 'teacher_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Talk of the Town']]}","Find, for each beer, its lowest serving price and the bar(s) serving it at this price. The output should be a list of (beer, price, bar) triples. If some beer B is not served anywhere, you should still output (B, NULL, NULL).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
536,2,N,"<Dan> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Amy>
... ommitted ...
--------------------",SELECT DISTINCT drinker FROM frequents NATURAL JOIN serves WHERE beer = 'Corona' AND drinker not in (SELECT drinker FROM Likes WHERE beer = 'Corona');,SELECT DISTINCT drinker FROM frequents NATURAL JOIN serves WHERE beer = 'Corona' AND drinker in (SELECT drinker FROM Likes WHERE beer = 'Corona');,"{'student_result': [['Amy'], ['Dan'], ['Eve']], 'teacher_result': [['Ben'], ['Coy']]}",Find the names of all drinkers that do not like Corona but frequent a bar that serves Corona.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
577,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Donerhaus Dest|16|2.95|Ben>
(there may be other errors too)
your output >>>>>
--------------------
<Donerhaus Dest|16|2.95|Ben>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","SELECT 
    b.name,
    COALESCE(COUNT(DISTINCT f.drinker), 0) AS total_num_drinker,
    AVG(s.price) AS avg_price,
    (
        SELECT d.drinker
        FROM Frequents d
        WHERE d.bar = b.name
        GROUP BY d.drinker
        ORDER BY COUNT(d.times_a_week) DESC, d.drinker ASC -- Tie-breaking by alphabetical order
        LIMIT 1
    ) AS most_reg_drinker
FROM 
    Bar b
LEFT JOIN 
    Frequents f ON b.name = f.bar
LEFT JOIN 
    Serves s ON b.name = s.bar
GROUP BY 
    b.name
ORDER BY 
    total_num_drinker DESC, b.name ASC; -- Sorting by number of drinkers and then bar name","{'student_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Coy'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Ben'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
578,8,N,"3-th tuple in answer should be <American Pale Ale|1.25|2.833333333> instead of <American Pale Ale|1.25|3.0>
(there may be other errors too)
your output >>>>>
--------------------
<471 Extra ESB|0.25|2.375>
... ommitted ...
--------------------","SELECT beer, MAX(price) - MIN(price) AS price_gap, AVG(price) AS avg_price FROM serves WHERE beer IN (SELECT s.beer FROM serves s, frequents f WHERE s.bar = f.bar AND f.drinker LIKE 'B%' GROUP BY s.beer HAVING COUNT(DISTINCT s.bar) >= 2) GROUP BY beer ORDER BY beer;","SELECT 
    s.beer, 
    MAX(s.price) - MIN(s.price) AS price_gap,
    AVG(s.price) AS avg_price
FROM 
    Serves s
JOIN 
    Frequents f ON s.bar = f.bar
JOIN 
    Drinker d ON f.drinker = d.name
WHERE 
    d.name LIKE 'B%'
GROUP BY 
    s.beer
HAVING 
    COUNT(DISTINCT s.bar) >= 2","{'student_result': [['Amstel', Decimal('0.75'), Decimal('1.4166666666666667')], ['Budweiser', Decimal('0.05'), Decimal('2.2250000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')]], 'teacher_result': [['Amstel', Decimal('0.75'), Decimal('1.4000000000000000')], ['Budweiser', Decimal('0.30'), Decimal('2.3000000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')]]}","Find, for each beer served at least 2 bars that frequented by drinkers whose name starts with 'B', the difference of maximum and minimum (price gap) and average price of the beers in all serving bars, order by bar name. I.e., your query should output beer, price_gap, and avg_price.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
627,2,N,"<Terrance> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Joshua>
... ommitted ...
--------------------",SELECT DISTINCT drinker FROM frequents NATURAL JOIN serves WHERE beer = 'Corona' AND drinker not in (SELECT drinker FROM Likes WHERE beer = 'Corona');,"SELECT drinker 
FROM Likes
Where (beer <> 'Corona');
","{'student_result': [['Amy'], ['Ben'], ['Ben'], ['Coy'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Eve']], 'teacher_result': [['Ben'], ['Coy']]}",Find the names of all drinkers that do not like Corona but frequent a bar that serves Corona.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
638,2,N,"<Terrance> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Edward>
... ommitted ...
--------------------",SELECT DISTINCT drinker FROM frequents NATURAL JOIN serves WHERE beer = 'Corona' AND drinker not in (SELECT drinker FROM Likes WHERE beer = 'Corona');,"WITH v1 AS (
    SELECT drinker 
    FROM Likes
    WHERE beer != 'Corona'
),


v2 AS (
    SELECT * 
    FROM Frequents
    NATURAL JOIN Serves
),


v3 AS (
    SELECT drinker
    FROM v2 
    WHERE beer = 'Corona'
)

SELECT * FROM v1 Union SELECT * FROM v3;
","{'student_result': [['Dan'], ['Coy'], ['Ben'], ['Eve'], ['Amy']], 'teacher_result': [['Ben'], ['Coy']]}",Find the names of all drinkers that do not like Corona but frequent a bar that serves Corona.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
633,2,N,"<Dan> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Melanie>
... ommitted ...
--------------------",SELECT DISTINCT drinker FROM frequents NATURAL JOIN serves WHERE beer = 'Corona' AND drinker not in (SELECT drinker FROM Likes WHERE beer = 'Corona');,"-- Define CTE for v1
WITH v1 AS (
    SELECT drinker 
    FROM Likes
    WHERE beer <> 'Corona'
),

-- Define CTE for v2
v2 AS (
    SELECT * 
    FROM Frequents
    NATURAL JOIN Serves
),

-- Define CTE for v3 using v2
v3 AS (
    SELECT drinker
    FROM v2 
    WHERE beer = 'Corona'
)

-- Final query to find intersection of v1 and v3
SELECT * FROM v1 INTERSECT SELECT * FROM v3;
","{'student_result': [['Dan'], ['Coy'], ['Ben'], ['Amy'], ['Eve']], 'teacher_result': [['Ben'], ['Coy']]}",Find the names of all drinkers that do not like Corona but frequent a bar that serves Corona.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
642,2,N,"<Dan> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Ben>
... ommitted ...
--------------------",SELECT DISTINCT drinker FROM frequents NATURAL JOIN serves WHERE beer = 'Corona' AND drinker not in (SELECT drinker FROM Likes WHERE beer = 'Corona');,"WITH v1 AS (
    SELECT drinker 
    FROM Likes
    WHERE beer != 'Corona'
),


v2 AS (
    SELECT * 
    FROM Frequents
    NATURAL JOIN Serves
),


v3 AS (
    SELECT drinker
    FROM v2 
    WHERE beer = 'Corona'
)

SELECT * FROM v3;","{'student_result': [['Dan'], ['Coy'], ['Dan'], ['Coy'], ['Eve'], ['Dan'], ['Ben'], ['Amy'], ['Dan'], ['Ben']], 'teacher_result': [['Ben'], ['Coy']]}",Find the names of all drinkers that do not like Corona but frequent a bar that serves Corona.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
662,2,N,"<Eve> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Melanie>
... ommitted ...
--------------------",SELECT DISTINCT drinker FROM frequents NATURAL JOIN serves WHERE beer = 'Corona' AND drinker not in (SELECT drinker FROM Likes WHERE beer = 'Corona');,"SELECT DISTINCT l.drinker
FROM (
    SELECT DISTINCT drinker
    FROM likes
    WHERE beer <> 'Corona'
) AS l
JOIN frequents AS f ON l.drinker = f.drinker
JOIN serves AS s ON f.bar = s.bar
WHERE s.beer = 'Corona';","{'student_result': [['Amy'], ['Ben'], ['Coy'], ['Dan'], ['Eve']], 'teacher_result': [['Ben'], ['Coy']]}",Find the names of all drinkers that do not like Corona but frequent a bar that serves Corona.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
693,4,N,"<Gregory|Madeline> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Adam|Edwin>
... ommitted ...
--------------------","SELECT f1.drinker, f2.drinker FROM (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f1, (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f2 WHERE f1.drinker < f2.drinker AND f1.st = f2.st","SELECT DISTINCT f1.drinker, f2.drinker
FROM frequents f1
JOIN frequents f2 ON f1.drinker < f2.drinker
WHERE NOT EXISTS (
    SELECT s.bar
    FROM serves s
    LEFT JOIN likes l ON s.beer = l.beer AND (f1.drinker = l.drinker OR f2.drinker = l.drinker)
    WHERE f1.bar = s.bar AND l.drinker IS NULL
)
GROUP BY f1.drinker, f2.drinker
HAVING SUM(f1.times_a_week) = SUM(f2.times_a_week);","{'student_result': [['Ben', 'Coy']], 'teacher_result': [['Coy', 'Eve'], ['Amy', 'Eve'], ['Amy', 'Coy']]}","Find the pair of drinkers who frequent bars the same total number of times per week. Don't list (drinkerA, drinkerA). Only list pairs (drinkerA, drinkerB) where drinkerA < drinkerB  in the answer; don't list (drinkerB, drinkerA) again.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
700,6,N,"<China Restaurant Kaiser|Grunsels Bornchen> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Adel.es Restaurant|Akebono>
... ommitted ...
--------------------","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE NOT EXISTS (SELECT s1.beer FROM serves s1 WHERE s1.bar = b1.name AND NOT EXISTS (SELECT 1 FROM serves s2 WHERE s2.bar = b2.name AND s2.beer = s1.beer)) AND EXISTS (SELECT s2.beer FROM serves s2 WHERE s2.bar = b2.name AND NOT EXISTS (SELECT 1 FROM serves s1 WHERE s1.bar = b1.name AND s1.beer = s2.beer));","SELECT DISTINCT s1.bar AS bar1, s2.bar AS bar2
FROM serves s1
JOIN serves s2 ON s1.beer = s2.beer AND s1.bar <> s2.bar
GROUP BY s1.bar, s2.bar
HAVING COUNT(DISTINCT s1.beer) = COUNT(DISTINCT s2.beer)
AND COUNT(DISTINCT s1.beer) < (
    SELECT COUNT(DISTINCT beer)
    FROM serves
    WHERE bar = s2.bar
);","{'student_result': [['Down Under Pub', 'James Joyce Pub'], ['Down Under Pub', 'Satisfaction'], ['James Joyce Pub', 'Down Under Pub'], ['James Joyce Pub', 'Satisfaction'], ['James Joyce Pub', 'Talk of the Town'], ['James Joyce Pub', 'The Edge'], ['Satisfaction', 'James Joyce Pub'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'James Joyce Pub'], ['Talk of the Town', 'Satisfaction'], ['Talk of the Town', 'The Edge'], ['The Edge', 'James Joyce Pub'], ['The Edge', 'Satisfaction']], 'teacher_result': [['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction']]}","Find all (bar1, bar2) pairs where the set of beers served at bar1 is a proper subset of the those served at bar2; i.e., bar2 serves every beer that bar1 serves and plus some more.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
711,4,N,"<Dylan|Sheila> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Joshua|Eve>
... ommitted ...
--------------------","SELECT f1.drinker, f2.drinker FROM (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f1, (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f2 WHERE f1.drinker < f2.drinker AND f1.st = f2.st","SELECT A.drinker, B.drinker
FROM frequents A CROSS JOIN frequents B
WHERE A.times_a_week = B.times_a_week","{'student_result': [['Amy', 'Eve'], ['Amy', 'Dan'], ['Amy', 'Dan'], ['Amy', 'Dan'], ['Amy', 'Ben'], ['Amy', 'Amy'], ['Ben', 'Dan'], ['Ben', 'Dan'], ['Ben', 'Coy'], ['Ben', 'Coy'], ['Ben', 'Ben'], ['Ben', 'Ben'], ['Ben', 'Eve'], ['Ben', 'Dan'], ['Ben', 'Dan'], ['Ben', 'Dan'], ['Ben', 'Ben'], ['Ben', 'Amy'], ['Ben', 'Dan'], ['Ben', 'Dan'], ['Ben', 'Coy'], ['Ben', 'Coy'], ['Ben', 'Ben'], ['Ben', 'Ben'], ['Coy', 'Dan'], ['Coy', 'Dan'], ['Coy', 'Coy'], ['Coy', 'Coy'], ['Coy', 'Ben'], ['Coy', 'Ben'], ['Coy', 'Dan'], ['Coy', 'Dan'], ['Coy', 'Coy'], ['Coy', 'Coy'], ['Coy', 'Ben'], ['Coy', 'Ben'], ['Dan', 'Eve'], ['Dan', 'Dan'], ['Dan', 'Dan'], ['Dan', 'Dan'], ['Dan', 'Ben'], ['Dan', 'Amy'], ['Dan', 'Dan'], ['Dan', 'Dan'], ['Dan', 'Coy'], ['Dan', 'Coy'], ['Dan', 'Ben'], ['Dan', 'Ben'], ['Dan', 'Dan'], ['Dan', 'Dan'], ['Dan', 'Coy'], ['Dan', 'Coy'], ['Dan', 'Ben'], ['Dan', 'Ben'], ['Dan', 'Eve'], ['Dan', 'Dan'], ['Dan', 'Dan'], ['Dan', 'Dan'], ['Dan', 'Ben'], ['Dan', 'Amy'], ['Dan', 'Eve'], ['Dan', 'Dan'], ['Dan', 'Dan'], ['Dan', 'Dan'], ['Dan', 'Ben'], ['Dan', 'Amy'], ['Eve', 'Eve'], ['Eve', 'Dan'], ['Eve', 'Dan'], ['Eve', 'Dan'], ['Eve', 'Ben'], ['Eve', 'Amy']], 'teacher_result': [['Coy', 'Eve'], ['Amy', 'Eve'], ['Amy', 'Coy']]}","Find the pair of drinkers who frequent bars the same total number of times per week. Don't list (drinkerA, drinkerA). Only list pairs (drinkerA, drinkerB) where drinkerA < drinkerB  in the answer; don't list (drinkerB, drinkerA) again.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
739,2,N,"<Satisfaction> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Bierbrunnen>
... ommitted ...
--------------------",SELECT DISTINCT drinker FROM frequents NATURAL JOIN serves WHERE beer = 'Corona' AND drinker not in (SELECT drinker FROM Likes WHERE beer = 'Corona');,"
select distinct bar 
from serves natural join frequents natural join (select name as drinker
	from drinker
	where name not in 
	(
	select likes.drinker
	from likes
	where beer='Corona'
	)) dislike_corona
where beer='Corona'","{'student_result': [['Down Under Pub'], ['James Joyce Pub'], ['Satisfaction'], ['The Edge']], 'teacher_result': [['Ben'], ['Coy']]}",Find the names of all drinkers that do not like Corona but frequent a bar that serves Corona.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
754,4,N,"<Patrick|Anne> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Joshua|Eve>
... ommitted ...
--------------------","SELECT f1.drinker, f2.drinker FROM (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f1, (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f2 WHERE f1.drinker < f2.drinker AND f1.st = f2.st","select freq_a.drinker, freq_b.drinker
from frequents freq_a join frequents freq_b on
freq_a.times_a_week=freq_b.times_a_week
where freq_a.drinker > freq_b.drinker
","{'student_result': [['Ben', 'Amy'], ['Coy', 'Ben'], ['Coy', 'Ben'], ['Coy', 'Ben'], ['Coy', 'Ben'], ['Dan', 'Ben'], ['Dan', 'Amy'], ['Dan', 'Coy'], ['Dan', 'Coy'], ['Dan', 'Ben'], ['Dan', 'Ben'], ['Dan', 'Coy'], ['Dan', 'Coy'], ['Dan', 'Ben'], ['Dan', 'Ben'], ['Dan', 'Ben'], ['Dan', 'Amy'], ['Dan', 'Ben'], ['Dan', 'Amy'], ['Eve', 'Dan'], ['Eve', 'Dan'], ['Eve', 'Dan'], ['Eve', 'Ben'], ['Eve', 'Amy']], 'teacher_result': [['Coy', 'Eve'], ['Amy', 'Eve'], ['Amy', 'Coy']]}","Find the pair of drinkers who frequent bars the same total number of times per week. Don't list (drinkerA, drinkerA). Only list pairs (drinkerA, drinkerB) where drinkerA < drinkerB  in the answer; don't list (drinkerB, drinkerA) again.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
759,4,N,"<Suzanne|Chloe> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Jeffrey|Erin>
... ommitted ...
--------------------","SELECT f1.drinker, f2.drinker FROM (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f1, (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f2 WHERE f1.drinker < f2.drinker AND f1.st = f2.st","select distinct freq_a.drinker, freq_b.drinker
from frequents freq_a join frequents freq_b on
freq_a.times_a_week=freq_b.times_a_week
where freq_a.drinker > freq_b.drinker
","{'student_result': [['Ben', 'Amy'], ['Coy', 'Ben'], ['Dan', 'Amy'], ['Dan', 'Ben'], ['Dan', 'Coy'], ['Eve', 'Amy'], ['Eve', 'Ben'], ['Eve', 'Dan']], 'teacher_result': [['Coy', 'Eve'], ['Amy', 'Eve'], ['Amy', 'Coy']]}","Find the pair of drinkers who frequent bars the same total number of times per week. Don't list (drinkerA, drinkerA). Only list pairs (drinkerA, drinkerB) where drinkerA < drinkerB  in the answer; don't list (drinkerB, drinkerA) again.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
788,5,N,"<Alyssa> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Rachel>
... ommitted ...
--------------------","SELECT name FROM drinker WHERE NOT EXISTS (SELECT f.bar FROM frequents f, serves s WHERE f.drinker = drinker.name AND f.bar = s.bar AND s.beer NOT IN (SELECT beer FROM likes WHERE drinker = drinker.name));","SELECT f.drinker
FROM frequents f
JOIN serves s ON f.bar = s.bar
WHERE NOT EXISTS (
    SELECT 1
    FROM serves s2
    WHERE s2.bar = f.bar
    AND s2.beer NOT IN (
        SELECT l.beer
        FROM likes l
        WHERE l.drinker = f.drinker
    )
)
GROUP BY f.drinker;","{'student_result': [['Dan'], ['Ben']], 'teacher_result': []}",Find names of all drinkers who do not frequent any bar that serves any beer they do not like.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
792,5,N,"<Audrey> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Angela>
... ommitted ...
--------------------","SELECT name FROM drinker WHERE NOT EXISTS (SELECT f.bar FROM frequents f, serves s WHERE f.drinker = drinker.name AND f.bar = s.bar AND s.beer NOT IN (SELECT beer FROM likes WHERE drinker = drinker.name));","SELECT f.drinker 
FROM frequents f JOIN serves s
ON f.bar = s.bar
INTERSECT
SELECT L.drinker
FROM likes L","{'student_result': [['Dan'], ['Coy'], ['Ben'], ['Amy'], ['Eve']], 'teacher_result': []}",Find names of all drinkers who do not frequent any bar that serves any beer they do not like.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
805,5,N,"<Audrey> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Angela>
... ommitted ...
--------------------","SELECT name FROM drinker WHERE NOT EXISTS (SELECT f.bar FROM frequents f, serves s WHERE f.drinker = drinker.name AND f.bar = s.bar AND s.beer NOT IN (SELECT beer FROM likes WHERE drinker = drinker.name));","SELECT f.drinker 
FROM frequents f JOIN likes l
ON f.drinker = l.drinker
INTERSECT
SELECT l2.drinker
FROM likes l2 JOIN serves s
ON l2.beer = s.beer;","{'student_result': [['Dan'], ['Coy'], ['Ben'], ['Eve'], ['Amy']], 'teacher_result': []}",Find names of all drinkers who do not frequent any bar that serves any beer they do not like.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
812,8,N,"1-th tuple in answer should be <471 Extra ESB|0.25|2.375> instead of <Amstel|0.75|1.375>
(there may be other errors too)
your output >>>>>
--------------------
<Amstel|0.75|1.375>
... ommitted ...
--------------------","SELECT beer, MAX(price) - MIN(price) AS price_gap, AVG(price) AS avg_price FROM serves WHERE beer IN (SELECT s.beer FROM serves s, frequents f WHERE s.bar = f.bar AND f.drinker LIKE 'B%' GROUP BY s.beer HAVING COUNT(DISTINCT s.bar) >= 2) GROUP BY beer ORDER BY beer;","SELECT s.beer,
       (MAX(s.price) - MIN(s.price)) AS price_gap,
       AVG(s.price) AS avg_price
FROM serves s
WHERE s.bar IN (
    SELECT f.bar
    FROM frequents f
    WHERE f.drinker LIKE 'B%'
    GROUP BY f.bar
    HAVING COUNT(DISTINCT f.drinker) >= 2
)
GROUP BY s.beer
HAVING COUNT(DISTINCT s.bar) >= 2
ORDER BY s.beer;","{'student_result': [], 'teacher_result': [['Amstel', Decimal('0.75'), Decimal('1.4000000000000000')], ['Budweiser', Decimal('0.30'), Decimal('2.3000000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')]]}","Find, for each beer served at least 2 bars that frequented by drinkers whose name starts with 'B', the difference of maximum and minimum (price gap) and average price of the beers in all serving bars, order by bar name. I.e., your query should output beer, price_gap, and avg_price.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
819,8,N,"1-th tuple in answer should be <471 Extra ESB|0.25|2.375> instead of <471 Extra ESB|0.25|2.374919407>
(there may be other errors too)
your output >>>>>
--------------------
<471 Extra ESB|0.25|2.374919407>
... ommitted ...
--------------------","SELECT beer, MAX(price) - MIN(price) AS price_gap, AVG(price) AS avg_price FROM serves WHERE beer IN (SELECT s.beer FROM serves s, frequents f WHERE s.bar = f.bar AND f.drinker LIKE 'B%' GROUP BY s.beer HAVING COUNT(DISTINCT s.bar) >= 2) GROUP BY beer ORDER BY beer;","SELECT s1.beer,
       (MAX(s1.price) - MIN(s1.price)) AS price_gap,
       AVG(s1.price) AS avg_price
FROM serves s1
JOIN frequents f ON s1.bar = f.bar
CROSS JOIN serves s2
WHERE f.drinker LIKE 'B%' AND s1.bar <> s2.bar
GROUP BY s1.beer
ORDER BY s1.beer;
","{'student_result': [['Amstel', Decimal('0.75'), Decimal('1.4125000000000000')], ['Budweiser', Decimal('0.05'), Decimal('2.2222222222222222')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8800000000000000')], ['Erdinger', Decimal('0.00'), Decimal('3.5000000000000000')], ['Full Sail', Decimal('0.00'), Decimal('7.7500000000000000')]], 'teacher_result': [['Amstel', Decimal('0.75'), Decimal('1.4000000000000000')], ['Budweiser', Decimal('0.30'), Decimal('2.3000000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')]]}","Find, for each beer served at least 2 bars that frequented by drinkers whose name starts with 'B', the difference of maximum and minimum (price gap) and average price of the beers in all serving bars, order by bar name. I.e., your query should output beer, price_gap, and avg_price.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
855,4,N,"<Larry|Sara> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Nicole|Tracey>
... ommitted ...
--------------------","SELECT f1.drinker, f2.drinker FROM (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f1, (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f2 WHERE f1.drinker < f2.drinker AND f1.st = f2.st","SELECT 
    f1.drinker AS drinkerA,
    f2.drinker AS drinkerB
FROM
    frequents f1
JOIN
    frequents f2
ON
    f1.bar = f2.bar AND
    f1.times_a_week = f2.times_a_week AND
    f1.drinker < f2.drinker;
","{'student_result': [['Amy', 'Eve'], ['Ben', 'Dan'], ['Ben', 'Dan'], ['Coy', 'Dan']], 'teacher_result': [['Coy', 'Eve'], ['Amy', 'Eve'], ['Amy', 'Coy']]}","Find the pair of drinkers who frequent bars the same total number of times per week. Don't list (drinkerA, drinkerA). Only list pairs (drinkerA, drinkerB) where drinkerA < drinkerB  in the answer; don't list (drinkerB, drinkerA) again.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
865,8,N,"17-th tuple in answer should be <Bond Street 19th Anniversary|0.75|3.0> instead of <Bock|0.0|3.0>
(there may be other errors too)
your output >>>>>
--------------------
<471 Extra ESB|0.25|2.375>
... ommitted ...
--------------------","SELECT beer, MAX(price) - MIN(price) AS price_gap, AVG(price) AS avg_price FROM serves WHERE beer IN (SELECT s.beer FROM serves s, frequents f WHERE s.bar = f.bar AND f.drinker LIKE 'B%' GROUP BY s.beer HAVING COUNT(DISTINCT s.bar) >= 2) GROUP BY beer ORDER BY beer;","WITH bars_frequented_by_b_drinkers AS (
    SELECT DISTINCT f.bar
    FROM frequents f
    JOIN drinker d ON f.drinker = d.name
    WHERE d.name LIKE 'B%'
),
beers_served_in_selected_bars AS (
    SELECT s.beer, s.bar, s.price
    FROM serves s
    JOIN bars_frequented_by_b_drinkers bfbb ON s.bar = bfbb.bar 
),
/* Select only those beers that are served in at least two bars frequented by B drinkers */
beers_served_in_more_than_1_bars AS (
    SELECT beer
    FROM beers_served_in_selected_bars
    GROUP BY beer
    HAVING COUNT(DISTINCT bar) >= 2
),
beer_price_stats AS (
    SELECT 
        beer,
        MAX(price) - MIN(price) AS price_gap,
        AVG(price) AS avg_price
    FROM beers_served_in_selected_bars
    WHERE beer IN (SELECT beer FROM serves)
    GROUP BY beer
)
SELECT beer, price_gap, avg_price
FROM beer_price_stats
ORDER BY beer;
","{'student_result': [['Amstel', Decimal('0.75'), Decimal('1.4166666666666667')], ['Budweiser', Decimal('0.05'), Decimal('2.2250000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')], ['Erdinger', Decimal('0.00'), Decimal('3.5000000000000000')], ['Full Sail', Decimal('0.00'), Decimal('7.7500000000000000')]], 'teacher_result': [['Amstel', Decimal('0.75'), Decimal('1.4000000000000000')], ['Budweiser', Decimal('0.30'), Decimal('2.3000000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')]]}","Find, for each beer served at least 2 bars that frequented by drinkers whose name starts with 'B', the difference of maximum and minimum (price gap) and average price of the beers in all serving bars, order by bar name. I.e., your query should output beer, price_gap, and avg_price.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
894,2,N,"<Tristan> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Joshua>
... ommitted ...
--------------------",SELECT DISTINCT drinker FROM frequents NATURAL JOIN serves WHERE beer = 'Corona' AND drinker not in (SELECT drinker FROM Likes WHERE beer = 'Corona');,"SELECT frequents.drinker 
FROM frequents
WHERE 
frequents.drinker NOT IN (SELECT likes.drinker FROM likes WHERE likes.beer = 'Corona')

","{'student_result': [['Ben'], ['Ben'], ['Ben'], ['Coy'], ['Coy']], 'teacher_result': [['Ben'], ['Coy']]}",Find the names of all drinkers that do not like Corona but frequent a bar that serves Corona.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
903,2,N,"<Dan> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Amy>
... ommitted ...
--------------------",SELECT DISTINCT drinker FROM frequents NATURAL JOIN serves WHERE beer = 'Corona' AND drinker not in (SELECT drinker FROM Likes WHERE beer = 'Corona');,"SELECT DISTINCT frequents.drinker 
FROM frequents
WHERE frequents.bar IN (SELECT serves.bar FROM serves WHERE serves.beer = 'Erdinger');
","{'student_result': [['Amy'], ['Ben'], ['Dan'], ['Eve']], 'teacher_result': [['Ben'], ['Coy']]}",Find the names of all drinkers that do not like Corona but frequent a bar that serves Corona.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
910,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Donerhaus Dest|16|2.95|Ben>
(there may be other errors too)
your output >>>>>
--------------------
<Donerhaus Dest|16|2.95|Ben>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","SELECT 
    bar.name AS bar,
    COUNT(DISTINCT frequents.drinker) AS total_num_drinker,
    AVG(serves.price) AS avg_price,
    (
        SELECT 
            f2.drinker
        FROM 
            frequents AS f2
        WHERE 
            f2.bar = bar.name
        GROUP BY 
            f2.drinker
        ORDER BY 
            MAX(f2.times_a_week), f2.drinker
        LIMIT 1
    ) AS most_reg_drinker
FROM 
    bar,
    frequents,
    serves
WHERE 
    bar.name = frequents.bar
    AND bar.name = serves.bar
GROUP BY 
    bar.name
ORDER BY 
    total_num_drinker DESC, bar.name;
","{'student_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Ben'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Coy'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Ben'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
935,6,N,"<China Restaurant Kaiser|Pizzeria Party> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<James Joyce Pub|La Terrazza>
... ommitted ...
--------------------","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE NOT EXISTS (SELECT s1.beer FROM serves s1 WHERE s1.bar = b1.name AND NOT EXISTS (SELECT 1 FROM serves s2 WHERE s2.bar = b2.name AND s2.beer = s1.beer)) AND EXISTS (SELECT s2.beer FROM serves s2 WHERE s2.bar = b2.name AND NOT EXISTS (SELECT 1 FROM serves s1 WHERE s1.bar = b1.name AND s1.beer = s2.beer));","SELECT s1.bar AS bar1, s2.bar AS bar2
FROM serves s1
INNER JOIN serves s2
ON s1.beer = s2.beer
WHERE s1.bar <> s2.bar;","{'student_result': [['Down Under Pub', 'Talk of the Town'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'James Joyce Pub'], ['Down Under Pub', 'The Edge'], ['Down Under Pub', 'Talk of the Town'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'The Edge'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'James Joyce Pub'], ['Down Under Pub', 'The Edge'], ['The Edge', 'Talk of the Town'], ['The Edge', 'Satisfaction'], ['The Edge', 'James Joyce Pub'], ['The Edge', 'Down Under Pub'], ['The Edge', 'Talk of the Town'], ['The Edge', 'Satisfaction'], ['The Edge', 'Down Under Pub'], ['The Edge', 'Satisfaction'], ['The Edge', 'James Joyce Pub'], ['The Edge', 'Down Under Pub'], ['James Joyce Pub', 'Talk of the Town'], ['James Joyce Pub', 'Satisfaction'], ['James Joyce Pub', 'The Edge'], ['James Joyce Pub', 'Down Under Pub'], ['James Joyce Pub', 'Satisfaction'], ['James Joyce Pub', 'The Edge'], ['James Joyce Pub', 'Down Under Pub'], ['James Joyce Pub', 'Satisfaction'], ['Satisfaction', 'Talk of the Town'], ['Satisfaction', 'James Joyce Pub'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'Talk of the Town'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'James Joyce Pub'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'James Joyce Pub'], ['Talk of the Town', 'Satisfaction'], ['Talk of the Town', 'James Joyce Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'Satisfaction'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Down Under Pub']], 'teacher_result': [['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction']]}","Find all (bar1, bar2) pairs where the set of beers served at bar1 is a proper subset of the those served at bar2; i.e., bar2 serves every beer that bar1 serves and plus some more.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
943,6,N,"<Bauschemer Stubbche|Zum Bizzenbachtal> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Qbar|Enchilada Kassel>
... ommitted ...
--------------------","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE NOT EXISTS (SELECT s1.beer FROM serves s1 WHERE s1.bar = b1.name AND NOT EXISTS (SELECT 1 FROM serves s2 WHERE s2.bar = b2.name AND s2.beer = s1.beer)) AND EXISTS (SELECT s2.beer FROM serves s2 WHERE s2.bar = b2.name AND NOT EXISTS (SELECT 1 FROM serves s1 WHERE s1.bar = b1.name AND s1.beer = s2.beer));","SELECT s1.bar AS bar1, s2.bar AS bar2
FROM serves s1
JOIN serves s2 ON s1.beer = s2.beer AND s1.bar != s2.bar
GROUP BY s1.bar, s2.bar
HAVING COUNT(s1.beer) < (SELECT COUNT(*) FROM serves WHERE bar = s2.bar);
","{'student_result': [['Satisfaction', 'James Joyce Pub'], ['James Joyce Pub', 'Satisfaction'], ['Talk of the Town', 'James Joyce Pub'], ['The Edge', 'James Joyce Pub'], ['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['James Joyce Pub', 'The Edge'], ['James Joyce Pub', 'Talk of the Town'], ['Talk of the Town', 'Satisfaction'], ['Talk of the Town', 'The Edge'], ['Down Under Pub', 'James Joyce Pub'], ['Talk of the Town', 'Down Under Pub'], ['James Joyce Pub', 'Down Under Pub']], 'teacher_result': [['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction']]}","Find all (bar1, bar2) pairs where the set of beers served at bar1 is a proper subset of the those served at bar2; i.e., bar2 serves every beer that bar1 serves and plus some more.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
961,2,N,"<Grand Cru> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Yorgun>
... ommitted ...
--------------------",SELECT DISTINCT drinker FROM frequents NATURAL JOIN serves WHERE beer = 'Corona' AND drinker not in (SELECT drinker FROM Likes WHERE beer = 'Corona');,"select bar
from serves
group by bar
having count(beer) >= 5;","{'student_result': [['Satisfaction']], 'teacher_result': [['Ben'], ['Coy']]}",Find the names of all drinkers that do not like Corona but frequent a bar that serves Corona.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
963,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Rag Bar|12|2.916666667|Brooke>
(there may be other errors too)
your output >>>>>
--------------------
<Rag Bar|12|2.916666667|Brooke>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","WITH max_drinker AS(
	SELECT f.drinker, f.bar, f.times_a_week
	FROM frequents f
	JOIN (SELECT bar, max(times_a_week) AS mt
	FROM frequents
	GROUP BY bar
) AS md ON f.bar = md.bar AND f.times_a_week = md.mt)

SELECT f.bar, count(f.drinker), avg(s.price), md.drinker
FROM frequents f
	JOIN serves s ON f.bar=s.bar 
	JOIN max_drinker md ON f.bar = md.bar
GROUP BY f.bar, md.drinker, md.times_a_week
","{'student_result': [['Down Under Pub', 6, Decimal('3.4166666666666667'), 'Dan'], ['James Joyce Pub', 16, Decimal('3.6250000000000000'), 'Amy'], ['James Joyce Pub', 16, Decimal('3.6250000000000000'), 'Eve'], ['Satisfaction', 10, Decimal('4.3000000000000000'), 'Ben'], ['Satisfaction', 10, Decimal('4.3000000000000000'), 'Dan'], ['Talk of the Town', 4, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 6, Decimal('3.7500000000000000'), 'Coy'], ['The Edge', 6, Decimal('3.7500000000000000'), 'Dan']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
965,7,N,"2-th tuple in answer should be <Gaststatte Riedbahnklause|12|2.5625|Brendan> instead of <Donerhaus Dest|16|2.95|Gabrielle>
(there may be other errors too)
your output >>>>>
--------------------
<Donerhaus Dest|16|2.95|Faith>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","WITH max_drinker AS(
	SELECT f.bar, f.drinker, f.times_a_week
	FROM frequents f
	JOIN (
	SELECT bar, max(times_a_week) AS mt
	FROM frequents
	GROUP BY bar
) AS md ON f.bar = md.bar AND f.times_a_week = md.mt)

SELECT f.bar, count(DISTINCT f.drinker) AS cd, avg(s.price), md.drinker
FROM frequents f
	JOIN serves s ON f.bar=s.bar 
	JOIN max_drinker md ON f.bar = md.bar
GROUP BY f.bar, md.drinker
ORDER BY cd DESC, md.drinker ASC
","{'student_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Eve'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Dan'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
966,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Donerhaus Dest|16|2.95|Yesenia>
(there may be other errors too)
your output >>>>>
--------------------
<Donerhaus Dest|16|2.95|Yesenia>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","WITH total_per_bar AS (
	SELECT DISTINCT bar, count(drinker) AS dc
	FROM frequents
	GROUP BY bar),
	average_per_bar AS (
	SELECT bar, avg(price) AS av
	FROM serves
	GROUP BY bar
	),
	max_visits AS (
	SELECT bar, drinker
	FROM frequents f1
    WHERE times_a_week = (
        SELECT MAX(f2.times_a_week)
        FROM frequents f2
        WHERE f1.bar = f2.bar
    )
)

SELECT  DISTINCT TPB.bar, TPB.dc, APB.av, MAX(mv.drinker)
FROM total_per_bar AS TPB
JOIN average_per_bar AS APB ON TPB.bar=APB.bar
JOIN max_visits AS mv ON APB.bar=mv.bar
GROUP BY TPB.bar, TPB.dc, APB.av
ORDER BY TPB.dc DESC
","{'student_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Eve'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Dan'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Dan']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1014,8,N,"1-th tuple in answer should be <471 Extra ESB|0.25|2.375> instead of <Adriaan|1.5|2.75>
(there may be other errors too)
your output >>>>>
--------------------
<Adriaan|1.5|2.75>
... ommitted ...
--------------------","SELECT beer, MAX(price) - MIN(price) AS price_gap, AVG(price) AS avg_price FROM serves WHERE beer IN (SELECT s.beer FROM serves s, frequents f WHERE s.bar = f.bar AND f.drinker LIKE 'B%' GROUP BY s.beer HAVING COUNT(DISTINCT s.bar) >= 2) GROUP BY beer ORDER BY beer;","SELECT beer, max(price) - min(price) as price_gap, avg(price) as avg_price
FROM serves
WHERE beer in (
    SELECT s.beer FROM serves s, frequents f
    WHERE s.bar = f.bar AND f.drinker LIKE 'B%'
    GROUP BY s.beer
    HAVING COUNT(DISTINCT s.bar) >= 3
)
GROUP BY beer
ORDER BY beer;","{'student_result': [['Amstel', Decimal('0.75'), Decimal('1.4000000000000000')]], 'teacher_result': [['Amstel', Decimal('0.75'), Decimal('1.4000000000000000')], ['Budweiser', Decimal('0.30'), Decimal('2.3000000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')]]}","Find, for each beer served at least 2 bars that frequented by drinkers whose name starts with 'B', the difference of maximum and minimum (price gap) and average price of the beers in all serving bars, order by bar name. I.e., your query should output beer, price_gap, and avg_price.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1016,8,N,"17-th tuple in answer should be <Bond Street 19th Anniversary|0.75|3.0> instead of <Bock|0.0|3.0>
(there may be other errors too)
your output >>>>>
--------------------
<471 Extra ESB|0.25|2.375>
... ommitted ...
--------------------","SELECT beer, MAX(price) - MIN(price) AS price_gap, AVG(price) AS avg_price FROM serves WHERE beer IN (SELECT s.beer FROM serves s, frequents f WHERE s.bar = f.bar AND f.drinker LIKE 'B%' GROUP BY s.beer HAVING COUNT(DISTINCT s.bar) >= 2) GROUP BY beer ORDER BY beer;","SELECT beer, max(price) - min(price) as price_gap, avg(price) as avg_price
FROM serves
WHERE beer in (
    SELECT s.beer FROM serves s, frequents f
    WHERE s.bar = f.bar AND f.drinker LIKE 'B%'
    GROUP BY s.beer
    HAVING COUNT(DISTINCT s.bar) >= 1
)
GROUP BY beer
ORDER BY beer;","{'student_result': [['Amstel', Decimal('0.75'), Decimal('1.4000000000000000')], ['Budweiser', Decimal('0.30'), Decimal('2.3000000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')], ['Erdinger', Decimal('0.00'), Decimal('3.5000000000000000')], ['Full Sail', Decimal('0.00'), Decimal('7.7500000000000000')]], 'teacher_result': [['Amstel', Decimal('0.75'), Decimal('1.4000000000000000')], ['Budweiser', Decimal('0.30'), Decimal('2.3000000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')]]}","Find, for each beer served at least 2 bars that frequented by drinkers whose name starts with 'B', the difference of maximum and minimum (price gap) and average price of the beers in all serving bars, order by bar name. I.e., your query should output beer, price_gap, and avg_price.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1100,5,N,"<Bomatscher Elb-Panoramagaststatte Und Pension> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Schlemmer Grill>
... ommitted ...
--------------------","SELECT name FROM drinker WHERE NOT EXISTS (SELECT f.bar FROM frequents f, serves s WHERE f.drinker = drinker.name AND f.bar = s.bar AND s.beer NOT IN (SELECT beer FROM likes WHERE drinker = drinker.name));","SELECT DISTINCT bar
FROM serves
WHERE (beer = 'Amstel' OR beer = 'Corona') AND price > 2;
","{'student_result': [['Down Under Pub'], ['James Joyce Pub'], ['Satisfaction'], ['The Edge']], 'teacher_result': []}",Find names of all drinkers who do not frequent any bar that serves any beer they do not like.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1152,6,N,"<Zauberwald|Zauberwald> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<James Joyce Pub|James Joyce Pub>
... ommitted ...
--------------------","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE NOT EXISTS (SELECT s1.beer FROM serves s1 WHERE s1.bar = b1.name AND NOT EXISTS (SELECT 1 FROM serves s2 WHERE s2.bar = b2.name AND s2.beer = s1.beer)) AND EXISTS (SELECT s2.beer FROM serves s2 WHERE s2.bar = b2.name AND NOT EXISTS (SELECT 1 FROM serves s1 WHERE s1.bar = b1.name AND s1.beer = s2.beer));","SELECT b1.name, b2.name
FROM bar b1, bar b2
WHERE NOT EXISTS (
	SELECT beer
	FROM serves
	WHERE 
		b1.name = serves.bar AND
		serves.beer NOT IN (
			SELECT beer
			FROM serves
			WHERE b2.name = serves.bar
		)
)
","{'student_result': [['Down Under Pub', 'Down Under Pub'], ['Down Under Pub', 'The Edge'], ['Down Under Pub', 'Satisfaction'], ['The Edge', 'Down Under Pub'], ['The Edge', 'The Edge'], ['The Edge', 'Satisfaction'], ['James Joyce Pub', 'James Joyce Pub'], ['Satisfaction', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction'], ['Talk of the Town', 'Talk of the Town']], 'teacher_result': [['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction']]}","Find all (bar1, bar2) pairs where the set of beers served at bar1 is a proper subset of the those served at bar2; i.e., bar2 serves every beer that bar1 serves and plus some more.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1154,4,N,"<Charles|Ashlee> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Todd|Andre>
... ommitted ...
--------------------","SELECT f1.drinker, f2.drinker FROM (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f1, (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f2 WHERE f1.drinker < f2.drinker AND f1.st = f2.st","SELECT a.name AS drinker1, b.name AS drinker2
FROM (
    SELECT Drinker.name, SUM(Frequents.times_a_week) AS total_times_a_week
    FROM Drinker
    INNER JOIN Frequents ON Frequents.drinker = Drinker.name
    GROUP BY Drinker.name
) AS a
INNER JOIN (
    SELECT Drinker.name, SUM(Frequents.times_a_week) AS total_times_a_week
    FROM Drinker
    INNER JOIN Frequents ON Frequents.drinker = Drinker.name
    GROUP BY Drinker.name
) AS b ON a.total_times_a_week = b.total_times_a_week AND a.name <> b.name
ORDER BY a.total_times_a_week;","{'student_result': [['Coy', 'Eve'], ['Coy', 'Amy'], ['Eve', 'Coy'], ['Eve', 'Amy'], ['Amy', 'Coy'], ['Amy', 'Eve']], 'teacher_result': [['Coy', 'Eve'], ['Amy', 'Eve'], ['Amy', 'Coy']]}","Find the pair of drinkers who frequent bars the same total number of times per week. Don't list (drinkerA, drinkerA). Only list pairs (drinkerA, drinkerB) where drinkerA < drinkerB  in the answer; don't list (drinkerB, drinkerA) again.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1202,9,N,"<Pizzeria Euro Doner|Duke IPA|3.0> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<James Joyce Pub|Oatmeal Stout|3.75>
... ommitted ...
--------------------","SELECT beer.name, min_price, bar FROM beer LEFT OUTER JOIN (SELECT beer, MIN(price) AS min_price FROM serves GROUP BY beer) t ON beer.name = t.beer LEFT OUTER JOIN serves ON beer.name = serves.beer AND min_price = serves.price;",SELECT * FROM serves;,"{'student_result': [['Down Under Pub', 'Amstel', Decimal('1.00')], ['Down Under Pub', 'Budweiser', Decimal('2.25')], ['Down Under Pub', 'Corona', Decimal('7.00')], ['The Edge', 'Amstel', Decimal('1.75')], ['The Edge', 'Budweiser', Decimal('2.50')], ['The Edge', 'Corona', Decimal('7.00')], ['James Joyce Pub', 'Amstel', Decimal('1.00')], ['James Joyce Pub', 'Corona', Decimal('7.00')], ['James Joyce Pub', 'Dixie', Decimal('3.00')], ['James Joyce Pub', 'Erdinger', Decimal('3.50')], ['Satisfaction', 'Amstel', Decimal('1.75')], ['Satisfaction', 'Budweiser', Decimal('2.25')], ['Satisfaction', 'Corona', Decimal('7.00')], ['Satisfaction', 'Dixie', Decimal('2.75')], ['Satisfaction', 'Full Sail', Decimal('7.75')], ['Talk of the Town', 'Amstel', Decimal('1.50')], ['Talk of the Town', 'Budweiser', Decimal('2.20')]], 'teacher_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Talk of the Town']]}","Find, for each beer, its lowest serving price and the bar(s) serving it at this price. The output should be a list of (beer, price, bar) triples. If some beer B is not served anywhere, you should still output (B, NULL, NULL).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1211,8,N,"1-th tuple in answer should be <471 Extra ESB|0.25|2.375> instead of <Old Bawdy 2006|0.75|2.8>
(there may be other errors too)
your output >>>>>
--------------------
<Old Bawdy 2006|0.75|2.8>
... ommitted ...
--------------------","SELECT beer, MAX(price) - MIN(price) AS price_gap, AVG(price) AS avg_price FROM serves WHERE beer IN (SELECT s.beer FROM serves s, frequents f WHERE s.bar = f.bar AND f.drinker LIKE 'B%' GROUP BY s.beer HAVING COUNT(DISTINCT s.bar) >= 2) GROUP BY beer ORDER BY beer;","SELECT s1.beer, MAX(s1.price) - MIN(s1.price) price_gap, AVG(s1.price) avg_price
FROM serves s1
WHERE s1.beer IN (
	SELECT s2.beer
	FROM serves s2
	JOIN frequents f1 ON f1.bar = s2.bar
	JOIN drinker d1 ON d1.name = f1.drinker
	WHERE d1.name LIKE 'B%'
)
GROUP BY s1.beer
HAVING COUNT(s1.bar) >= 2;","{'student_result': [['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Budweiser', Decimal('0.30'), Decimal('2.3000000000000000')], ['Amstel', Decimal('0.75'), Decimal('1.4000000000000000')]], 'teacher_result': [['Amstel', Decimal('0.75'), Decimal('1.4000000000000000')], ['Budweiser', Decimal('0.30'), Decimal('2.3000000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')]]}","Find, for each beer served at least 2 bars that frequented by drinkers whose name starts with 'B', the difference of maximum and minimum (price gap) and average price of the beers in all serving bars, order by bar name. I.e., your query should output beer, price_gap, and avg_price.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1238,9,N,"<Imperial Stout|3.0|mauergasse> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<471 Extra ESB|2.25|Akebono>
... ommitted ...
--------------------","SELECT beer.name, min_price, bar FROM beer LEFT OUTER JOIN (SELECT beer, MIN(price) AS min_price FROM serves GROUP BY beer) t ON beer.name = t.beer LEFT OUTER JOIN serves ON beer.name = serves.beer AND min_price = serves.price;","WITH
	-- the lowest serving price for each beer
	lowest_price AS
	(SELECT b1.name beer, MIN(s1.price) num
	FROM beer b1, serves s1
	WHERE b1.name = s1.beer
	GROUP BY b1.name)

-- the bars that serve the beer at the lowest price
SELECT DISTINCT lowest_price.beer, lowest_price.num, s2.bar
FROM beer b2, serves s2, lowest_price
WHERE b2.name = lowest_price.beer
AND s2.price = lowest_price.num
ORDER BY lowest_price.beer ASC;","{'student_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Budweiser', Decimal('2.20'), 'Talk of the Town'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Corona', Decimal('7.00'), 'The Edge'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Full Sail', Decimal('7.75'), 'Satisfaction']], 'teacher_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Talk of the Town']]}","Find, for each beer, its lowest serving price and the bar(s) serving it at this price. The output should be a list of (beer, price, bar) triples. If some beer B is not served anywhere, you should still output (B, NULL, NULL).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1275,4,N,"<Marilyn|Michelle> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Adam|Ben>
... ommitted ...
--------------------","SELECT f1.drinker, f2.drinker FROM (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f1, (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f2 WHERE f1.drinker < f2.drinker AND f1.st = f2.st","SELECT DISTINCT d1.drinker AS drinker1, d2.drinker AS drinker2
FROM frequents AS d1
JOIN frequents AS d2 ON d1.bar = d2.bar AND d1.drinker < d2.drinker
JOIN likes AS l1 ON d1.drinker = l1.drinker
JOIN likes AS l2 ON d2.drinker = l2.drinker
JOIN serves AS s ON d1.bar = s.bar AND l1.beer = s.beer AND l2.beer = s.beer;
","{'student_result': [['Amy', 'Ben'], ['Amy', 'Dan'], ['Amy', 'Eve'], ['Ben', 'Dan'], ['Ben', 'Eve'], ['Dan', 'Eve']], 'teacher_result': [['Coy', 'Eve'], ['Amy', 'Eve'], ['Amy', 'Coy']]}","Find the pair of drinkers who frequent bars the same total number of times per week. Don't list (drinkerA, drinkerA). Only list pairs (drinkerA, drinkerB) where drinkerA < drinkerB  in the answer; don't list (drinkerB, drinkerA) again.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1294,6,N,"<Zum Bembelsche|Gutsschanke Schloss Johannisberg> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Akebono|Fratelli Pizza Pasta Bar>
... ommitted ...
--------------------","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE NOT EXISTS (SELECT s1.beer FROM serves s1 WHERE s1.bar = b1.name AND NOT EXISTS (SELECT 1 FROM serves s2 WHERE s2.bar = b2.name AND s2.beer = s1.beer)) AND EXISTS (SELECT s2.beer FROM serves s2 WHERE s2.bar = b2.name AND NOT EXISTS (SELECT 1 FROM serves s1 WHERE s1.bar = b1.name AND s1.beer = s2.beer));","SELECT DISTINCT sA.bar,sB.bar 
FROM serves AS sA
JOIN serves AS sB
ON sA.beer = sB.beer
WHERE sA.bar <> sB.bar
AND NOT EXISTS(
    SELECT *
    FROM serves AS sC
    WHERE sC.bar=sA.bar
    AND sC.beer NOT IN (
        SELECT sD.beer
        FROM serves AS sD
        WHERE sD.bar=sB.bar
    )
    AND EXISTS (
        SELECT * 
        FROM serves AS sE
        WHERE sE.bar=sB.bar
        AND sE.beer NOT IN (
            SELECT sF.beer
            FROM serves AS sF
            WHERE sF.bar = sA.bar
        )
    )
);","{'student_result': [['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'Talk of the Town'], ['Down Under Pub', 'The Edge'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'Talk of the Town'], ['Satisfaction', 'The Edge'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'Satisfaction'], ['Talk of the Town', 'The Edge'], ['The Edge', 'Down Under Pub'], ['The Edge', 'Satisfaction'], ['The Edge', 'Talk of the Town']], 'teacher_result': [['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction']]}","Find all (bar1, bar2) pairs where the set of beers served at bar1 is a proper subset of the those served at bar2; i.e., bar2 serves every beer that bar1 serves and plus some more.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1298,6,N,"<Restaurant Zum kleinen Italiener|Wein Zeit> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Akebono|Fratelli Pizza Pasta Bar>
... ommitted ...
--------------------","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE NOT EXISTS (SELECT s1.beer FROM serves s1 WHERE s1.bar = b1.name AND NOT EXISTS (SELECT 1 FROM serves s2 WHERE s2.bar = b2.name AND s2.beer = s1.beer)) AND EXISTS (SELECT s2.beer FROM serves s2 WHERE s2.bar = b2.name AND NOT EXISTS (SELECT 1 FROM serves s1 WHERE s1.bar = b1.name AND s1.beer = s2.beer));","SELECT DISTINCT sA.bar,sB.bar 
FROM serves AS sA
JOIN serves AS sB
ON sA.beer = sB.beer
WHERE sA.bar < sB.bar
AND NOT EXISTS(
    SELECT *
    FROM serves AS sC
    WHERE sC.bar=sA.bar
    AND sC.beer NOT IN (
        SELECT sD.beer
        FROM serves AS sD
        WHERE sD.bar=sB.bar
    )
    AND EXISTS (
        SELECT * 
        FROM serves AS sE
        WHERE sE.bar=sB.bar
        AND sE.beer NOT IN (
            SELECT sF.beer
            FROM serves AS sF
            WHERE sF.bar = sA.bar
        )
    )
);","{'student_result': [['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'Talk of the Town'], ['Down Under Pub', 'The Edge'], ['Satisfaction', 'Talk of the Town'], ['Satisfaction', 'The Edge'], ['Talk of the Town', 'The Edge']], 'teacher_result': [['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction']]}","Find all (bar1, bar2) pairs where the set of beers served at bar1 is a proper subset of the those served at bar2; i.e., bar2 serves every beer that bar1 serves and plus some more.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1341,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Donerhaus Dest|16|2.95|Tara>
(there may be other errors too)
your output >>>>>
--------------------
<Donerhaus Dest|16|2.95|Tara>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","SELECT 
    b.name AS bar_name,
    COALESCE(total_num_drinker, 0) AS total_num_drinker,
    COALESCE(avg_price, NULL) AS avg_price,
    COALESCE(most_reg_drinker, NULL) AS most_reg_drinker
FROM 
    bar b
LEFT JOIN (
    SELECT 
        f.bar, 
        COUNT(DISTINCT f.drinker) AS total_num_drinker
    FROM 
        frequents f
    GROUP BY 
        f.bar
) AS drinkers_count ON b.name = drinkers_count.bar
LEFT JOIN (
    SELECT 
        s.bar, 
        AVG(s.price) AS avg_price
    FROM 
        serves s
    GROUP BY 
        s.bar
) AS price_avg ON b.name = price_avg.bar
LEFT JOIN (
    SELECT 
        f.bar, 
        f.drinker AS most_reg_drinker,
        MAX(f.times_a_week) AS times_a_week
    FROM 
        frequents f
    GROUP BY 
        f.bar, f.drinker
    ORDER BY 
        f.bar, times_a_week DESC, f.drinker
) AS most_frequent_drinker ON b.name = most_frequent_drinker.bar
ORDER BY 
    total_num_drinker DESC, 
    bar_name;
","{'student_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Dan'], ['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Eve'], ['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Ben'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Coy'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Ben'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1350,9,N,"<Haymaker Extra Pale Ale|2.5|Odenwalder Bauernstube> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Oatmeal Stout|2.0|James Joyce Pub>
... ommitted ...
--------------------","SELECT beer.name, min_price, bar FROM beer LEFT OUTER JOIN (SELECT beer, MIN(price) AS min_price FROM serves GROUP BY beer) t ON beer.name = t.beer LEFT OUTER JOIN serves ON beer.name = serves.beer AND min_price = serves.price;","SELECT b.name, min_price.price, s.bar
FROM beer b
LEFT JOIN Serves s ON b.name = s.beer
LEFT JOIN (
  SELECT beer, MIN(price) AS price
  FROM Serves
  GROUP BY beer
) AS min_price ON b.name = min_price.beer;","{'student_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Budweiser', Decimal('2.20'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Amstel', Decimal('1.00'), 'The Edge'], ['Budweiser', Decimal('2.20'), 'The Edge'], ['Corona', Decimal('7.00'), 'The Edge'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Dixie', Decimal('2.75'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Amstel', Decimal('1.00'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Satisfaction'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Amstel', Decimal('1.00'), 'Talk of the Town'], ['Budweiser', Decimal('2.20'), 'Talk of the Town']], 'teacher_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Talk of the Town']]}","Find, for each beer, its lowest serving price and the bar(s) serving it at this price. The output should be a list of (beer, price, bar) triples. If some beer B is not served anywhere, you should still output (B, NULL, NULL).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1371,4,N,"<Christopher|Janice> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Joshua|Eve>
... ommitted ...
--------------------","SELECT f1.drinker, f2.drinker FROM (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f1, (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f2 WHERE f1.drinker < f2.drinker AND f1.st = f2.st","SELECT f1.drinker, f2.drinker FROM frequents f1, frequents f2 WHERE f1.drinker<>f2.drinker AND f1.times_a_week=f2.times_a_week;","{'student_result': [['Amy', 'Eve'], ['Amy', 'Dan'], ['Amy', 'Dan'], ['Amy', 'Dan'], ['Amy', 'Ben'], ['Ben', 'Dan'], ['Ben', 'Dan'], ['Ben', 'Coy'], ['Ben', 'Coy'], ['Ben', 'Eve'], ['Ben', 'Dan'], ['Ben', 'Dan'], ['Ben', 'Dan'], ['Ben', 'Amy'], ['Ben', 'Dan'], ['Ben', 'Dan'], ['Ben', 'Coy'], ['Ben', 'Coy'], ['Coy', 'Dan'], ['Coy', 'Dan'], ['Coy', 'Ben'], ['Coy', 'Ben'], ['Coy', 'Dan'], ['Coy', 'Dan'], ['Coy', 'Ben'], ['Coy', 'Ben'], ['Dan', 'Eve'], ['Dan', 'Ben'], ['Dan', 'Amy'], ['Dan', 'Coy'], ['Dan', 'Coy'], ['Dan', 'Ben'], ['Dan', 'Ben'], ['Dan', 'Coy'], ['Dan', 'Coy'], ['Dan', 'Ben'], ['Dan', 'Ben'], ['Dan', 'Eve'], ['Dan', 'Ben'], ['Dan', 'Amy'], ['Dan', 'Eve'], ['Dan', 'Ben'], ['Dan', 'Amy'], ['Eve', 'Dan'], ['Eve', 'Dan'], ['Eve', 'Dan'], ['Eve', 'Ben'], ['Eve', 'Amy']], 'teacher_result': [['Coy', 'Eve'], ['Amy', 'Eve'], ['Amy', 'Coy']]}","Find the pair of drinkers who frequent bars the same total number of times per week. Don't list (drinkerA, drinkerA). Only list pairs (drinkerA, drinkerB) where drinkerA < drinkerB  in the answer; don't list (drinkerB, drinkerA) again.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1376,8,N,"1-th tuple in answer should be <471 Extra ESB|0.25|2.375> instead of <Coney Island Lager|1.25|2.666666667>
(there may be other errors too)
your output >>>>>
--------------------
<Coney Island Lager|1.25|2.666666667>
... ommitted ...
--------------------","SELECT beer, MAX(price) - MIN(price) AS price_gap, AVG(price) AS avg_price FROM serves WHERE beer IN (SELECT s.beer FROM serves s, frequents f WHERE s.bar = f.bar AND f.drinker LIKE 'B%' GROUP BY s.beer HAVING COUNT(DISTINCT s.bar) >= 2) GROUP BY beer ORDER BY beer;","WITH new_table AS(

SELECT f.bar, s.price, s.beer 

FROM frequents f

JOIN serves s ON s.bar=f.bar

WHERE drinker LIKE '%B%'

),

average_price AS(

SELECT beer, 

avg(price) AS ap, 

(max(price)-min(price)) AS gap

FROM serves

GROUP BY beer

)


SELECT a_p.beer, a_p.gap, a_p.ap

FROM average_price a_p

JOIN new_table nt ON a_p.beer = nt.beer

GROUP BY a_p.beer, a_p.ap, a_p.gap

HAVING count(nt.bar) > 1
","{'student_result': [['Budweiser', Decimal('0.30'), Decimal('2.3000000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Amstel', Decimal('0.75'), Decimal('1.4000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')]], 'teacher_result': [['Amstel', Decimal('0.75'), Decimal('1.4000000000000000')], ['Budweiser', Decimal('0.30'), Decimal('2.3000000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')]]}","Find, for each beer served at least 2 bars that frequented by drinkers whose name starts with 'B', the difference of maximum and minimum (price gap) and average price of the beers in all serving bars, order by bar name. I.e., your query should output beer, price_gap, and avg_price.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1443,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Yorgun|4|2.9|Megan>
(there may be other errors too)
your output >>>>>
--------------------
<Yorgun|4|2.9|Megan>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","SELECT f.bar, total_num_drinker, avg_price, most_reg_drinker 
FROM (
	SELECT bar, COUNT(drinker) AS total_num_drinker FROM frequents GROUP BY bar
	) AS f
JOIN (
	SELECT bar, AVG(price) AS avg_price FROM serves GROUP BY bar
	) AS s
ON f.bar=s.bar
JOIN (
	SELECT f.bar, f.drinker AS most_reg_drinker FROM frequents f
	JOIN (
		SELECT bar, MAX(times_a_week) AS mt FROM frequents GROUP BY bar
		) AS mf
	ON f.bar=mf.bar AND f.times_a_week=mf.mt
	WHERE f.drinker = (SELECT drinker FROM frequents WHERE bar=f.bar AND times_a_week=mf.mt ORDER BY drinker ASC LIMIT 1)
	) AS m
ON f.bar=m.bar;
","{'student_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1576,2,N,"<Steven> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Angela>
... ommitted ...
--------------------",SELECT DISTINCT drinker FROM frequents NATURAL JOIN serves WHERE beer = 'Corona' AND drinker not in (SELECT drinker FROM Likes WHERE beer = 'Corona');,SELECT DISTINCT drinker FROM likes L WHERE NOT EXISTS(SELECT * FROM likes WHERE L.drinker = likes.drinker AND likes.beer = 'Corona'),"{'student_result': [['Coy'], ['Ben']], 'teacher_result': [['Ben'], ['Coy']]}",Find the names of all drinkers that do not like Corona but frequent a bar that serves Corona.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1538,9,N,"<Saison Imperiale|3.0|Donerhaus Dest> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Triple Exultation Old Ale|2.25|Grand Cru>
... ommitted ...
--------------------","SELECT beer.name, min_price, bar FROM beer LEFT OUTER JOIN (SELECT beer, MIN(price) AS min_price FROM serves GROUP BY beer) t ON beer.name = t.beer LEFT OUTER JOIN serves ON beer.name = serves.beer AND min_price = serves.price;","select
	beer.name,
	min(serves.price) as min_price,
	(
		select serves.bar
		from serves
		where serves.beer = beer.name
		limit 1
	) as bar
from 
	beer
left join
	serves on serves.beer = beer.name
group by beer.name","{'student_result': [['Dixie', Decimal('2.75'), 'James Joyce Pub'], ['Budweiser', Decimal('2.20'), 'Down Under Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Corona', Decimal('7.00'), 'Down Under Pub']], 'teacher_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Talk of the Town']]}","Find, for each beer, its lowest serving price and the bar(s) serving it at this price. The output should be a list of (beer, price, bar) triples. If some beer B is not served anywhere, you should still output (B, NULL, NULL).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1539,9,N,"<Saison Imperiale|3.0|Donerhaus Dest> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<471 Extra ESB|2.25|Restaurant Hotel Bessunger Forst>
... ommitted ...
--------------------","SELECT beer.name, min_price, bar FROM beer LEFT OUTER JOIN (SELECT beer, MIN(price) AS min_price FROM serves GROUP BY beer) t ON beer.name = t.beer LEFT OUTER JOIN serves ON beer.name = serves.beer AND min_price = serves.price;","select
	distinct beer.name,
	min(serves.price) as min_price,
	(
		select serves.bar
		from serves
		where serves.beer = beer.name
		limit 1
	) as bar
from 
	beer
left join
	serves on serves.beer = beer.name
group by beer.name","{'student_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Budweiser', Decimal('2.20'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Dixie', Decimal('2.75'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Full Sail', Decimal('7.75'), 'Satisfaction']], 'teacher_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Talk of the Town']]}","Find, for each beer, its lowest serving price and the bar(s) serving it at this price. The output should be a list of (beer, price, bar) triples. If some beer B is not served anywhere, you should still output (B, NULL, NULL).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1555,8,N,"2-th tuple in answer should be <Adriaan|1.5|2.75> instead of <471 Extra ESB|0.25|2.375>
(there may be other errors too)
your output >>>>>
--------------------
<471 Extra ESB|0.25|2.375>
... ommitted ...
--------------------","SELECT beer, MAX(price) - MIN(price) AS price_gap, AVG(price) AS avg_price FROM serves WHERE beer IN (SELECT s.beer FROM serves s, frequents f WHERE s.bar = f.bar AND f.drinker LIKE 'B%' GROUP BY s.beer HAVING COUNT(DISTINCT s.bar) >= 2) GROUP BY beer ORDER BY beer;","WITH FrequentedBars AS (
    SELECT DISTINCT f.bar
    FROM frequents f
    JOIN drinker d ON f.drinker = d.name
    WHERE d.name LIKE 'B%'
),
BeerInFrequentedBars AS (
    SELECT s.beer, s.price
    FROM serves s
    WHERE s.bar IN (SELECT bar FROM FrequentedBars)
),
BeerStats AS (
    SELECT 
        beer, 
        MAX(price) - MIN(price) AS price_gap,
        AVG(price) AS avg_price,
        COUNT(DISTINCT bar) AS bar_count
    FROM serves
    GROUP BY beer
    HAVING COUNT(DISTINCT bar) >= 2
)
SELECT 
    bs.beer,
    bs.price_gap,
    bs.avg_price
FROM BeerStats bs
JOIN BeerInFrequentedBars bifb ON bs.beer = bifb.beer
ORDER BY bs.beer;
","{'student_result': [['Amstel', Decimal('0.75'), Decimal('1.4000000000000000')], ['Amstel', Decimal('0.75'), Decimal('1.4000000000000000')], ['Amstel', Decimal('0.75'), Decimal('1.4000000000000000')], ['Budweiser', Decimal('0.30'), Decimal('2.3000000000000000')], ['Budweiser', Decimal('0.30'), Decimal('2.3000000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')]], 'teacher_result': [['Amstel', Decimal('0.75'), Decimal('1.4000000000000000')], ['Budweiser', Decimal('0.30'), Decimal('2.3000000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')]]}","Find, for each beer served at least 2 bars that frequented by drinkers whose name starts with 'B', the difference of maximum and minimum (price gap) and average price of the beers in all serving bars, order by bar name. I.e., your query should output beer, price_gap, and avg_price.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1591,4,N,"<Jack|Latasha> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Anthony|Theresa>
... ommitted ...
--------------------","SELECT f1.drinker, f2.drinker FROM (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f1, (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f2 WHERE f1.drinker < f2.drinker AND f1.st = f2.st","SELECT f1.drinker, f2.drinker FROM frequents f1, frequents f2 GROUP BY f1.drinker, f2.drinker HAVING COUNT(f1.times_a_week) = COUNT(f2.times_a_week) AND (f1.drinker <> f2.drinker AND f1.drinker < f2.drinker);","{'student_result': [['Amy', 'Ben'], ['Dan', 'Eve'], ['Amy', 'Eve'], ['Ben', 'Coy'], ['Amy', 'Coy'], ['Coy', 'Eve'], ['Ben', 'Eve'], ['Amy', 'Dan'], ['Ben', 'Dan'], ['Coy', 'Dan']], 'teacher_result': [['Coy', 'Eve'], ['Amy', 'Eve'], ['Amy', 'Coy']]}","Find the pair of drinkers who frequent bars the same total number of times per week. Don't list (drinkerA, drinkerA). Only list pairs (drinkerA, drinkerB) where drinkerA < drinkerB  in the answer; don't list (drinkerB, drinkerA) again.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1647,4,N,"<Angelica|Stephanie> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Joshua|Nicole>
... ommitted ...
--------------------","SELECT f1.drinker, f2.drinker FROM (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f1, (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f2 WHERE f1.drinker < f2.drinker AND f1.st = f2.st","SELECT f1.drinker, f2.drinker
FROM frequents f1, frequents f2
WHERE NOT (f1.drinker = f2.drinker)
AND f1.drinker < f2.drinker;","{'student_result': [['Amy', 'Ben'], ['Amy', 'Ben'], ['Amy', 'Ben'], ['Amy', 'Coy'], ['Amy', 'Coy'], ['Amy', 'Dan'], ['Amy', 'Dan'], ['Amy', 'Dan'], ['Amy', 'Dan'], ['Amy', 'Dan'], ['Amy', 'Eve'], ['Ben', 'Coy'], ['Ben', 'Coy'], ['Ben', 'Dan'], ['Ben', 'Dan'], ['Ben', 'Dan'], ['Ben', 'Dan'], ['Ben', 'Dan'], ['Ben', 'Eve'], ['Ben', 'Coy'], ['Ben', 'Coy'], ['Ben', 'Dan'], ['Ben', 'Dan'], ['Ben', 'Dan'], ['Ben', 'Dan'], ['Ben', 'Dan'], ['Ben', 'Eve'], ['Ben', 'Coy'], ['Ben', 'Coy'], ['Ben', 'Dan'], ['Ben', 'Dan'], ['Ben', 'Dan'], ['Ben', 'Dan'], ['Ben', 'Dan'], ['Ben', 'Eve'], ['Coy', 'Dan'], ['Coy', 'Dan'], ['Coy', 'Dan'], ['Coy', 'Dan'], ['Coy', 'Dan'], ['Coy', 'Eve'], ['Coy', 'Dan'], ['Coy', 'Dan'], ['Coy', 'Dan'], ['Coy', 'Dan'], ['Coy', 'Dan'], ['Coy', 'Eve'], ['Dan', 'Eve'], ['Dan', 'Eve'], ['Dan', 'Eve'], ['Dan', 'Eve'], ['Dan', 'Eve']], 'teacher_result': [['Coy', 'Eve'], ['Amy', 'Eve'], ['Amy', 'Coy']]}","Find the pair of drinkers who frequent bars the same total number of times per week. Don't list (drinkerA, drinkerA). Only list pairs (drinkerA, drinkerB) where drinkerA < drinkerB  in the answer; don't list (drinkerB, drinkerA) again.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1659,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Gaststatte Gruner Baum|1|3.0|Ben>
(there may be other errors too)
your output >>>>>
--------------------
<Gaststatte Gruner Baum|1|3.0|Ben>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","select G.bar, coalesce(count(distinct G.drinker), 0) as num_of_drinkers, coalesce(avg(price), NULL) as average, coalesce((select drinker 
														from frequents
														where bar = G.bar
														order by times_a_week desc, drinker
														limit 1), NULL)
from serves natural join frequents as g
group by G.bar
order by sum(G.times_a_week), G.bar
","{'student_result': [['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1660,7,N,"2-th tuple in answer should be <Gaststatte Riedbahnklause|12|2.5625|Brendan> instead of <James Joyce Pub|9|3.575|Gary>
(there may be other errors too)
your output >>>>>
--------------------
<Donerhaus Dest|16|2.95|Faith>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","select G.bar, coalesce(count(distinct G.drinker), 0) as num_of_drinkers, coalesce(avg(price), NULL) as average, coalesce((select drinker 
														from frequents
														where bar = G.bar
														order by times_a_week desc, drinker
														limit 1), NULL)
from serves natural join frequents as g
group by G.bar
order by sum(G.times_a_week) desc, G.bar
","{'student_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1670,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Pronto Pizza|1|2.8125|Ben>
(there may be other errors too)
your output >>>>>
--------------------
<Pronto Pizza|1|2.8125|Ben>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","SELECT  bar, total_num_drinker, avg_price, most_reg_drinker FROM
(SELECT distinct name as bar FROM BAR ORDER BY name)AS barname
NATURAL JOIN
(SELECT COUNT(drinker) as total_num_drinker, bar FROM frequents GROUP BY bar ORDER BY total_num_drinker DESC)as drinkercount
NATURAL JOIN
(SELECT AVG(price) as avg_price, bar FROM serves GROUP BY bar) as avgprices
NATURAL JOIN
(SELECT MAX(drinker) as most_reg_drinker,bar FROM frequents JOIN  
(SELECT MAX(times_a_week) as mostreg, bar as bar2 FROM frequents GROUP BY bar 
)as maxbarlist ON times_a_week = mostreg AND bar=bar2
GROUP BY bar) as regdrinkers
ORDER BY total_num_drinker","{'student_result': [['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Dan'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Dan'], ['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Eve']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1671,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Donerhaus Dest|16|2.95|Yesenia>
(there may be other errors too)
your output >>>>>
--------------------
<Donerhaus Dest|16|2.95|Yesenia>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","SELECT  bar, total_num_drinker, avg_price, most_reg_drinker FROM
(SELECT distinct name as bar FROM BAR ORDER BY name)AS barname
NATURAL JOIN
(SELECT COUNT(drinker) as total_num_drinker, bar FROM frequents GROUP BY bar ORDER BY total_num_drinker DESC)as drinkercount
NATURAL JOIN
(SELECT AVG(price) as avg_price, bar FROM serves GROUP BY bar) as avgprices
NATURAL JOIN
(SELECT MAX(drinker) as most_reg_drinker,bar FROM frequents JOIN  
(SELECT MAX(times_a_week) as mostreg, bar as bar2 FROM frequents GROUP BY bar 
)as maxbarlist ON times_a_week = mostreg AND bar=bar2
GROUP BY bar) as regdrinkers
ORDER BY total_num_drinker DESC","{'student_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Eve'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Dan']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1677,7,N,"3-th tuple in answer should be <Altes Sudhaus|11|3.0|Curtis> instead of <Rhodos|11|2.9375|Adrienne>
(there may be other errors too)
your output >>>>>
--------------------
<Donerhaus Dest|16|2.95|Faith>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","SELECT  bar, total_num_drinker, avg_price, most_reg_drinker FROM
(SELECT distinct name as bar FROM BAR ORDER BY name)AS barname
NATURAL JOIN
(SELECT COUNT(drinker) as total_num_drinker, bar FROM frequents GROUP BY bar ORDER BY total_num_drinker DESC)as drinkercount
NATURAL JOIN
(SELECT AVG(price) as avg_price, bar FROM serves GROUP BY bar) as avgprices
NATURAL JOIN
(SELECT MIN(drinker) as most_reg_drinker,bar FROM frequents JOIN  
(SELECT MAX(times_a_week) as mostreg, bar as bar2 FROM frequents GROUP BY bar 
)as maxbarlist ON times_a_week = mostreg AND bar=bar2
GROUP BY bar) as regdrinkers
ORDER BY total_num_drinker DESC","{'student_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1680,8,N,"1-th tuple in answer should be <471 Extra ESB|0.25|2.375> instead of <Old Bawdy 2006|0.5|2.6875>
(there may be other errors too)
your output >>>>>
--------------------
<Old Bawdy 2006|0.5|2.6875>
... ommitted ...
--------------------","SELECT beer, MAX(price) - MIN(price) AS price_gap, AVG(price) AS avg_price FROM serves WHERE beer IN (SELECT s.beer FROM serves s, frequents f WHERE s.bar = f.bar AND f.drinker LIKE 'B%' GROUP BY s.beer HAVING COUNT(DISTINCT s.bar) >= 2) GROUP BY beer ORDER BY beer;","SELECT b, (max_price - min_price), avg_price FROM 	
	(SELECT beer AS b, MAX(price) AS max_price , MIN(price) AS min_price, AVG(price) AS avg_price 
	FROM serves WHERE bar IN 
	--filter bars to choose beer from
 	(SELECT bar FROM 
	(SELECT bar, COUNT(*) AS servecount FROM serves  WHERE bar in 
	(SELECT bar FROM frequents WHERE drinker LIKE 'B%') GROUP BY bar ORDER BY bar)
	as barandcount WHERE servecount>2) 
	-- to here
	GROUP BY beer
	)AS beertable","{'student_result': [['Amstel', Decimal('0.75'), Decimal('1.37500000000000000000')], ['Budweiser', Decimal('0.00'), Decimal('2.2500000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')], ['Erdinger', Decimal('0.00'), Decimal('3.5000000000000000')], ['Full Sail', Decimal('0.00'), Decimal('7.7500000000000000')]], 'teacher_result': [['Amstel', Decimal('0.75'), Decimal('1.4000000000000000')], ['Budweiser', Decimal('0.30'), Decimal('2.3000000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')]]}","Find, for each beer served at least 2 bars that frequented by drinkers whose name starts with 'B', the difference of maximum and minimum (price gap) and average price of the beers in all serving bars, order by bar name. I.e., your query should output beer, price_gap, and avg_price.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1683,8,N,"1-th tuple in answer should be <471 Extra ESB|0.25|2.375> instead of <Old Bawdy 2006|0.75|2.8>
(there may be other errors too)
your output >>>>>
--------------------
<Old Bawdy 2006|0.75|2.8>
... ommitted ...
--------------------","SELECT beer, MAX(price) - MIN(price) AS price_gap, AVG(price) AS avg_price FROM serves WHERE beer IN (SELECT s.beer FROM serves s, frequents f WHERE s.bar = f.bar AND f.drinker LIKE 'B%' GROUP BY s.beer HAVING COUNT(DISTINCT s.bar) >= 2) GROUP BY beer ORDER BY beer;","SELECT b, (max_price - min_price), avg_price FROM 	
	(SELECT beer AS b, MAX(price) AS max_price , MIN(price) AS min_price, AVG(price) AS avg_price 
	FROM serves WHERE bar IN 
	--filter bars to choose beer from
 	(SELECT bar FROM 
	(SELECT bar, COUNT(*) AS servecount FROM serves  WHERE bar in 
	(SELECT bar FROM frequents WHERE drinker LIKE 'B%') GROUP BY bar ORDER BY bar)
	as barandcount WHERE servecount>=2) 
	-- to here then filter beers to choose from
	AND beer in
	(SELECT distinct beer FROM
		(SELECT beer, COUNT(*) as servebeercount FROM serves GROUP BY beer) as beercounttable
		WHERE servebeercount>2
	)
	
	GROUP BY beer
	)AS beertable","{'student_result': [['Amstel', Decimal('0.75'), Decimal('1.4166666666666667')], ['Budweiser', Decimal('0.05'), Decimal('2.2250000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')]], 'teacher_result': [['Amstel', Decimal('0.75'), Decimal('1.4000000000000000')], ['Budweiser', Decimal('0.30'), Decimal('2.3000000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')]]}","Find, for each beer served at least 2 bars that frequented by drinkers whose name starts with 'B', the difference of maximum and minimum (price gap) and average price of the beers in all serving bars, order by bar name. I.e., your query should output beer, price_gap, and avg_price.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1696,9,N,"<Cow Palace Scotch Ale 1998|3.5|Haller Ranch> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<471 Extra ESB|2.25|Restaurant Hotel Bessunger Forst>
... ommitted ...
--------------------","SELECT beer.name, min_price, bar FROM beer LEFT OUTER JOIN (SELECT beer, MIN(price) AS min_price FROM serves GROUP BY beer) t ON beer.name = t.beer LEFT OUTER JOIN serves ON beer.name = serves.beer AND min_price = serves.price;","SELECT Beer.name AS beer,
       MIN(Serves.price) AS price,
       Bar.name AS bar
FROM Beer
LEFT JOIN Serves ON Beer.name = Serves.beer
LEFT JOIN Bar ON Serves.bar = Bar.name
GROUP BY Beer.name, Bar.name
HAVING MIN(Serves.price) IS NOT NULL
UNION
SELECT Beer.name,
       NULL AS price,
       NULL AS bar
FROM Beer
WHERE NOT EXISTS (
    SELECT 1
    FROM Serves
    WHERE Serves.beer = Beer.name
)
ORDER BY beer, price, bar;
","{'student_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Amstel', Decimal('1.50'), 'Talk of the Town'], ['Amstel', Decimal('1.75'), 'Satisfaction'], ['Amstel', Decimal('1.75'), 'The Edge'], ['Budweiser', Decimal('2.20'), 'Talk of the Town'], ['Budweiser', Decimal('2.25'), 'Down Under Pub'], ['Budweiser', Decimal('2.25'), 'Satisfaction'], ['Budweiser', Decimal('2.50'), 'The Edge'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Corona', Decimal('7.00'), 'The Edge'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Dixie', Decimal('3.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Full Sail', Decimal('7.75'), 'Satisfaction']], 'teacher_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Talk of the Town']]}","Find, for each beer, its lowest serving price and the bar(s) serving it at this price. The output should be a list of (beer, price, bar) triples. If some beer B is not served anywhere, you should still output (B, NULL, NULL).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1765,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <1|Vanilla|3.166666667|Ben>
(there may be other errors too)
your output >>>>>
--------------------
<1|Vanilla|3.166666667|Ben>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","SELECT f1.total_count,f1.bar, s1.avg_price,f2.drinker
FROM 
    (SELECT frequents.bar,COUNT(frequents.drinker) total_count 
    FROM frequents GROUP BY bar ORDER BY bar ASC) f1,
    (SELECT serves.bar,AVG(serves.price) avg_price
    FROM serves GROUP BY bar ORDER BY bar ASC) s1,
    (SELECT ft.bar,ft.drinker,ft.times_a_week FROM frequents ft, 
        (SELECT frequents.bar,MAX(frequents.times_a_week) times_max
        FROM frequents GROUP BY bar ORDER BY bar ASC) bar_max 
        WHERE ft.bar = bar_max.bar AND ft.times_a_week = bar_max.times_max 
        ORDER BY ft.drinker ASC) f2
WHERE
    f1.bar = s1.bar AND f1.bar = f2.bar AND s1.bar = f2.bar
ORDER BY f1.total_count ASC;","{'student_result': [[2, 'The Edge', Decimal('3.7500000000000000'), 'Coy'], [2, 'The Edge', Decimal('3.7500000000000000'), 'Dan'], [2, 'Down Under Pub', Decimal('3.4166666666666667'), 'Dan'], [2, 'Satisfaction', Decimal('4.3000000000000000'), 'Ben'], [2, 'Satisfaction', Decimal('4.3000000000000000'), 'Dan'], [2, 'Talk of the Town', Decimal('1.8500000000000000'), 'Dan'], [4, 'James Joyce Pub', Decimal('3.6250000000000000'), 'Amy'], [4, 'James Joyce Pub', Decimal('3.6250000000000000'), 'Eve']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1767,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <16|Donerhaus Dest|2.95|Yesenia>
(there may be other errors too)
your output >>>>>
--------------------
<16|Donerhaus Dest|2.95|Yesenia>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","SELECT f1.total_count,f1.bar, s1.avg_price,f2.drinker
FROM 
    (SELECT frequents.bar,COUNT(frequents.drinker) total_count 
    FROM frequents GROUP BY bar ORDER BY bar ASC) f1,
    (SELECT serves.bar,AVG(serves.price) avg_price
    FROM serves GROUP BY bar ORDER BY bar ASC) s1,
    (SELECT ft.bar,ft.drinker,ft.times_a_week FROM frequents ft, 
        (SELECT frequents.bar,MAX(frequents.times_a_week) times_max
        FROM frequents GROUP BY bar ORDER BY bar ASC) bar_max 
        WHERE ft.bar = bar_max.bar AND ft.times_a_week = bar_max.times_max 
        ORDER BY ft.drinker ASC) f2
WHERE
    f1.bar = s1.bar AND f1.bar = f2.bar AND s1.bar = f2.bar
ORDER BY f1.total_count DESC,f2.drinker DESC;","{'student_result': [[4, 'James Joyce Pub', Decimal('3.6250000000000000'), 'Eve'], [4, 'James Joyce Pub', Decimal('3.6250000000000000'), 'Amy'], [2, 'Down Under Pub', Decimal('3.4166666666666667'), 'Dan'], [2, 'Talk of the Town', Decimal('1.8500000000000000'), 'Dan'], [2, 'The Edge', Decimal('3.7500000000000000'), 'Dan'], [2, 'Satisfaction', Decimal('4.3000000000000000'), 'Dan'], [2, 'The Edge', Decimal('3.7500000000000000'), 'Coy'], [2, 'Satisfaction', Decimal('4.3000000000000000'), 'Ben']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1769,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <16|Donerhaus Dest|2.95|Faith>
(there may be other errors too)
your output >>>>>
--------------------
<16|Donerhaus Dest|2.95|Faith>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","SELECT f1.total_count,f1.bar, s1.avg_price,f2.drinker
FROM 
    (SELECT frequents.bar,COUNT(frequents.drinker) total_count 
    FROM frequents GROUP BY bar ORDER BY bar ASC) f1,
    (SELECT serves.bar,AVG(serves.price) avg_price
    FROM serves GROUP BY bar ORDER BY bar ASC) s1,
    (SELECT ft.bar,ft.drinker,ft.times_a_week FROM frequents ft, 
        (SELECT frequents.bar,MAX(frequents.times_a_week) times_max
        FROM frequents GROUP BY bar ORDER BY bar ASC) bar_max 
        WHERE ft.bar = bar_max.bar AND ft.times_a_week = bar_max.times_max 
        ORDER BY ft.drinker ASC) f2
WHERE
    f1.bar = s1.bar AND f1.bar = f2.bar AND s1.bar = f2.bar
ORDER BY f1.total_count DESC,f2.drinker ASC;","{'student_result': [[4, 'James Joyce Pub', Decimal('3.6250000000000000'), 'Amy'], [4, 'James Joyce Pub', Decimal('3.6250000000000000'), 'Eve'], [2, 'Satisfaction', Decimal('4.3000000000000000'), 'Ben'], [2, 'The Edge', Decimal('3.7500000000000000'), 'Coy'], [2, 'Satisfaction', Decimal('4.3000000000000000'), 'Dan'], [2, 'Down Under Pub', Decimal('3.4166666666666667'), 'Dan'], [2, 'Talk of the Town', Decimal('1.8500000000000000'), 'Dan'], [2, 'The Edge', Decimal('3.7500000000000000'), 'Dan']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1785,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Donerhaus Dest|54|2.95|Faith>
(there may be other errors too)
your output >>>>>
--------------------
<Donerhaus Dest|54|2.95|Faith>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","SELECT b.name, (SELECT SUM(times_a_week) FROM frequents f WHERE f.bar=b.name) AS total_num_drinker,
(SELECT AVG(price) FROM serves s WHERE s.bar=b.name) AS avg_price,
(SELECT l.drinker FROM frequents l WHERE l.bar=b.name ORDER BY l.times_a_week DESC, l.drinker LIMIT 1 ) AS most_reg_drinker 
FROM bar b ORDER BY total_num_drinker DESC, b.name;","{'student_result': [['James Joyce Pub', 6, Decimal('3.6250000000000000'), 'Amy'], ['Satisfaction', 4, Decimal('4.3000000000000000'), 'Ben'], ['Down Under Pub', 3, Decimal('3.4166666666666667'), 'Dan'], ['Talk of the Town', 3, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1795,9,N,"<Danger Ale|2.25|Cafe Hilde> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Old Bawdy 2006|2.5|Inspektorenhaus>
... ommitted ...
--------------------","SELECT beer.name, min_price, bar FROM beer LEFT OUTER JOIN (SELECT beer, MIN(price) AS min_price FROM serves GROUP BY beer) t ON beer.name = t.beer LEFT OUTER JOIN serves ON beer.name = serves.beer AND min_price = serves.price;","select beer, MIN(price), MIN(bar)
from Serves 
group by beer
","{'student_result': [['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Budweiser', Decimal('2.20'), 'Down Under Pub'], ['Dixie', Decimal('2.75'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Amstel', Decimal('1.00'), 'Down Under Pub']], 'teacher_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Talk of the Town']]}","Find, for each beer, its lowest serving price and the bar(s) serving it at this price. The output should be a list of (beer, price, bar) triples. If some beer B is not served anywhere, you should still output (B, NULL, NULL).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1800,6,N,"<Ristorante al dente da Pino|Pizzeria Triangolo> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Die Kneipp|Eulenpick>
... ommitted ...
--------------------","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE NOT EXISTS (SELECT s1.beer FROM serves s1 WHERE s1.bar = b1.name AND NOT EXISTS (SELECT 1 FROM serves s2 WHERE s2.bar = b2.name AND s2.beer = s1.beer)) AND EXISTS (SELECT s2.beer FROM serves s2 WHERE s2.bar = b2.name AND NOT EXISTS (SELECT 1 FROM serves s1 WHERE s1.bar = b1.name AND s1.beer = s2.beer));","SELECT DISTINCT s1.bar, s2.bar
FROM serves s1, serves s2
WHERE s1.bar <> s2.bar
AND EXISTS (
	SELECT *
	FROM serves s3
	WHERE s3.beer IN (
		SELECT s3.beer
		FROM serves s4
		WHERE s4.bar <> s3.bar
		AND s4.beer NOT IN (
			SELECT s5.beer
			FROM serves s5
			WHERE s5.bar = s3.bar
		)
	)
);","{'student_result': [['Down Under Pub', 'James Joyce Pub'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'Talk of the Town'], ['Down Under Pub', 'The Edge'], ['James Joyce Pub', 'Down Under Pub'], ['James Joyce Pub', 'Satisfaction'], ['James Joyce Pub', 'Talk of the Town'], ['James Joyce Pub', 'The Edge'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'James Joyce Pub'], ['Satisfaction', 'Talk of the Town'], ['Satisfaction', 'The Edge'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'James Joyce Pub'], ['Talk of the Town', 'Satisfaction'], ['Talk of the Town', 'The Edge'], ['The Edge', 'Down Under Pub'], ['The Edge', 'James Joyce Pub'], ['The Edge', 'Satisfaction'], ['The Edge', 'Talk of the Town']], 'teacher_result': [['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction']]}","Find all (bar1, bar2) pairs where the set of beers served at bar1 is a proper subset of the those served at bar2; i.e., bar2 serves every beer that bar1 serves and plus some more.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1861,2,N,"<Helen> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Angela>
... ommitted ...
--------------------",SELECT DISTINCT drinker FROM frequents NATURAL JOIN serves WHERE beer = 'Corona' AND drinker not in (SELECT drinker FROM Likes WHERE beer = 'Corona');,SELECT DISTINCT likes.drinker FROM likes WHERE likes.drinker NOT IN( SELECT DISTINCT likes.drinker FROM likes NATURAL JOIN frequents JOIN serves ON frequents.bar = serves.bar WHERE likes.beer = 'Corona'  and serves.beer = 'Corona');,"{'student_result': [['Ben'], ['Coy']], 'teacher_result': [['Ben'], ['Coy']]}",Find the names of all drinkers that do not like Corona but frequent a bar that serves Corona.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1906,2,N,"<Kristin> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Joshua>
... ommitted ...
--------------------",SELECT DISTINCT drinker FROM frequents NATURAL JOIN serves WHERE beer = 'Corona' AND drinker not in (SELECT drinker FROM Likes WHERE beer = 'Corona');,Select drinker from likes where drinker not in (Select drinker FROM likes WHERE beer = 'Corona'),"{'student_result': [['Ben'], ['Ben'], ['Coy']], 'teacher_result': [['Ben'], ['Coy']]}",Find the names of all drinkers that do not like Corona but frequent a bar that serves Corona.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1917,1,N,"<Dustin> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Dustin>
... ommitted ...
--------------------",SELECT DISTINCT bar FROM Serves WHERE (beer = 'Amstel' OR beer = 'Corona') AND price > 2;,"SELECT likes.drinker 
FROM likes, frequents,serves
WHERE likes.beer = 'Corona'
AND serves.beer = 'Corona'
AND serves.bar = frequents.bar","{'student_result': [['Amy'], ['Dan'], ['Eve'], ['Amy'], ['Dan'], ['Eve'], ['Amy'], ['Dan'], ['Eve'], ['Amy'], ['Dan'], ['Eve'], ['Amy'], ['Dan'], ['Eve'], ['Amy'], ['Dan'], ['Eve'], ['Amy'], ['Dan'], ['Eve'], ['Amy'], ['Dan'], ['Eve'], ['Amy'], ['Dan'], ['Eve'], ['Amy'], ['Dan'], ['Eve']], 'teacher_result': [['Down Under Pub'], ['James Joyce Pub'], ['Satisfaction'], ['The Edge']]}",Find names of bars that serve either Amstel or Corona at price higher than $2.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1938,4,N,"<John|Nancy> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Adam|Adam>
... ommitted ...
--------------------","SELECT f1.drinker, f2.drinker FROM (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f1, (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f2 WHERE f1.drinker < f2.drinker AND f1.st = f2.st","SELECT DISTINCT f1.drinker, f2.drinker FROM frequents f1, frequents f2 GROUP BY f1.drinker, f2.drinker HAVING SUM(f1.times_a_week) = SUM(f2.times_a_week);
","{'student_result': [['Amy', 'Amy'], ['Amy', 'Eve'], ['Ben', 'Ben'], ['Coy', 'Coy'], ['Dan', 'Dan'], ['Eve', 'Amy'], ['Eve', 'Eve']], 'teacher_result': [['Coy', 'Eve'], ['Amy', 'Eve'], ['Amy', 'Coy']]}","Find the pair of drinkers who frequent bars the same total number of times per week. Don't list (drinkerA, drinkerA). Only list pairs (drinkerA, drinkerB) where drinkerA < drinkerB  in the answer; don't list (drinkerB, drinkerA) again.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1944,4,N,"<John|Nancy> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Adam|Carla>
... ommitted ...
--------------------","SELECT f1.drinker, f2.drinker FROM (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f1, (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f2 WHERE f1.drinker < f2.drinker AND f1.st = f2.st","SELECT DISTINCT f1.drinker, f2.drinker FROM frequents f1, frequents f2 WHERE f1.drinker <> f2.drinker GROUP BY f1.drinker, f2.drinker HAVING SUM(f1.times_a_week) = SUM(f2.times_a_week);
","{'student_result': [['Amy', 'Eve'], ['Eve', 'Amy']], 'teacher_result': [['Coy', 'Eve'], ['Amy', 'Eve'], ['Amy', 'Coy']]}","Find the pair of drinkers who frequent bars the same total number of times per week. Don't list (drinkerA, drinkerA). Only list pairs (drinkerA, drinkerB) where drinkerA < drinkerB  in the answer; don't list (drinkerB, drinkerA) again.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1954,1,N,"<Sachers Cafe Alte Munz> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<James Joyce Pub>
... ommitted ...
--------------------",SELECT DISTINCT bar FROM Serves WHERE (beer = 'Amstel' OR beer = 'Corona') AND price > 2;,SELECT bar FROM serves WHERE price > 2,"{'student_result': [['Down Under Pub'], ['Down Under Pub'], ['The Edge'], ['The Edge'], ['James Joyce Pub'], ['James Joyce Pub'], ['James Joyce Pub'], ['Satisfaction'], ['Satisfaction'], ['Satisfaction'], ['Satisfaction'], ['Talk of the Town']], 'teacher_result': [['Down Under Pub'], ['James Joyce Pub'], ['Satisfaction'], ['The Edge']]}",Find names of bars that serve either Amstel or Corona at price higher than $2.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
1960,6,N,"<Restaurant Sterkel|Bockenheimer Stubb> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Qbar|Enchilada Kassel>
... ommitted ...
--------------------","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE NOT EXISTS (SELECT s1.beer FROM serves s1 WHERE s1.bar = b1.name AND NOT EXISTS (SELECT 1 FROM serves s2 WHERE s2.bar = b2.name AND s2.beer = s1.beer)) AND EXISTS (SELECT s2.beer FROM serves s2 WHERE s2.bar = b2.name AND NOT EXISTS (SELECT 1 FROM serves s1 WHERE s1.bar = b1.name AND s1.beer = s2.beer));","SELECT distinct S1.bar, S2.bar
FROM serves as S1
LEFT JOIN serves as S2
ON S1.beer = S2.beer;","{'student_result': [['Satisfaction', 'James Joyce Pub'], ['James Joyce Pub', 'Satisfaction'], ['Satisfaction', 'Satisfaction'], ['The Edge', 'The Edge'], ['Talk of the Town', 'James Joyce Pub'], ['Satisfaction', 'Down Under Pub'], ['The Edge', 'Talk of the Town'], ['The Edge', 'James Joyce Pub'], ['Talk of the Town', 'Talk of the Town'], ['Down Under Pub', 'Talk of the Town'], ['Satisfaction', 'The Edge'], ['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['James Joyce Pub', 'The Edge'], ['James Joyce Pub', 'Talk of the Town'], ['Talk of the Town', 'Satisfaction'], ['Satisfaction', 'Talk of the Town'], ['Talk of the Town', 'The Edge'], ['James Joyce Pub', 'James Joyce Pub'], ['Down Under Pub', 'James Joyce Pub'], ['Down Under Pub', 'The Edge'], ['Talk of the Town', 'Down Under Pub'], ['The Edge', 'Down Under Pub'], ['James Joyce Pub', 'Down Under Pub'], ['Down Under Pub', 'Down Under Pub']], 'teacher_result': [['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction']]}","Find all (bar1, bar2) pairs where the set of beers served at bar1 is a proper subset of the those served at bar2; i.e., bar2 serves every beer that bar1 serves and plus some more.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
2794,4,N,"<Sherry|Patty> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Steven|Carlos>
... ommitted ...
--------------------","SELECT f1.drinker, f2.drinker FROM (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f1, (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f2 WHERE f1.drinker < f2.drinker AND f1.st = f2.st","select f1.drinker as drinker1,f2.drinker as drinker2
	from frequents as f1, frequents as f2
		where f1.drinker > f2.drinker
group by f1.drinker,f2.drinker
	having sum(f1.times_a_week) = sum(f2.times_a_week);","{'student_result': [['Eve', 'Amy']], 'teacher_result': [['Coy', 'Eve'], ['Amy', 'Eve'], ['Amy', 'Coy']]}","Find the pair of drinkers who frequent bars the same total number of times per week. Don't list (drinkerA, drinkerA). Only list pairs (drinkerA, drinkerB) where drinkerA < drinkerB  in the answer; don't list (drinkerB, drinkerA) again.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
2000,9,N,"<Brunette Nut Brown Ale|None|None> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<471 Extra ESB|None|None>
... ommitted ...
--------------------","SELECT beer.name, min_price, bar FROM beer LEFT OUTER JOIN (SELECT beer, MIN(price) AS min_price FROM serves GROUP BY beer) t ON beer.name = t.beer LEFT OUTER JOIN serves ON beer.name = serves.beer AND min_price = serves.price;","SELECT
    beer,
    CASE
        WHEN price = min_price THEN min_price
        ELSE NULL
    END AS price,
    CASE
        WHEN price = min_price THEN bar
        ELSE NULL
    END AS bar
FROM
    (SELECT
        s.beer,
        s.price,
        s.bar,
        (SELECT MIN(price) FROM serves WHERE serves.beer = s.beer) AS min_price
    FROM
        serves s) AS prices
ORDER BY
    beer;
","{'student_result': [['Amstel', None, None], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Amstel', None, None], ['Amstel', None, None], ['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Budweiser', Decimal('2.20'), 'Talk of the Town'], ['Budweiser', None, None], ['Budweiser', None, None], ['Budweiser', None, None], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', None, None], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Full Sail', Decimal('7.75'), 'Satisfaction']], 'teacher_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Talk of the Town']]}","Find, for each beer, its lowest serving price and the bar(s) serving it at this price. The output should be a list of (beer, price, bar) triples. If some beer B is not served anywhere, you should still output (B, NULL, NULL).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
2005,5,N,"<Jonathan> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Ben>
... ommitted ...
--------------------","SELECT name FROM drinker WHERE NOT EXISTS (SELECT f.bar FROM frequents f, serves s WHERE f.drinker = drinker.name AND f.bar = s.bar AND s.beer NOT IN (SELECT beer FROM likes WHERE drinker = drinker.name));","SELECT d.name FROM drinker d
WHERE d.name NOT IN (
    SELECT drinker FROM likes
    WHERE beer = 'Corona'
) 
AND d.name IN (
    SELECT f.drinker FROM frequents f
    JOIN serves s ON f.bar = s.bar
    WHERE s.beer = 'Corona'
);","{'student_result': [['Ben'], ['Coy']], 'teacher_result': []}",Find names of all drinkers who do not frequent any bar that serves any beer they do not like.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
2085,5,N,"<Edwin> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Joshua>
... ommitted ...
--------------------","SELECT name FROM drinker WHERE NOT EXISTS (SELECT f.bar FROM frequents f, serves s WHERE f.drinker = drinker.name AND f.bar = s.bar AND s.beer NOT IN (SELECT beer FROM likes WHERE drinker = drinker.name));","Select likes.drinker 
FROM likes, serves, frequents
WHERE likes.drinker = frequents.drinker AND serves.bar = frequents.bar","{'student_result': [['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Coy'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Coy'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Coy'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Coy'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Coy'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Coy'], ['Eve'], ['Eve'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Ben'], ['Ben'], ['Amy'], ['Amy'], ['Eve'], ['Eve'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Ben'], ['Ben'], ['Amy'], ['Amy'], ['Eve'], ['Eve'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Ben'], ['Ben'], ['Amy'], ['Amy'], ['Eve'], ['Eve'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Ben'], ['Ben'], ['Amy'], ['Amy'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Ben'], ['Ben'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Ben'], ['Ben'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Ben'], ['Ben'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Ben'], ['Ben'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Ben'], ['Ben'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Ben'], ['Ben'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Ben'], ['Ben']], 'teacher_result': []}",Find names of all drinkers who do not frequent any bar that serves any beer they do not like.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
2092,8,N,"1-th tuple in answer should be <471 Extra ESB|0.25|2.375> instead of <Blue Moon|8.25|3.046148909>
(there may be other errors too)
your output >>>>>
--------------------
<Blue Moon|8.25|3.046148909>
... ommitted ...
--------------------","SELECT beer, MAX(price) - MIN(price) AS price_gap, AVG(price) AS avg_price FROM serves WHERE beer IN (SELECT s.beer FROM serves s, frequents f WHERE s.bar = f.bar AND f.drinker LIKE 'B%' GROUP BY s.beer HAVING COUNT(DISTINCT s.bar) >= 2) GROUP BY beer ORDER BY beer;","select distinct beer, ((select max(price) 
				from serves S
					where S.beer = beer) 
					-
			  (select min(price) 
				from serves S
					where S.beer = beer)) as diff,  (select avg(price) 
														from serves S
															where S.beer = beer)	
from (select beer, bar
		from serves natural join frequents
			group by bar, beer
			having (select count (*) 
					from frequents F
					where F.bar = bar and F.drinker like 'B%') >= 2
						order by bar) br


","{'student_result': [['Dixie', Decimal('6.75'), Decimal('3.6000000000000000')], ['Corona', Decimal('6.75'), Decimal('3.6000000000000000')], ['Full Sail', Decimal('6.75'), Decimal('3.6000000000000000')], ['Erdinger', Decimal('6.75'), Decimal('3.6000000000000000')], ['Budweiser', Decimal('6.75'), Decimal('3.6000000000000000')], ['Amstel', Decimal('6.75'), Decimal('3.6000000000000000')]], 'teacher_result': [['Amstel', Decimal('0.75'), Decimal('1.4000000000000000')], ['Budweiser', Decimal('0.30'), Decimal('2.3000000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')]]}","Find, for each beer served at least 2 bars that frequented by drinkers whose name starts with 'B', the difference of maximum and minimum (price gap) and average price of the beers in all serving bars, order by bar name. I.e., your query should output beer, price_gap, and avg_price.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
2099,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <16|Donerhaus Dest|2.95|Faith>
(there may be other errors too)
your output >>>>>
--------------------
<16|Donerhaus Dest|2.95|Faith>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","SELECT td.total_count, td.bar, avg_p.avg_price,mfd.drinker
FROM 
    (SELECT frequents.bar,COUNT(frequents.drinker) total_count 
    FROM frequents GROUP BY bar ORDER BY bar DESC) td,
    (SELECT serves.bar,AVG(serves.price) avg_price
    FROM serves GROUP BY bar ORDER BY bar ASC) avg_p,
    (SELECT mfds.bar, MIN(mfds.drinker) drinker FROM (SELECT ft.bar,ft.drinker,ft.times_a_week FROM frequents ft JOIN  
        (SELECT ff.bar,MAX(ff.times_a_week) times_max FROM frequents ff GROUP BY bar) bar_max 
    ON bar_max.bar = ft.bar AND ft.times_a_week = bar_max.times_max
    ORDER BY ft.bar ASC, ft.times_a_week DESC, ft.drinker ASC) mfds GROUP BY mfds.bar) mfd
WHERE   td.bar = avg_p.bar AND td.bar = mfd.bar AND avg_p.bar = mfd.bar
ORDER BY td.total_count DESC, td.bar ASC,mfd.drinker ASC;","{'student_result': [[4, 'James Joyce Pub', Decimal('3.6250000000000000'), 'Amy'], [2, 'Down Under Pub', Decimal('3.4166666666666667'), 'Dan'], [2, 'Satisfaction', Decimal('4.3000000000000000'), 'Ben'], [2, 'Talk of the Town', Decimal('1.8500000000000000'), 'Dan'], [2, 'The Edge', Decimal('3.7500000000000000'), 'Coy']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
2100,5,N,"<Hansenhaus links> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Adel.es Restaurant>
... ommitted ...
--------------------","SELECT name FROM drinker WHERE NOT EXISTS (SELECT f.bar FROM frequents f, serves s WHERE f.drinker = drinker.name AND f.bar = s.bar AND s.beer NOT IN (SELECT beer FROM likes WHERE drinker = drinker.name));","/*Beers drinkers like*/
WITH drinkerLikes AS (
    SELECT DISTINCT drinker.name, likes.beer
    FROM drinker
    JOIN likes ON drinker.name = likes.drinker
),

/*Beers that bars serve*/
barServes as
(SELECT DISTINCT bar.name, serves.beer
FROM bar join serves 
on bar.name=serves.bar),

/*Bars drinkers frequent*/
drinkerFreq as 
(SELECT DISTINCT drinker, bar
from frequents),

/*Bars that serve only beers drinkers like*/
likesServes as 
(select DISTINCT barServes.name, barServes.beer
FROM barServes 
JOIN drinkerLikes
on drinkerLikes.beer = barServes.beer
),

onlyServesLikes as (
	select likesServes.name
	from likesServes
	group by name
	HAVING COUNT (DISTINCT beer) = (
	SELECT COUNT(DISTINCT beer)
	from barServes bs
	where bs.name= likesServes.name
	)
)

select * from onlyServesLikes;","{'student_result': [['Down Under Pub'], ['James Joyce Pub'], ['Talk of the Town'], ['The Edge']], 'teacher_result': []}",Find names of all drinkers who do not frequent any bar that serves any beer they do not like.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
2139,8,N,"1-th tuple in answer should be <471 Extra ESB|0.25|2.375> instead of <471 Extra ESB|0.25|2.388888889>
(there may be other errors too)
your output >>>>>
--------------------
<471 Extra ESB|0.25|2.388888889>
... ommitted ...
--------------------","SELECT beer, MAX(price) - MIN(price) AS price_gap, AVG(price) AS avg_price FROM serves WHERE beer IN (SELECT s.beer FROM serves s, frequents f WHERE s.bar = f.bar AND f.drinker LIKE 'B%' GROUP BY s.beer HAVING COUNT(DISTINCT s.bar) >= 2) GROUP BY beer ORDER BY beer;","SELECT 
    s.beer AS beer,
    MAX(s.price) - MIN(s.price) AS price_gap,
    AVG(s.price) AS avg_price
FROM 
    serves s
INNER JOIN 
    frequents f ON s.bar = f.bar
WHERE 
    s.beer IN (
        SELECT 
            s.beer
        FROM 
            serves s
        INNER JOIN 
            frequents f ON s.bar = f.bar
        WHERE 
            f.drinker LIKE 'B%'
    )
GROUP BY 
    s.beer
ORDER BY 
    s.beer","{'student_result': [['Amstel', Decimal('0.75'), Decimal('1.3333333333333333')], ['Budweiser', Decimal('0.30'), Decimal('2.3000000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.9166666666666667')], ['Erdinger', Decimal('0.00'), Decimal('3.5000000000000000')], ['Full Sail', Decimal('0.00'), Decimal('7.7500000000000000')]], 'teacher_result': [['Amstel', Decimal('0.75'), Decimal('1.4000000000000000')], ['Budweiser', Decimal('0.30'), Decimal('2.3000000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')]]}","Find, for each beer served at least 2 bars that frequented by drinkers whose name starts with 'B', the difference of maximum and minimum (price gap) and average price of the beers in all serving bars, order by bar name. I.e., your query should output beer, price_gap, and avg_price.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
2148,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Donerhaus Dest|16|23.6|Faith>
(there may be other errors too)
your output >>>>>
--------------------
<Donerhaus Dest|16|23.6|Faith>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","SELECT
	name, 
	COALESCE(count(distinct f.drinker),0) as total_num_drinker, 
	COALESCE((sum(s.price)/count(distinct s.beer))/2, NULL) as avg_price,
	(
	SELECT f1.drinker
    FROM frequents f1
    WHERE f1.bar = name
    ORDER BY f1.times_a_week DESC, f1.drinker ASC
    LIMIT 1
	) as most_reg_drinker
FROM 
	bar
INNER JOIN
	frequents f on name = f.bar
INNER JOIN
	serves s on name = s.bar
GROUP BY 
	name
ORDER BY
	total_num_drinker DESC, name ASC;","{'student_result': [['James Joyce Pub', 4, Decimal('7.2500000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
2153,4,N,"answer should have 1 instead of 2 occurrence(s) of <Jamie|Wendy>
(there may be other errors too)
your output >>>>>
--------------------
<Denise|Todd>
... ommitted ...
--------------------","SELECT f1.drinker, f2.drinker FROM (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f1, (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f2 WHERE f1.drinker < f2.drinker AND f1.st = f2.st","SELECT f1.drinker AS drinkerA, f2.drinker AS drinkerB
FROM frequents f1, frequents f2
WHERE f1.drinker < f2.drinker
AND f1.drinker != f2.drinker
AND (SELECT SUM(f3.times_a_week) FROM frequents f3 WHERE f3.drinker = f1.drinker) =
    (SELECT SUM(f4.times_a_week) FROM frequents f4 WHERE f4.drinker = f2.drinker);
","{'student_result': [['Amy', 'Eve'], ['Amy', 'Coy'], ['Amy', 'Coy'], ['Coy', 'Eve'], ['Coy', 'Eve']], 'teacher_result': [['Coy', 'Eve'], ['Amy', 'Eve'], ['Amy', 'Coy']]}","Find the pair of drinkers who frequent bars the same total number of times per week. Don't list (drinkerA, drinkerA). Only list pairs (drinkerA, drinkerB) where drinkerA < drinkerB  in the answer; don't list (drinkerB, drinkerA) again.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
2220,4,N,"<Ben|Samuel> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Kelsey|Micheal>
... ommitted ...
--------------------","SELECT f1.drinker, f2.drinker FROM (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f1, (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f2 WHERE f1.drinker < f2.drinker AND f1.st = f2.st","SELECT f1.drinker AS drinkerA, f2.drinker AS drinkerB
FROM frequents f1
JOIN frequents f2 ON f1.bar = f2.bar AND f1.drinker < f2.drinker
GROUP BY f1.drinker, f2.drinker
HAVING COUNT(f1.bar) = COUNT(f2.bar);
","{'student_result': [['Dan', 'Eve'], ['Ben', 'Dan'], ['Amy', 'Dan'], ['Amy', 'Eve'], ['Coy', 'Dan'], ['Amy', 'Ben'], ['Ben', 'Eve']], 'teacher_result': [['Coy', 'Eve'], ['Amy', 'Eve'], ['Amy', 'Coy']]}","Find the pair of drinkers who frequent bars the same total number of times per week. Don't list (drinkerA, drinkerA). Only list pairs (drinkerA, drinkerB) where drinkerA < drinkerB  in the answer; don't list (drinkerB, drinkerA) again.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
2252,9,N,"<Organic Gingerbread Ale|3.25|Bella Mia> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Oatmeal Stout|3.75|James Joyce Pub>
... ommitted ...
--------------------","SELECT beer.name, min_price, bar FROM beer LEFT OUTER JOIN (SELECT beer, MIN(price) AS min_price FROM serves GROUP BY beer) t ON beer.name = t.beer LEFT OUTER JOIN serves ON beer.name = serves.beer AND min_price = serves.price;","SELECT s1.beer,COALESCE(CAST(s1.price AS varchar),'None'),COALESCE(s1.bar,'None')
FROM beer allb 
LEFT OUTER JOIN 
(SELECT s.beer, MIN(s.price) lowest FROM serves s GROUP BY beer) low
ON allb.name = low.beer 
LEFT OUTER JOIN serves s1 
ON low.beer= s1.beer;","{'student_result': [['Amstel', '1.00', 'Down Under Pub'], ['Budweiser', '2.25', 'Down Under Pub'], ['Corona', '7.00', 'Down Under Pub'], ['Amstel', '1.75', 'The Edge'], ['Budweiser', '2.50', 'The Edge'], ['Corona', '7.00', 'The Edge'], ['Amstel', '1.00', 'James Joyce Pub'], ['Corona', '7.00', 'James Joyce Pub'], ['Dixie', '3.00', 'James Joyce Pub'], ['Erdinger', '3.50', 'James Joyce Pub'], ['Amstel', '1.75', 'Satisfaction'], ['Budweiser', '2.25', 'Satisfaction'], ['Corona', '7.00', 'Satisfaction'], ['Dixie', '2.75', 'Satisfaction'], ['Full Sail', '7.75', 'Satisfaction'], ['Amstel', '1.50', 'Talk of the Town'], ['Budweiser', '2.20', 'Talk of the Town']], 'teacher_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Talk of the Town']]}","Find, for each beer, its lowest serving price and the bar(s) serving it at this price. The output should be a list of (beer, price, bar) triples. If some beer B is not served anywhere, you should still output (B, NULL, NULL).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
2254,9,N,"<Organic Gingerbread Ale|3.25|Bella Mia> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<471 Extra ESB|2.5|Pizzeria Santa Lucia>
... ommitted ...
--------------------","SELECT beer.name, min_price, bar FROM beer LEFT OUTER JOIN (SELECT beer, MIN(price) AS min_price FROM serves GROUP BY beer) t ON beer.name = t.beer LEFT OUTER JOIN serves ON beer.name = serves.beer AND min_price = serves.price;","SELECT
    b.name AS beer,
    MIN(s.price) AS price,
    s.bar
FROM
    beer b
LEFT JOIN
    serves s ON b.name = s.beer
LEFT JOIN
    (SELECT
         beer,
         MIN(price) AS lowest_price
     FROM
         serves
     GROUP BY
         beer) lp ON b.name = lp.beer AND s.price = lp.lowest_price
GROUP BY
    b.name, s.bar
ORDER BY
    b.name, s.bar;
","{'student_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Amstel', Decimal('1.75'), 'Satisfaction'], ['Amstel', Decimal('1.50'), 'Talk of the Town'], ['Amstel', Decimal('1.75'), 'The Edge'], ['Budweiser', Decimal('2.25'), 'Down Under Pub'], ['Budweiser', Decimal('2.25'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Talk of the Town'], ['Budweiser', Decimal('2.50'), 'The Edge'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Corona', Decimal('7.00'), 'The Edge'], ['Dixie', Decimal('3.00'), 'James Joyce Pub'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Full Sail', Decimal('7.75'), 'Satisfaction']], 'teacher_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Talk of the Town']]}","Find, for each beer, its lowest serving price and the bar(s) serving it at this price. The output should be a list of (beer, price, bar) triples. If some beer B is not served anywhere, you should still output (B, NULL, NULL).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
2327,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Donerhaus Dest|16|2.95|Troy>
(there may be other errors too)
your output >>>>>
--------------------
<Donerhaus Dest|16|2.95|Troy>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","SELECT b.name AS bar,
       COUNT(DISTINCT f.drinker) AS total_num_drinker,
       AVG(s.price) AS avg_price,
       fr.most_reg_drinker
FROM bar b
LEFT JOIN frequents f ON b.name = f.bar
LEFT JOIN serves s ON b.name = s.bar
LEFT JOIN (
    SELECT f1.bar, f1.drinker AS most_reg_drinker
    FROM frequents f1
    JOIN (
        SELECT bar, MAX(times_a_week) AS max_times_a_week
        FROM frequents
        GROUP BY bar
    ) f2 ON f1.bar = f2.bar AND f1.times_a_week = f2.max_times_a_week
) fr ON b.name = fr.bar
GROUP BY b.name, fr.most_reg_drinker
ORDER BY total_num_drinker DESC, b.name;
","{'student_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Eve'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Dan']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
2344,9,N,"<La Moneuse|2.75|Pizzeria Triangolo, Burgerstuben> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<471 Extra ESB|2.25|Restaurant Hotel Bessunger Forst, Pizzeria Santa Lucia>
... ommitted ...
--------------------","SELECT beer.name, min_price, bar FROM beer LEFT OUTER JOIN (SELECT beer, MIN(price) AS min_price FROM serves GROUP BY beer) t ON beer.name = t.beer LEFT OUTER JOIN serves ON beer.name = serves.beer AND min_price = serves.price;","SELECT 
    beer.name AS beer,
    MIN(s.price) AS price,
    CASE 
        WHEN MIN(s.price) IS NOT NULL THEN STRING_AGG(bar.name, ', ') 
        ELSE NULL 
    END AS bar
FROM 
    beer
LEFT JOIN 
    serves s ON beer.name = s.beer
LEFT JOIN 
    bar ON s.bar = bar.name
GROUP BY 
    beer.name
ORDER BY 
    beer.name;
","{'student_result': [['Amstel', Decimal('1.00'), 'Down Under Pub, The Edge, James Joyce Pub, Satisfaction, Talk of the Town'], ['Budweiser', Decimal('2.20'), 'Down Under Pub, The Edge, Satisfaction, Talk of the Town'], ['Corona', Decimal('7.00'), 'Down Under Pub, The Edge, James Joyce Pub, Satisfaction'], ['Dixie', Decimal('2.75'), 'James Joyce Pub, Satisfaction'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Full Sail', Decimal('7.75'), 'Satisfaction']], 'teacher_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Talk of the Town']]}","Find, for each beer, its lowest serving price and the bar(s) serving it at this price. The output should be a list of (beer, price, bar) triples. If some beer B is not served anywhere, you should still output (B, NULL, NULL).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
2356,9,N,"<Ultrablonde|2.25|Burger King> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<471 Extra ESB|2.25|Pizzeria Santa Lucia>
... ommitted ...
--------------------","SELECT beer.name, min_price, bar FROM beer LEFT OUTER JOIN (SELECT beer, MIN(price) AS min_price FROM serves GROUP BY beer) t ON beer.name = t.beer LEFT OUTER JOIN serves ON beer.name = serves.beer AND min_price = serves.price;","WITH MinPrices AS (
    SELECT 
        beer,
        MIN(price) AS min_price
    FROM 
        serves
    GROUP BY 
        beer
)
SELECT 
    m.beer,
    m.min_price AS price,
    s.bar AS bar
FROM 
    MinPrices m
JOIN 
    serves s ON m.beer = s.beer
ORDER BY 
    m.beer, s.bar;
","{'student_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Amstel', Decimal('1.00'), 'Satisfaction'], ['Amstel', Decimal('1.00'), 'Talk of the Town'], ['Amstel', Decimal('1.00'), 'The Edge'], ['Budweiser', Decimal('2.20'), 'Down Under Pub'], ['Budweiser', Decimal('2.20'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Talk of the Town'], ['Budweiser', Decimal('2.20'), 'The Edge'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Corona', Decimal('7.00'), 'The Edge'], ['Dixie', Decimal('2.75'), 'James Joyce Pub'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Full Sail', Decimal('7.75'), 'Satisfaction']], 'teacher_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Talk of the Town']]}","Find, for each beer, its lowest serving price and the bar(s) serving it at this price. The output should be a list of (beer, price, bar) triples. If some beer B is not served anywhere, you should still output (B, NULL, NULL).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
2390,4,N,"<Cathy|Wendy> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Adam|Andre>
... ommitted ...
--------------------","SELECT f1.drinker, f2.drinker FROM (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f1, (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f2 WHERE f1.drinker < f2.drinker AND f1.st = f2.st","SELECT DISTINCT d1.drinker AS drinkerA, d2.drinker AS drinkerB
FROM frequents d1
JOIN frequents d2 ON d1.drinker < d2.drinker
GROUP BY d1.drinker, d2.drinker
HAVING SUM(d1.times_a_week) = (
    SELECT SUM(d2.times_a_week)
    FROM frequents d2
    WHERE d2.drinker = d1.drinker
);
","{'student_result': [['Amy', 'Eve'], ['Ben', 'Eve'], ['Coy', 'Eve'], ['Dan', 'Eve']], 'teacher_result': [['Coy', 'Eve'], ['Amy', 'Eve'], ['Amy', 'Coy']]}","Find the pair of drinkers who frequent bars the same total number of times per week. Don't list (drinkerA, drinkerA). Only list pairs (drinkerA, drinkerB) where drinkerA < drinkerB  in the answer; don't list (drinkerB, drinkerA) again.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
2397,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Donerhaus Dest|16|2.95|Samantha>
(there may be other errors too)
your output >>>>>
--------------------
<Donerhaus Dest|16|2.95|Samantha>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","SELECT 
    b.name AS bar_name,
    COALESCE(drinker_counts.total_num_drinker, 0) AS total_num_drinker,
    COALESCE(beer_prices.avg_price, NULL) AS avg_price,
    COALESCE(most_regular.most_reg_drinker, NULL) AS most_reg_drinker
FROM 
    bar b
LEFT JOIN (
    SELECT 
        f.bar,
        COUNT(DISTINCT f.drinker) AS total_num_drinker
    FROM 
        frequents f
    GROUP BY 
        f.bar
) AS drinker_counts ON b.name = drinker_counts.bar
LEFT JOIN (
    SELECT 
        s.bar,
        AVG(s.price) AS avg_price
    FROM 
        serves s
    GROUP BY 
        s.bar
) AS beer_prices ON b.name = beer_prices.bar
LEFT JOIN (
    SELECT 
        f.bar,
        f.drinker AS most_reg_drinker
    FROM 
        frequents f
    INNER JOIN (
        SELECT 
            bar, 
            MAX(times_a_week) AS max_times
        FROM 
            frequents
        GROUP BY 
            bar
    ) AS max_frequent ON f.bar = max_frequent.bar AND f.times_a_week = max_frequent.max_times
    ORDER BY 
        f.bar, f.drinker
) AS most_regular ON b.name = most_regular.bar
ORDER BY 
    total_num_drinker DESC, bar_name;
","{'student_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Eve'], ['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Dan'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
2673,3,N,"<Burg Cafe Restaurant> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Yorgun>
... ommitted ...
--------------------",SELECT bar FROM Serves GROUP BY bar HAVING COUNT(beer) >= 5;,"SELECT DISTINCT bar FROM serves 
WHERE (5 <= (SELECT COUNT(Distinct serves.beer) FROM serves));","{'student_result': [['Talk of the Town'], ['Satisfaction'], ['James Joyce Pub'], ['The Edge'], ['Down Under Pub']], 'teacher_result': [['Satisfaction']]}",Find the names of all bars that serve at least 5 beers.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
2440,9,N,"<Double India Pale Ale|2.5|GSV Gundernhausen Helga Kaiser> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Guinness|5.0|James Joyce Pub>
... ommitted ...
--------------------","SELECT beer.name, min_price, bar FROM beer LEFT OUTER JOIN (SELECT beer, MIN(price) AS min_price FROM serves GROUP BY beer) t ON beer.name = t.beer LEFT OUTER JOIN serves ON beer.name = serves.beer AND min_price = serves.price;","
with beer_and_min(title, min_val, bar_name) as (select A.beer, min_val, bar
	from ((select beer, min(price) as min_val
			from serves
				group by beer) A join serves on A.min_val = price))

select name, min_val, bar_name
from beer_and_min right outer join beer 
on beer_and_min.title = name","{'student_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Talk of the Town']], 'teacher_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Talk of the Town']]}","Find, for each beer, its lowest serving price and the bar(s) serving it at this price. The output should be a list of (beer, price, bar) triples. If some beer B is not served anywhere, you should still output (B, NULL, NULL).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
2461,7,N,"4-th tuple in answer should be <China Restaurant Kaiser|11|2.75|Alexa> instead of <El-Rayyan|11|2.95|Candace>
(there may be other errors too)
your output >>>>>
--------------------
<Donerhaus Dest|16|2.95|Faith>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","WITH barList AS (
    SELECT bar.name AS bar, frequents.drinker, serves.beer, serves.price, frequents.times_a_week
    FROM bar
    FULL OUTER JOIN frequents ON bar.name = frequents.bar
    FULL OUTER JOIN serves ON bar.name = serves.bar
)

SELECT bar, COALESCE(COUNT(DISTINCT drinker), 0) AS distinct_drinkers, COALESCE(AVG(price), null) AS avg_price, COALESCE((select drinker from frequents where bar=barList.bar order by times_a_week desc, drinker limit 1), null) as name
FROM barList
GROUP BY barList.bar
ORDER BY distinct_drinkers DESC, name DESC
","{'student_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
2560,9,N,"<Whitetail Wheat|3.0|Zur Staustufe> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Bender Beer|2.0|Pizzeria Avanti>
... ommitted ...
--------------------","SELECT beer.name, min_price, bar FROM beer LEFT OUTER JOIN (SELECT beer, MIN(price) AS min_price FROM serves GROUP BY beer) t ON beer.name = t.beer LEFT OUTER JOIN serves ON beer.name = serves.beer AND min_price = serves.price;","select distinct beer_prices.beer, beer_prices.price, serves.bar from (select beer, min(price) as price from serves group by serves.beer) as beer_prices, serves where beer_prices.price = serves.price ","{'student_result': [['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Budweiser', Decimal('2.20'), 'Talk of the Town'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Corona', Decimal('7.00'), 'Satisfaction']], 'teacher_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Talk of the Town']]}","Find, for each beer, its lowest serving price and the bar(s) serving it at this price. The output should be a list of (beer, price, bar) triples. If some beer B is not served anywhere, you should still output (B, NULL, NULL).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
2639,6,N,"<Ristorante lAperitivo. Win bar coffe bar lounge bar pizzeria|Bayram Kebab House> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<James Joyce Pub|Wein Zeit>
... ommitted ...
--------------------","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE NOT EXISTS (SELECT s1.beer FROM serves s1 WHERE s1.bar = b1.name AND NOT EXISTS (SELECT 1 FROM serves s2 WHERE s2.bar = b2.name AND s2.beer = s1.beer)) AND EXISTS (SELECT s2.beer FROM serves s2 WHERE s2.bar = b2.name AND NOT EXISTS (SELECT 1 FROM serves s1 WHERE s1.bar = b1.name AND s1.beer = s2.beer));","SELECT
    s1.bar AS bar1,
    s2.bar AS bar2
FROM
    serves s1
JOIN
    serves s2 ON s1.bar <> s2.bar
WHERE
    NOT EXISTS (
        SELECT 1
        FROM
            serves s3
        WHERE
            s3.bar = s2.bar
            AND s3.beer NOT IN (
                SELECT s4.beer
                FROM serves s4
                WHERE s4.bar = s1.bar
            )
    )

","{'student_result': [['Down Under Pub', 'The Edge'], ['Down Under Pub', 'The Edge'], ['Down Under Pub', 'The Edge'], ['Down Under Pub', 'Talk of the Town'], ['Down Under Pub', 'Talk of the Town'], ['Down Under Pub', 'The Edge'], ['Down Under Pub', 'The Edge'], ['Down Under Pub', 'The Edge'], ['Down Under Pub', 'Talk of the Town'], ['Down Under Pub', 'Talk of the Town'], ['Down Under Pub', 'The Edge'], ['Down Under Pub', 'The Edge'], ['Down Under Pub', 'The Edge'], ['Down Under Pub', 'Talk of the Town'], ['Down Under Pub', 'Talk of the Town'], ['The Edge', 'Down Under Pub'], ['The Edge', 'Down Under Pub'], ['The Edge', 'Down Under Pub'], ['The Edge', 'Talk of the Town'], ['The Edge', 'Talk of the Town'], ['The Edge', 'Down Under Pub'], ['The Edge', 'Down Under Pub'], ['The Edge', 'Down Under Pub'], ['The Edge', 'Talk of the Town'], ['The Edge', 'Talk of the Town'], ['The Edge', 'Down Under Pub'], ['The Edge', 'Down Under Pub'], ['The Edge', 'Down Under Pub'], ['The Edge', 'Talk of the Town'], ['The Edge', 'Talk of the Town'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'Talk of the Town'], ['Satisfaction', 'Talk of the Town'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'Talk of the Town'], ['Satisfaction', 'Talk of the Town'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'Talk of the Town'], ['Satisfaction', 'Talk of the Town'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'Talk of the Town'], ['Satisfaction', 'Talk of the Town'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'Talk of the Town'], ['Satisfaction', 'Talk of the Town']], 'teacher_result': [['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction']]}","Find all (bar1, bar2) pairs where the set of beers served at bar1 is a proper subset of the those served at bar2; i.e., bar2 serves every beer that bar1 serves and plus some more.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
2668,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Zum Buchhugel|72|3.166666667|Wesley>
(there may be other errors too)
your output >>>>>
--------------------
<Zum Buchhugel|72|3.166666667|Wesley>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","WITH ranked_drinkers AS (
    SELECT
        f.bar,
        f.drinker,
        ROW_NUMBER() OVER (PARTITION BY f.bar ORDER BY f.times_a_week DESC) AS rank
    FROM
        frequents f
)
SELECT
    f1.bar,
    SUM(f1.times_a_week) AS total_times_a_week,
    AVG(s1.price) AS average_beers_price,
    rd.drinker AS most_frequent_drinker
FROM
    frequents f1
JOIN
    serves s1 ON f1.bar = s1.bar
JOIN
    ranked_drinkers rd ON f1.bar = rd.bar AND rd.rank = 1
GROUP BY
    f1.bar, rd.drinker;
","{'student_result': [['Down Under Pub', 9, Decimal('3.4166666666666667'), 'Dan'], ['James Joyce Pub', 24, Decimal('3.6250000000000000'), 'Eve'], ['Satisfaction', 20, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 6, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 6, Decimal('3.7500000000000000'), 'Coy']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
2671,3,N,"<Burg Cafe Restaurant> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<James Joyce Pub>
... ommitted ...
--------------------",SELECT bar FROM Serves GROUP BY bar HAVING COUNT(beer) >= 5;,SELECT bar FROM serves WHERE (5<= (SELECT COUNT(Distinct serves.beer) FROM serves));,"{'student_result': [['Down Under Pub'], ['Down Under Pub'], ['Down Under Pub'], ['The Edge'], ['The Edge'], ['The Edge'], ['James Joyce Pub'], ['James Joyce Pub'], ['James Joyce Pub'], ['James Joyce Pub'], ['Satisfaction'], ['Satisfaction'], ['Satisfaction'], ['Satisfaction'], ['Satisfaction'], ['Talk of the Town'], ['Talk of the Town']], 'teacher_result': [['Satisfaction']]}",Find the names of all bars that serve at least 5 beers.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
2731,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Adel.es Restaurant|Dylan|1.0|1>
(there may be other errors too)
your output >>>>>
--------------------
<Adel.es Restaurant|Dylan|1.0|1>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","WITH CTE AS (
    SELECT bar, COUNT(*) as total_frequents
    FROM frequents
    GROUP BY bar
),

CTE2 AS (
    SELECT bar, AVG(price) as average_price
    FROM serves
    GROUP BY bar
),

CTE3 AS(
    SELECT 
        bar,
        drinker,
        COUNT(*) AS freq_count,
        RANK() OVER (PARTITION BY bar ORDER BY COUNT(*) DESC) AS rank
    FROM frequents
    GROUP BY bar, drinker
)

SELECT * 
FROM CTE3

","{'student_result': [['Down Under Pub', 'Coy', 1, 1], ['Down Under Pub', 'Dan', 1, 1], ['James Joyce Pub', 'Dan', 1, 1], ['James Joyce Pub', 'Eve', 1, 1], ['James Joyce Pub', 'Ben', 1, 1], ['James Joyce Pub', 'Amy', 1, 1], ['Satisfaction', 'Ben', 1, 1], ['Satisfaction', 'Dan', 1, 1], ['Talk of the Town', 'Ben', 1, 1], ['Talk of the Town', 'Dan', 1, 1], ['The Edge', 'Coy', 1, 1], ['The Edge', 'Dan', 1, 1]], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
2742,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Adel.es Restaurant|3|3.0|Dylan>
(there may be other errors too)
your output >>>>>
--------------------
<Adel.es Restaurant|3|3.0|Dylan>
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","WITH avg_price AS (
    SELECT s.bar, AVG(s.price) AS average_beer_price
    FROM serves s
    GROUP BY s.bar
), total_drinkers AS (
    SELECT f1.bar, COUNT(f1.drinker) AS total_drinker_frequents
    FROM frequents f1
    GROUP BY f1.bar
), most_regular_drinker AS (
    SELECT f2.bar,f2.drinker, RANK() OVER (ORDER BY f2.bar, f2.times_a_week DESC, f2.drinker ASC) AS rank
    FROM frequents f2
)
SELECT
    b.name AS bar,
    td.total_drinker_frequents AS total_num_drinker,
    ap.average_beer_price,
    mrd.drinker AS most_reg_drinker
FROM bar b
JOIN total_drinkers td ON b.name = td.bar
JOIN avg_price ap ON b.name = ap.bar
JOIN most_regular_drinker mrd ON b.name = mrd.bar AND mrd.rank = 1
ORDER BY 
    total_num_drinker DESC, 
    b.name ASC;
","{'student_result': [['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
2776,6,N,"<mauergasse|Spektrum> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Casanostra|Dschingis Khan Au Garden>
... ommitted ...
--------------------","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE NOT EXISTS (SELECT s1.beer FROM serves s1 WHERE s1.bar = b1.name AND NOT EXISTS (SELECT 1 FROM serves s2 WHERE s2.bar = b2.name AND s2.beer = s1.beer)) AND EXISTS (SELECT s2.beer FROM serves s2 WHERE s2.bar = b2.name AND NOT EXISTS (SELECT 1 FROM serves s1 WHERE s1.bar = b1.name AND s1.beer = s2.beer));","select distinct s1.bar, s2.bar from serves s1 join serves s2 on s1.bar < s2.bar where s1.beer = s2.beer ","{'student_result': [['James Joyce Pub', 'The Edge'], ['Down Under Pub', 'James Joyce Pub'], ['James Joyce Pub', 'Satisfaction'], ['Down Under Pub', 'The Edge'], ['Down Under Pub', 'Talk of the Town'], ['Satisfaction', 'The Edge'], ['Down Under Pub', 'Satisfaction'], ['James Joyce Pub', 'Talk of the Town'], ['Satisfaction', 'Talk of the Town'], ['Talk of the Town', 'The Edge']], 'teacher_result': [['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction']]}","Find all (bar1, bar2) pairs where the set of beers served at bar1 is a proper subset of the those served at bar2; i.e., bar2 serves every beer that bar1 serves and plus some more.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
2795,3,N,"<Late Night Pizzeria> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Adel.es Restaurant>
... ommitted ...
--------------------",SELECT bar FROM Serves GROUP BY bar HAVING COUNT(beer) >= 5;,"SELECT
	S.BAR
FROM
	SERVES S
GROUP BY
	S.BAR
HAVING
	COUNT(DISTINCT S.BEER) > 1;","{'student_result': [['Down Under Pub'], ['James Joyce Pub'], ['Satisfaction'], ['Talk of the Town'], ['The Edge']], 'teacher_result': [['Satisfaction']]}",Find the names of all bars that serve at least 5 beers.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
2824,6,N,"<Rottger|6870 Diana Stream Apt. 577> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<James Joyce Pub|43566 Yoder Points>
... ommitted ...
--------------------","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE NOT EXISTS (SELECT s1.beer FROM serves s1 WHERE s1.bar = b1.name AND NOT EXISTS (SELECT 1 FROM serves s2 WHERE s2.bar = b2.name AND s2.beer = s1.beer)) AND EXISTS (SELECT s2.beer FROM serves s2 WHERE s2.bar = b2.name AND NOT EXISTS (SELECT 1 FROM serves s1 WHERE s1.bar = b1.name AND s1.beer = s2.beer));",select * from bar,"{'student_result': [['Down Under Pub', '802 W. Main Street'], ['The Edge', '108 Morris Street'], ['James Joyce Pub', '912 W. Main Street'], ['Satisfaction', '905 W. Main Street'], ['Talk of the Town', '108 E. Main Street']], 'teacher_result': [['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction']]}","Find all (bar1, bar2) pairs where the set of beers served at bar1 is a proper subset of the those served at bar2; i.e., bar2 serves every beer that bar1 serves and plus some more.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
2827,6,N,"<Yang-Ji|Grohe> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Qbar|Enchilada Kassel>
... ommitted ...
--------------------","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE NOT EXISTS (SELECT s1.beer FROM serves s1 WHERE s1.bar = b1.name AND NOT EXISTS (SELECT 1 FROM serves s2 WHERE s2.bar = b2.name AND s2.beer = s1.beer)) AND EXISTS (SELECT s2.beer FROM serves s2 WHERE s2.bar = b2.name AND NOT EXISTS (SELECT 1 FROM serves s1 WHERE s1.bar = b1.name AND s1.beer = s2.beer));","SELECT s1.bar AS bar1, s2.bar AS bar2
FROM serves s1
JOIN serves s2 ON s1.beer = s2.beer
WHERE s1.bar <> s2.bar
GROUP BY s1.bar, s2.bar
HAVING COUNT(s1.beer) < (
    SELECT COUNT(*)
    FROM serves s3
    WHERE s3.bar = s1.bar
)
AND COUNT(s1.beer) = (
    SELECT COUNT(*)
    FROM serves s4
    WHERE s4.bar = s1.bar AND s4.beer IN (
        SELECT beer
        FROM serves s5
        WHERE s5.bar = s2.bar
    )
);
","{'student_result': [['Satisfaction', 'James Joyce Pub'], ['James Joyce Pub', 'Satisfaction'], ['Talk of the Town', 'James Joyce Pub'], ['Satisfaction', 'Down Under Pub'], ['The Edge', 'Talk of the Town'], ['The Edge', 'James Joyce Pub'], ['Down Under Pub', 'Talk of the Town'], ['Satisfaction', 'The Edge'], ['James Joyce Pub', 'The Edge'], ['James Joyce Pub', 'Talk of the Town'], ['Satisfaction', 'Talk of the Town'], ['Down Under Pub', 'James Joyce Pub'], ['James Joyce Pub', 'Down Under Pub']], 'teacher_result': [['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction']]}","Find all (bar1, bar2) pairs where the set of beers served at bar1 is a proper subset of the those served at bar2; i.e., bar2 serves every beer that bar1 serves and plus some more.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
2845,9,N,"<Warrior IPA|3.25|Down Under Pub> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<471 Extra ESB|2.25|Restaurant Hotel Bessunger Forst>
... ommitted ...
--------------------","SELECT beer.name, min_price, bar FROM beer LEFT OUTER JOIN (SELECT beer, MIN(price) AS min_price FROM serves GROUP BY beer) t ON beer.name = t.beer LEFT OUTER JOIN serves ON beer.name = serves.beer AND min_price = serves.price;","SELECT beer, MIN(price) AS lowest_price, bar
FROM serves
GROUP BY beer, bar
ORDER BY beer;
","{'student_result': [['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Amstel', Decimal('1.75'), 'Satisfaction'], ['Amstel', Decimal('1.50'), 'Talk of the Town'], ['Amstel', Decimal('1.75'), 'The Edge'], ['Budweiser', Decimal('2.20'), 'Talk of the Town'], ['Budweiser', Decimal('2.50'), 'The Edge'], ['Budweiser', Decimal('2.25'), 'Satisfaction'], ['Budweiser', Decimal('2.25'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Dixie', Decimal('3.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Full Sail', Decimal('7.75'), 'Satisfaction']], 'teacher_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Talk of the Town']]}","Find, for each beer, its lowest serving price and the bar(s) serving it at this price. The output should be a list of (beer, price, bar) triples. If some beer B is not served anywhere, you should still output (B, NULL, NULL).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
2896,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Pronto Pizza|1|2.8125|Ben>
(there may be other errors too)
your output >>>>>
--------------------
<Pronto Pizza|1|2.8125|Ben>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","WITH CTE AS (
    SELECT bar, COUNT(*) as total_frequents
    FROM frequents
    GROUP BY bar
),

CTE2 AS (
    SELECT bar, AVG(price) as average_price
    FROM serves
    GROUP BY bar
),

CTE3 AS (
    SELECT bar, MAX(times_a_week) AS max_times_a_week
    FROM frequents
    GROUP BY bar
),

CTE4 AS(
    SELECT * 
    FROM frequents
    ORDER BY drinker
),

CTE5 AS(
    SELECT CTE3.bar, CTE4.drinker
    FROM CTE3, CTE4
    WHERE CTE3.bar = CTE4.bar and CTE3.max_times_a_week = CTE4.times_a_week
),

CTE6 AS(
    SELECT bar, MIN(drinker) as min
    FROM CTE5
    GROUP BY bar
)

SELECT CTE.bar, CTE.total_frequents, CTE2.average_price, CTE6.min
FROM CTE, CTE2, CTE6
WHERE CTE.bar = CTE2.bar AND CTE2.bar = CTE6.bar 
ORDER BY CTE.total_frequents","{'student_result': [['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
2899,6,N,"<Alte Liebe|Pik-Dame> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Satisfaction|James Joyce Pub>
... ommitted ...
--------------------","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE NOT EXISTS (SELECT s1.beer FROM serves s1 WHERE s1.bar = b1.name AND NOT EXISTS (SELECT 1 FROM serves s2 WHERE s2.bar = b2.name AND s2.beer = s1.beer)) AND EXISTS (SELECT s2.beer FROM serves s2 WHERE s2.bar = b2.name AND NOT EXISTS (SELECT 1 FROM serves s1 WHERE s1.bar = b1.name AND s1.beer = s2.beer));","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE(SELECT COUNT(*) FROM serves WHERE bar = b1.name) < (SELECT COUNT(*) FROM serves WHERE bar = b2.name);","{'student_result': [['Down Under Pub', 'James Joyce Pub'], ['Down Under Pub', 'Satisfaction'], ['The Edge', 'James Joyce Pub'], ['The Edge', 'Satisfaction'], ['James Joyce Pub', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'James Joyce Pub'], ['Talk of the Town', 'Satisfaction']], 'teacher_result': [['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction']]}","Find all (bar1, bar2) pairs where the set of beers served at bar1 is a proper subset of the those served at bar2; i.e., bar2 serves every beer that bar1 serves and plus some more.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
2914,2,N,"answer should have 1 instead of 11 occurrence(s) of <Ben>
(there may be other errors too)
your output >>>>>
--------------------
<Ben>
... ommitted ...
--------------------",SELECT DISTINCT drinker FROM frequents NATURAL JOIN serves WHERE beer = 'Corona' AND drinker not in (SELECT drinker FROM Likes WHERE beer = 'Corona');,"SELECT d.name
FROM drinker d
JOIN frequents f ON d.name = f.drinker
JOIN serves s ON f.bar = s.bar
WHERE s.beer = 'Corona'
  AND d.name NOT IN (
    SELECT l.drinker
    FROM likes l
    WHERE l.beer = 'Corona'
  );

","{'student_result': [['Ben'], ['Ben'], ['Coy'], ['Coy']], 'teacher_result': [['Ben'], ['Coy']]}",Find the names of all drinkers that do not like Corona but frequent a bar that serves Corona.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
3021,6,N,"<Bomatscher Elb-Panoramagaststatte Und Pension|Ratsstuben Burgerhaus> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Akebono|Fratelli Pizza Pasta Bar>
... ommitted ...
--------------------","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE NOT EXISTS (SELECT s1.beer FROM serves s1 WHERE s1.bar = b1.name AND NOT EXISTS (SELECT 1 FROM serves s2 WHERE s2.bar = b2.name AND s2.beer = s1.beer)) AND EXISTS (SELECT s2.beer FROM serves s2 WHERE s2.bar = b2.name AND NOT EXISTS (SELECT 1 FROM serves s1 WHERE s1.bar = b1.name AND s1.beer = s2.beer));","SELECT DISTINCT s1.bar AS bar1, s2.bar AS bar2
FROM serves s1
JOIN serves s2 ON s1.beer = s2.beer AND s1.bar <> s2.bar
WHERE NOT EXISTS (
    SELECT 1
    FROM serves s
    WHERE s.bar = s2.bar
    AND s.beer NOT IN (
        SELECT beer
        FROM serves
        WHERE bar = s1.bar
    )
);
","{'student_result': [['Down Under Pub', 'Talk of the Town'], ['Down Under Pub', 'The Edge'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'Talk of the Town'], ['Satisfaction', 'The Edge'], ['The Edge', 'Down Under Pub'], ['The Edge', 'Talk of the Town']], 'teacher_result': [['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction']]}","Find all (bar1, bar2) pairs where the set of beers served at bar1 is a proper subset of the those served at bar2; i.e., bar2 serves every beer that bar1 serves and plus some more.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
3022,6,N,"<Kaffe Haus Madlen|Pizzeria Carlo> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Qbar|Enchilada Kassel>
... ommitted ...
--------------------","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE NOT EXISTS (SELECT s1.beer FROM serves s1 WHERE s1.bar = b1.name AND NOT EXISTS (SELECT 1 FROM serves s2 WHERE s2.bar = b2.name AND s2.beer = s1.beer)) AND EXISTS (SELECT s2.beer FROM serves s2 WHERE s2.bar = b2.name AND NOT EXISTS (SELECT 1 FROM serves s1 WHERE s1.bar = b1.name AND s1.beer = s2.beer));","select distinct serves1.bar, serves2.bar
from serves as serves1 RIGHT OUTER JOIN serves as serves2
ON serves1.beer = serves2.beer and serves1.bar <> serves2.bar","{'student_result': [['Satisfaction', 'James Joyce Pub'], ['James Joyce Pub', 'Satisfaction'], [None, 'Satisfaction'], ['Talk of the Town', 'James Joyce Pub'], ['Satisfaction', 'Down Under Pub'], ['The Edge', 'Talk of the Town'], ['The Edge', 'James Joyce Pub'], ['Down Under Pub', 'Talk of the Town'], ['Satisfaction', 'The Edge'], ['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['James Joyce Pub', 'The Edge'], ['James Joyce Pub', 'Talk of the Town'], ['Talk of the Town', 'Satisfaction'], ['Satisfaction', 'Talk of the Town'], ['Talk of the Town', 'The Edge'], ['Down Under Pub', 'James Joyce Pub'], ['Down Under Pub', 'The Edge'], ['Talk of the Town', 'Down Under Pub'], ['The Edge', 'Down Under Pub'], [None, 'James Joyce Pub'], ['James Joyce Pub', 'Down Under Pub']], 'teacher_result': [['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction']]}","Find all (bar1, bar2) pairs where the set of beers served at bar1 is a proper subset of the those served at bar2; i.e., bar2 serves every beer that bar1 serves and plus some more.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
3026,6,N,"<Kaffe Haus Madlen|Pizzeria Carlo> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<James Joyce Pub|La Terrazza>
... ommitted ...
--------------------","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE NOT EXISTS (SELECT s1.beer FROM serves s1 WHERE s1.bar = b1.name AND NOT EXISTS (SELECT 1 FROM serves s2 WHERE s2.bar = b2.name AND s2.beer = s1.beer)) AND EXISTS (SELECT s2.beer FROM serves s2 WHERE s2.bar = b2.name AND NOT EXISTS (SELECT 1 FROM serves s1 WHERE s1.bar = b1.name AND s1.beer = s2.beer));","SELECT s1.bar AS bar1, s2.bar AS bar2
FROM serves s1
JOIN serves s2 ON s1.beer = s2.beer AND s1.bar <> s2.bar
WHERE EXISTS (
    SELECT 1
    FROM serves s
    WHERE s.bar = s2.bar
    AND s.beer NOT IN (
        SELECT beer
        FROM serves
        WHERE bar = s1.bar
    )
);
","{'student_result': [['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'James Joyce Pub'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'James Joyce Pub'], ['The Edge', 'Satisfaction'], ['The Edge', 'James Joyce Pub'], ['The Edge', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['The Edge', 'James Joyce Pub'], ['James Joyce Pub', 'Talk of the Town'], ['James Joyce Pub', 'Satisfaction'], ['James Joyce Pub', 'The Edge'], ['James Joyce Pub', 'Down Under Pub'], ['James Joyce Pub', 'Satisfaction'], ['James Joyce Pub', 'The Edge'], ['James Joyce Pub', 'Down Under Pub'], ['James Joyce Pub', 'Satisfaction'], ['Satisfaction', 'James Joyce Pub'], ['Satisfaction', 'James Joyce Pub'], ['Satisfaction', 'James Joyce Pub'], ['Talk of the Town', 'Satisfaction'], ['Talk of the Town', 'James Joyce Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'Satisfaction'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Down Under Pub']], 'teacher_result': [['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction']]}","Find all (bar1, bar2) pairs where the set of beers served at bar1 is a proper subset of the those served at bar2; i.e., bar2 serves every beer that bar1 serves and plus some more.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
3028,6,N,"<None|Bockenheimer Stubb> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Zauberwald|Grand Cru>
... ommitted ...
--------------------","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE NOT EXISTS (SELECT s1.beer FROM serves s1 WHERE s1.bar = b1.name AND NOT EXISTS (SELECT 1 FROM serves s2 WHERE s2.bar = b2.name AND s2.beer = s1.beer)) AND EXISTS (SELECT s2.beer FROM serves s2 WHERE s2.bar = b2.name AND NOT EXISTS (SELECT 1 FROM serves s1 WHERE s1.bar = b1.name AND s1.beer = s2.beer));","select distinct serves1.bar, bar.name
from serves as serves1 RIGHT OUTER JOIN bar 
ON serves1.beer = bar.name","{'student_result': [[None, 'Down Under Pub'], [None, 'James Joyce Pub'], [None, 'Satisfaction'], [None, 'Talk of the Town'], [None, 'The Edge']], 'teacher_result': [['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction']]}","Find all (bar1, bar2) pairs where the set of beers served at bar1 is a proper subset of the those served at bar2; i.e., bar2 serves every beer that bar1 serves and plus some more.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
3055,2,N,"answer should have 1 instead of 66 occurrence(s) of <Ben>
(there may be other errors too)
your output >>>>>
--------------------
<Ben>
... ommitted ...
--------------------",SELECT DISTINCT drinker FROM frequents NATURAL JOIN serves WHERE beer = 'Corona' AND drinker not in (SELECT drinker FROM Likes WHERE beer = 'Corona');,"select l.drinker 
from likes l, serves s, frequents f
where f.bar = s.bar and f.drinker=l.drinker and s.beer = 'Corona' and l.drinker not in (select drinker from likes where beer='Corona');","{'student_result': [['Coy'], ['Coy'], ['Ben'], ['Ben'], ['Ben'], ['Ben']], 'teacher_result': [['Ben'], ['Coy']]}",Find the names of all drinkers that do not like Corona but frequent a bar that serves Corona.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
3120,9,N,"<Talk of the Town|Cold Hop|2.25> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Zum Stiftskammerer|God Jul - Winter Ale|2.5>
... ommitted ...
--------------------","SELECT beer.name, min_price, bar FROM beer LEFT OUTER JOIN (SELECT beer, MIN(price) AS min_price FROM serves GROUP BY beer) t ON beer.name = t.beer LEFT OUTER JOIN serves ON beer.name = serves.beer AND min_price = serves.price;","SELECT * from serves
EXCEPT
SELECT s1.bar, s1.beer, s1.price FROM serves AS s1, serves as S2
	WHERE s1.beer = s2.beer AND s1.price > s2.price","{'student_result': [['James Joyce Pub', 'Amstel', Decimal('1.00')], ['Talk of the Town', 'Budweiser', Decimal('2.20')], ['James Joyce Pub', 'Corona', Decimal('7.00')], ['Satisfaction', 'Dixie', Decimal('2.75')], ['Satisfaction', 'Full Sail', Decimal('7.75')], ['Satisfaction', 'Corona', Decimal('7.00')], ['Down Under Pub', 'Corona', Decimal('7.00')], ['James Joyce Pub', 'Erdinger', Decimal('3.50')], ['Down Under Pub', 'Amstel', Decimal('1.00')], ['The Edge', 'Corona', Decimal('7.00')]], 'teacher_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Talk of the Town']]}","Find, for each beer, its lowest serving price and the bar(s) serving it at this price. The output should be a list of (beer, price, bar) triples. If some beer B is not served anywhere, you should still output (B, NULL, NULL).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
3186,6,N,"<Papanova|Mr. Thai Imbiss> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<La Terrazza|James Joyce Pub>
... ommitted ...
--------------------","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE NOT EXISTS (SELECT s1.beer FROM serves s1 WHERE s1.bar = b1.name AND NOT EXISTS (SELECT 1 FROM serves s2 WHERE s2.bar = b2.name AND s2.beer = s1.beer)) AND EXISTS (SELECT s2.beer FROM serves s2 WHERE s2.bar = b2.name AND NOT EXISTS (SELECT 1 FROM serves s1 WHERE s1.bar = b1.name AND s1.beer = s2.beer));","select a.bar, b.bar
from serves a right outer join serves b
on a.bar != b.bar and a.beer=b.beer;","{'student_result': [['Talk of the Town', 'Down Under Pub'], ['Satisfaction', 'Down Under Pub'], ['James Joyce Pub', 'Down Under Pub'], ['The Edge', 'Down Under Pub'], ['Talk of the Town', 'Down Under Pub'], ['Satisfaction', 'Down Under Pub'], ['The Edge', 'Down Under Pub'], ['Satisfaction', 'Down Under Pub'], ['James Joyce Pub', 'Down Under Pub'], ['The Edge', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Satisfaction', 'The Edge'], ['James Joyce Pub', 'The Edge'], ['Down Under Pub', 'The Edge'], ['Talk of the Town', 'The Edge'], ['Satisfaction', 'The Edge'], ['Down Under Pub', 'The Edge'], ['Satisfaction', 'The Edge'], ['James Joyce Pub', 'The Edge'], ['Down Under Pub', 'The Edge'], ['Talk of the Town', 'James Joyce Pub'], ['Satisfaction', 'James Joyce Pub'], ['The Edge', 'James Joyce Pub'], ['Down Under Pub', 'James Joyce Pub'], ['Satisfaction', 'James Joyce Pub'], ['The Edge', 'James Joyce Pub'], ['Down Under Pub', 'James Joyce Pub'], ['Satisfaction', 'James Joyce Pub'], [None, 'James Joyce Pub'], ['Talk of the Town', 'Satisfaction'], ['James Joyce Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Down Under Pub', 'Satisfaction'], ['Talk of the Town', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Down Under Pub', 'Satisfaction'], ['James Joyce Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Down Under Pub', 'Satisfaction'], ['James Joyce Pub', 'Satisfaction'], [None, 'Satisfaction'], ['Satisfaction', 'Talk of the Town'], ['James Joyce Pub', 'Talk of the Town'], ['The Edge', 'Talk of the Town'], ['Down Under Pub', 'Talk of the Town'], ['Satisfaction', 'Talk of the Town'], ['The Edge', 'Talk of the Town'], ['Down Under Pub', 'Talk of the Town']], 'teacher_result': [['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction']]}","Find all (bar1, bar2) pairs where the set of beers served at bar1 is a proper subset of the those served at bar2; i.e., bar2 serves every beer that bar1 serves and plus some more.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
3189,6,N,"<RISTORANTE BELLA VISTA IN WI-KLOPPENHEIM|Speisegaststatte Feldberg Gaststatten> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<James Joyce Pub|La Terrazza>
... ommitted ...
--------------------","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE NOT EXISTS (SELECT s1.beer FROM serves s1 WHERE s1.bar = b1.name AND NOT EXISTS (SELECT 1 FROM serves s2 WHERE s2.bar = b2.name AND s2.beer = s1.beer)) AND EXISTS (SELECT s2.beer FROM serves s2 WHERE s2.bar = b2.name AND NOT EXISTS (SELECT 1 FROM serves s1 WHERE s1.bar = b1.name AND s1.beer = s2.beer));","select a.bar, b.bar
from serves a left outer join serves b
on a.bar != b.bar and a.beer=b.beer;","{'student_result': [['Down Under Pub', 'Talk of the Town'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'James Joyce Pub'], ['Down Under Pub', 'The Edge'], ['Down Under Pub', 'Talk of the Town'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'The Edge'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'James Joyce Pub'], ['Down Under Pub', 'The Edge'], ['The Edge', 'Talk of the Town'], ['The Edge', 'Satisfaction'], ['The Edge', 'James Joyce Pub'], ['The Edge', 'Down Under Pub'], ['The Edge', 'Talk of the Town'], ['The Edge', 'Satisfaction'], ['The Edge', 'Down Under Pub'], ['The Edge', 'Satisfaction'], ['The Edge', 'James Joyce Pub'], ['The Edge', 'Down Under Pub'], ['James Joyce Pub', 'Talk of the Town'], ['James Joyce Pub', 'Satisfaction'], ['James Joyce Pub', 'The Edge'], ['James Joyce Pub', 'Down Under Pub'], ['James Joyce Pub', 'Satisfaction'], ['James Joyce Pub', 'The Edge'], ['James Joyce Pub', 'Down Under Pub'], ['James Joyce Pub', 'Satisfaction'], ['James Joyce Pub', None], ['Satisfaction', 'Talk of the Town'], ['Satisfaction', 'James Joyce Pub'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'Talk of the Town'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'James Joyce Pub'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'James Joyce Pub'], ['Satisfaction', None], ['Talk of the Town', 'Satisfaction'], ['Talk of the Town', 'James Joyce Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'Satisfaction'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Down Under Pub']], 'teacher_result': [['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction']]}","Find all (bar1, bar2) pairs where the set of beers served at bar1 is a proper subset of the those served at bar2; i.e., bar2 serves every beer that bar1 serves and plus some more.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
3207,6,N,"<Lieferservice & Doneria la Cosa Nostra|Hansenhaus links> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Adel.es Restaurant|Algarve>
... ommitted ...
--------------------","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE NOT EXISTS (SELECT s1.beer FROM serves s1 WHERE s1.bar = b1.name AND NOT EXISTS (SELECT 1 FROM serves s2 WHERE s2.bar = b2.name AND s2.beer = s1.beer)) AND EXISTS (SELECT s2.beer FROM serves s2 WHERE s2.bar = b2.name AND NOT EXISTS (SELECT 1 FROM serves s1 WHERE s1.bar = b1.name AND s1.beer = s2.beer));","SELECT DISTINCT s1.bar AS bar1, s2.bar AS bar2
FROM serves s1
JOIN serves s2 ON s1.beer = s2.beer
WHERE s1.bar <> s2.bar
  AND (
    (SELECT COUNT(DISTINCT beer) FROM serves WHERE bar = s1.bar) =
    (SELECT COUNT(DISTINCT beer) FROM serves WHERE bar = s2.bar)
  );
","{'student_result': [['Down Under Pub', 'The Edge'], ['The Edge', 'Down Under Pub']], 'teacher_result': [['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction']]}","Find all (bar1, bar2) pairs where the set of beers served at bar1 is a proper subset of the those served at bar2; i.e., bar2 serves every beer that bar1 serves and plus some more.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
3222,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Adel.es Restaurant|3|3.0|Dylan>
(there may be other errors too)
your output >>>>>
--------------------
<Adel.es Restaurant|3|3.0|Dylan>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","/* input your answer in this cell: */

WITH 
Bar_Drinkers AS (
    SELECT f.bar, COUNT(f.drinker) AS total_num_drinker
    FROM frequents f
    GROUP BY f.bar
),
Avg_Bar_Price AS (
    SELECT s.bar, AVG(s.price) AS avg_price
    FROM serves s
    GROUP BY s.bar
),
Max_Visits AS (
    SELECT f.drinker, MAX(f.times_a_week) AS highest_visits
    FROM frequents f
    GROUP BY f.drinker
),
Most_Freq_Drinker AS (
    SELECT f.bar, f.drinker AS most_reg_drinker
    FROM frequents f
    JOIN Max_Visits mv ON f.drinker = mv.drinker AND f.times_a_week = mv.highest_visits    
)

SELECT b.name, bd.total_num_drinker, abp.avg_price, mfd.most_reg_drinker
FROM bar b
LEFT JOIN Bar_Drinkers bd ON b.name = bd.bar
LEFT JOIN Avg_Bar_Price abp ON b.name = abp.bar
LEFT JOIN Most_Freq_Drinker mfd ON b.name = mfd.bar
ORDER BY b.name ASC;","{'student_result': [['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Coy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Eve'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Dan'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
3225,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Zum Heidekuppel|9|2.916666667|Joshua>
(there may be other errors too)
your output >>>>>
--------------------
<Zum Heidekuppel|9|2.916666667|Joshua>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","with temp(bar, total_num_drinker, avg_price, most_reg) as (select f.bar, count(f.drinker), avg(s.price), max(f.times_a_week) from frequents f, serves s where f.bar=s.bar group by f.bar)
select  f.bar, total_num_drinker, avg_price, f.drinker as most_reg_drinker
from frequents f, temp t
where f.bar= t.bar and f.times_a_week = t.most_reg;","{'student_result': [['James Joyce Pub', 16, Decimal('3.6250000000000000'), 'Amy'], ['Satisfaction', 10, Decimal('4.3000000000000000'), 'Ben'], ['The Edge', 6, Decimal('3.7500000000000000'), 'Coy'], ['Down Under Pub', 6, Decimal('3.4166666666666667'), 'Dan'], ['The Edge', 6, Decimal('3.7500000000000000'), 'Dan'], ['Satisfaction', 10, Decimal('4.3000000000000000'), 'Dan'], ['Talk of the Town', 4, Decimal('1.8500000000000000'), 'Dan'], ['James Joyce Pub', 16, Decimal('3.6250000000000000'), 'Eve']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
3226,7,N,"2-th tuple in answer should be <Gaststatte Riedbahnklause|12|2.5625|Brendan> instead of <Donerhaus Dest|16|2.95|Christian>
(there may be other errors too)
your output >>>>>
--------------------
<Donerhaus Dest|16|2.95|Faith>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","/* input your answer in this cell: */

WITH 
Bar_Drinkers AS (
    SELECT f.bar, COUNT(f.drinker) AS total_num_drinker
    FROM frequents f
    GROUP BY f.bar
),
Avg_Bar_Price AS (
    SELECT s.bar, AVG(s.price) AS avg_price
    FROM serves s
    GROUP BY s.bar
),
Max_Visits AS (
    SELECT f.drinker, MAX(f.times_a_week) AS highest_visits
    FROM frequents f
    GROUP BY f.drinker
),
Most_Freq_Drinker AS (
    SELECT f.bar, f.drinker AS most_reg_drinker
    FROM frequents f
    JOIN Max_Visits mv ON f.drinker = mv.drinker AND f.times_a_week = mv.highest_visits    
)

SELECT b.name, bd.total_num_drinker, abp.avg_price, mfd.most_reg_drinker
FROM bar b
LEFT JOIN Bar_Drinkers bd ON b.name = bd.bar
LEFT JOIN Avg_Bar_Price abp ON b.name = abp.bar
LEFT JOIN Most_Freq_Drinker mfd ON b.name = mfd.bar
ORDER BY total_num_drinker DESC, b.name ASC;","{'student_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Eve'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Coy'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Dan'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
3231,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Adel.es Restaurant|12|3.0|Dylan>
(there may be other errors too)
your output >>>>>
--------------------
<Adel.es Restaurant|12|3.0|Dylan>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","with temp(bar, total_num_drinker, avg_price, most_reg) as (select f.bar, count(f.drinker), avg(s.price), max(f.times_a_week) from frequents f, serves s where f.bar=s.bar group by f.bar)
select  f.bar, total_num_drinker, avg_price, min(f.drinker) as most_reg_drinker
from frequents f, temp t
where f.bar= t.bar and f.times_a_week = t.most_reg
group by f.bar, total_num_drinker, avg_price;","{'student_result': [['Down Under Pub', 6, Decimal('3.4166666666666667'), 'Dan'], ['James Joyce Pub', 16, Decimal('3.6250000000000000'), 'Amy'], ['Satisfaction', 10, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 4, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 6, Decimal('3.7500000000000000'), 'Coy']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
3250,8,N,"1-th tuple in answer should be <471 Extra ESB|0.25|2.375> instead of <471 Extra ESB|-0.25|2.375>
(there may be other errors too)
your output >>>>>
--------------------
<471 Extra ESB|-0.25|2.375>
... ommitted ...
--------------------","SELECT beer, MAX(price) - MIN(price) AS price_gap, AVG(price) AS avg_price FROM serves WHERE beer IN (SELECT s.beer FROM serves s, frequents f WHERE s.bar = f.bar AND f.drinker LIKE 'B%' GROUP BY s.beer HAVING COUNT(DISTINCT s.bar) >= 2) GROUP BY beer ORDER BY beer;","with temp (bar, beer, price) as (select s.bar, s.beer, s.price from serves s, frequents f where s.bar = f.bar and f.drinker like 'B%')
select  beer, min(price) -max(price), avg(price)
from temp
group by beer
having count(distinct bar) >=2;","{'student_result': [['Amstel', Decimal('-0.75'), Decimal('1.4166666666666667')], ['Budweiser', Decimal('-0.05'), Decimal('2.2250000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('-0.25'), Decimal('2.8750000000000000')]], 'teacher_result': [['Amstel', Decimal('0.75'), Decimal('1.4000000000000000')], ['Budweiser', Decimal('0.30'), Decimal('2.3000000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')]]}","Find, for each beer served at least 2 bars that frequented by drinkers whose name starts with 'B', the difference of maximum and minimum (price gap) and average price of the beers in all serving bars, order by bar name. I.e., your query should output beer, price_gap, and avg_price.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
3259,1,N,"<Trevor> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Ben>
... ommitted ...
--------------------",SELECT DISTINCT bar FROM Serves WHERE (beer = 'Amstel' OR beer = 'Corona') AND price > 2;,"SELECT frequents.drinker FROM frequents, (SELECT bar FROM serves WHERE serves.beer= 'Corona') AS servesCorona , (SELECT drinker FROM likes WHERE likes.beer != 'Corona') AS likesFilter WHERE frequents.bar = servesCorona.bar AND frequents.drinker = likesFilter.drinker","{'student_result': [['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Coy'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Coy'], ['Eve'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Ben'], ['Ben'], ['Amy'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Ben'], ['Ben']], 'teacher_result': [['Down Under Pub'], ['James Joyce Pub'], ['Satisfaction'], ['The Edge']]}",Find names of bars that serve either Amstel or Corona at price higher than $2.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
3265,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Donerhaus Dest|16|2.95|Ben>
(there may be other errors too)
your output >>>>>
--------------------
<Donerhaus Dest|16|2.95|Ben>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","WITH 
All_Bars AS (
    SELECT DISTINCT b.name
    FROM bar b
),
Bar_Drinkers AS (
    SELECT f.bar, COUNT(f.drinker) AS total_num_drinker
    FROM frequents f
    GROUP BY f.bar
),
Avg_Bar_Price AS (
    SELECT s.bar, AVG(s.price) AS avg_price
    FROM serves s
    GROUP BY s.bar
),
Max_Visits AS (
    SELECT f.drinker, MAX(f.times_a_week) AS highest_visits
    FROM frequents f
    GROUP BY f.drinker
),
Most_Freq_Drinker AS (
    SELECT f.bar, f.drinker AS most_reg_drinker
    FROM frequents f, Max_Visits mv
    WHERE f.drinker = mv.drinker AND f.times_a_week = mv.highest_visits 
)


SELECT DISTINCT b.name, bd.total_num_drinker, abp.avg_price, mfd.most_reg_drinker
FROM All_Bars b
LEFT JOIN Bar_Drinkers bd ON b.name = bd.bar
LEFT JOIN Avg_Bar_Price abp ON b.name = abp.bar
LEFT JOIN Most_Freq_Drinker mfd ON b.name = mfd.bar
ORDER BY bd.total_num_drinker DESC;","{'student_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Eve'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Coy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Dan'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
3295,4,N,"<Wesley|Brandy> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Katie|William>
... ommitted ...
--------------------","SELECT f1.drinker, f2.drinker FROM (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f1, (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f2 WHERE f1.drinker < f2.drinker AND f1.st = f2.st","SELECT f1.drinker, f2.drinker FROM frequents f1, frequents f2 
GROUP BY f1.drinker, f2.drinker 
HAVING SUM(f1.times_a_week) = SUM(f2.times_a_week);","{'student_result': [['Eve', 'Amy'], ['Eve', 'Eve'], ['Ben', 'Ben'], ['Amy', 'Eve'], ['Amy', 'Amy'], ['Coy', 'Coy'], ['Dan', 'Dan']], 'teacher_result': [['Coy', 'Eve'], ['Amy', 'Eve'], ['Amy', 'Coy']]}","Find the pair of drinkers who frequent bars the same total number of times per week. Don't list (drinkerA, drinkerA). Only list pairs (drinkerA, drinkerB) where drinkerA < drinkerB  in the answer; don't list (drinkerB, drinkerA) again.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
3305,9,N,"<Belgian Wit|3.0|None> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<471 Extra ESB|2.25|Restaurant Hotel Bessunger Forst>
... ommitted ...
--------------------","SELECT beer.name, min_price, bar FROM beer LEFT OUTER JOIN (SELECT beer, MIN(price) AS min_price FROM serves GROUP BY beer) t ON beer.name = t.beer LEFT OUTER JOIN serves ON beer.name = serves.beer AND min_price = serves.price;","SELECT b.name AS beer, 
       COALESCE(MIN(s.price), NULL) AS price, 
       COALESCE(ba.name, NULL) AS bar
FROM beer b
LEFT JOIN serves s ON b.name = s.beer
LEFT JOIN bar ba ON ba.name = s.bar AND s.price = (SELECT MIN(price) FROM serves WHERE beer = b.name)
GROUP BY b.name, ba.name
ORDER BY b.name;
","{'student_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Amstel', Decimal('1.50'), None], ['Budweiser', Decimal('2.20'), 'Talk of the Town'], ['Budweiser', Decimal('2.25'), None], ['Corona', Decimal('7.00'), 'The Edge'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Dixie', Decimal('3.00'), None], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Full Sail', Decimal('7.75'), 'Satisfaction']], 'teacher_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Talk of the Town']]}","Find, for each beer, its lowest serving price and the bar(s) serving it at this price. The output should be a list of (beer, price, bar) triples. If some beer B is not served anywhere, you should still output (B, NULL, NULL).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
3306,9,N,"<Pale Ale|3.25|None> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<471 Extra ESB|2.25|None>
... ommitted ...
--------------------","SELECT beer.name, min_price, bar FROM beer LEFT OUTER JOIN (SELECT beer, MIN(price) AS min_price FROM serves GROUP BY beer) t ON beer.name = t.beer LEFT OUTER JOIN serves ON beer.name = serves.beer AND min_price = serves.price;","SELECT b.name AS beer, 
       COALESCE(MIN(s.price), NULL) AS price, 
       COALESCE(ba.name, NULL) AS bar
FROM beer b
LEFT JOIN serves s ON b.name = s.beer
LEFT JOIN bar ba ON ba.name = s.bar AND s.price < (SELECT MIN(price) FROM serves WHERE beer = b.name)
GROUP BY b.name, ba.name
ORDER BY b.name;
","{'student_result': [['Amstel', Decimal('1.00'), None], ['Budweiser', Decimal('2.20'), None], ['Corona', Decimal('7.00'), None], ['Dixie', Decimal('2.75'), None], ['Erdinger', Decimal('3.50'), None], ['Full Sail', Decimal('7.75'), None]], 'teacher_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Talk of the Town']]}","Find, for each beer, its lowest serving price and the bar(s) serving it at this price. The output should be a list of (beer, price, bar) triples. If some beer B is not served anywhere, you should still output (B, NULL, NULL).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
3307,9,N,"<Cold Hop|3.25|Pizza-Haus Zicke> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<471 Extra ESB|2.5|Pizzeria Santa Lucia>
... ommitted ...
--------------------","SELECT beer.name, min_price, bar FROM beer LEFT OUTER JOIN (SELECT beer, MIN(price) AS min_price FROM serves GROUP BY beer) t ON beer.name = t.beer LEFT OUTER JOIN serves ON beer.name = serves.beer AND min_price = serves.price;","SELECT b.name AS beer, 
       COALESCE(MIN(s.price), NULL) AS price, 
       COALESCE(ba.name, NULL) AS bar
FROM beer b
LEFT JOIN serves s ON b.name = s.beer
LEFT JOIN bar ba ON ba.name = s.bar AND s.price > (SELECT MIN(price) FROM serves WHERE beer = b.name)
GROUP BY b.name, ba.name
ORDER BY b.name;
","{'student_result': [['Amstel', Decimal('1.75'), 'The Edge'], ['Amstel', Decimal('1.75'), 'Satisfaction'], ['Amstel', Decimal('1.50'), 'Talk of the Town'], ['Amstel', Decimal('1.00'), None], ['Budweiser', Decimal('2.20'), None], ['Budweiser', Decimal('2.25'), 'Satisfaction'], ['Budweiser', Decimal('2.25'), 'Down Under Pub'], ['Budweiser', Decimal('2.50'), 'The Edge'], ['Corona', Decimal('7.00'), None], ['Dixie', Decimal('2.75'), None], ['Dixie', Decimal('3.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), None], ['Full Sail', Decimal('7.75'), None]], 'teacher_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Talk of the Town']]}","Find, for each beer, its lowest serving price and the bar(s) serving it at this price. The output should be a list of (beer, price, bar) triples. If some beer B is not served anywhere, you should still output (B, NULL, NULL).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
3384,6,N,"<Gaststatte Gruner Baum|None> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Casanostra|None>
... ommitted ...
--------------------","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE NOT EXISTS (SELECT s1.beer FROM serves s1 WHERE s1.bar = b1.name AND NOT EXISTS (SELECT 1 FROM serves s2 WHERE s2.bar = b2.name AND s2.beer = s1.beer)) AND EXISTS (SELECT s2.beer FROM serves s2 WHERE s2.bar = b2.name AND NOT EXISTS (SELECT 1 FROM serves s1 WHERE s1.bar = b1.name AND s1.beer = s2.beer));","select a.bar, b.bar
from serves a
left join serves b on a.bar!=b.bar and a.beer = b.beer
where b.beer is null
;","{'student_result': [['James Joyce Pub', None], ['Satisfaction', None]], 'teacher_result': [['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction']]}","Find all (bar1, bar2) pairs where the set of beers served at bar1 is a proper subset of the those served at bar2; i.e., bar2 serves every beer that bar1 serves and plus some more.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
3387,6,N,"<None|Pfefferkorn> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<None|Casanostra>
... ommitted ...
--------------------","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE NOT EXISTS (SELECT s1.beer FROM serves s1 WHERE s1.bar = b1.name AND NOT EXISTS (SELECT 1 FROM serves s2 WHERE s2.bar = b2.name AND s2.beer = s1.beer)) AND EXISTS (SELECT s2.beer FROM serves s2 WHERE s2.bar = b2.name AND NOT EXISTS (SELECT 1 FROM serves s1 WHERE s1.bar = b1.name AND s1.beer = s2.beer));","select a.bar, b.bar
from serves a
right outer join serves b on a.bar!=b.bar and a.beer = b.beer
where a.beer is null
;","{'student_result': [[None, 'James Joyce Pub'], [None, 'Satisfaction']], 'teacher_result': [['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction']]}","Find all (bar1, bar2) pairs where the set of beers served at bar1 is a proper subset of the those served at bar2; i.e., bar2 serves every beer that bar1 serves and plus some more.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
3487,2,N,"<Terri> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Joshua>
... ommitted ...
--------------------",SELECT DISTINCT drinker FROM frequents NATURAL JOIN serves WHERE beer = 'Corona' AND drinker not in (SELECT drinker FROM Likes WHERE beer = 'Corona');,SELECT drinker FROM Likes NATURAL JOIN Frequents;,"{'student_result': [['Amy'], ['Amy'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Coy'], ['Coy'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Eve'], ['Eve']], 'teacher_result': [['Ben'], ['Coy']]}",Find the names of all drinkers that do not like Corona but frequent a bar that serves Corona.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
3522,4,N,"<Joy|Dylan> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Ethan|Dan>
... ommitted ...
--------------------","SELECT f1.drinker, f2.drinker FROM (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f1, (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f2 WHERE f1.drinker < f2.drinker AND f1.st = f2.st","SELECT DISTINCT f1.drinker AS drinkerA, f2.drinker AS drinkerB
FROM frequents AS f1, frequents AS f2 
WHERE f1.bar = f2.bar AND f1.drinker > f2.drinker AND f1.times_a_week = f2.times_a_week","{'student_result': [['Dan', 'Ben'], ['Dan', 'Coy'], ['Eve', 'Amy']], 'teacher_result': [['Coy', 'Eve'], ['Amy', 'Eve'], ['Amy', 'Coy']]}","Find the pair of drinkers who frequent bars the same total number of times per week. Don't list (drinkerA, drinkerA). Only list pairs (drinkerA, drinkerB) where drinkerA < drinkerB  in the answer; don't list (drinkerB, drinkerA) again.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
3566,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Burg Cafe Restaurant|8|2.666666667|Adam>
(there may be other errors too)
your output >>>>>
--------------------
<Burg Cafe Restaurant|8|2.666666667|Adam>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","/* input your answer in this cell: */

WITH 
    All_Bars AS (
        SELECT DISTINCT name
        FROM bar
    ),
    Bar_Drinkers AS (
        SELECT f.bar, COUNT(f.drinker) AS total_num_drinker
        FROM frequents f
        GROUP BY f.bar
    ),
    Avg_Bar_Price AS (
        SELECT s.bar, AVG(s.price) AS avg_price
        FROM serves s
        GROUP BY s.bar
    ),
    Most_Freq_Drinker AS (
    SELECT f.bar, f.drinker AS most_reg_drinker
    FROM frequents f 
    LEFT JOIN (
        SELECT f1.bar, f1.drinker, f1.times_a_week
        FROM frequents f1
        INNER JOIN 
        (SELECT f.bar, MAX(times_a_week) AS most_freq
        FROM frequents f
        GROUP BY f.bar) f2 ON f1.bar = f2.bar AND f1.times_a_week = f2.most_freq) maxf ON f.bar = maxf.bar AND f.drinker = maxf.drinker 
    WHERE maxf.drinker IS NOT NULL)

SELECT 
    b.name, 
    COALESCE(bd.total_num_drinker, 0) AS total_num_drinker, 
    abp.avg_price, 
    mfd.most_reg_drinker
FROM 
    All_Bars b
LEFT JOIN 
    Bar_Drinkers bd ON b.name = bd.bar
LEFT JOIN 
    Avg_Bar_Price abp ON b.name = abp.bar
LEFT JOIN 
    Most_Freq_Drinker mfd ON b.name = mfd.bar
ORDER BY 
    mfd.most_reg_drinker ASC,
    bd.total_num_drinker DESC,
    b.name ASC;

","{'student_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Dan'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Dan'], ['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Eve']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
3615,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Donerhaus Dest|16|2.95|Ben>
(there may be other errors too)
your output >>>>>
--------------------
<Donerhaus Dest|16|2.95|Ben>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","SELECT b1.name,
COUNT(DISTINCT f1.drinker) total_num_drinker,
AVG(s1.price) avg_price,
(
	SELECT f1.drinker
	FROM frequents f1
	WHERE f1.bar = b1.name
	ORDER BY f1.times_a_week, f1.drinker DESC
	LIMIT 1
) most_reg_drinker
FROM
    bar b1
    JOIN frequents f1 ON b1.name = f1.bar
    JOIN serves s1 ON b1.name = s1.bar
GROUP BY
    b1.name
ORDER BY total_num_drinker DESC;","{'student_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Dan'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Coy'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Dan'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Ben'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Dan']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
3620,8,N,"1-th tuple in answer should be <471 Extra ESB|0.25|2.375> instead of <Old Bawdy 2006|0.75|2.8>
(there may be other errors too)
your output >>>>>
--------------------
<Old Bawdy 2006|0.75|2.8>
... ommitted ...
--------------------","SELECT beer, MAX(price) - MIN(price) AS price_gap, AVG(price) AS avg_price FROM serves WHERE beer IN (SELECT s.beer FROM serves s, frequents f WHERE s.bar = f.bar AND f.drinker LIKE 'B%' GROUP BY s.beer HAVING COUNT(DISTINCT s.bar) >= 2) GROUP BY beer ORDER BY beer;","with t1 as 
		(select bar from frequents where drinker like '%B%'), /*bars B's frequent)*/
	t2 as
		(select beer, max(price)-min(price) as price_gap from serves where bar in(select bar from t1) group by beer), /*price gap*/
	t3 as
		(select t2.beer, avg(price) as avg_price from t2,serves where t2.beer = serves.beer group by t2.beer) /*avg price*/
select t2.beer, price_gap, avg_price from t2,t3 where t2.beer = t3.beer","{'student_result': [['Erdinger', Decimal('0.00'), Decimal('3.5000000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Budweiser', Decimal('0.05'), Decimal('2.3000000000000000')], ['Full Sail', Decimal('0.00'), Decimal('7.7500000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')], ['Amstel', Decimal('0.75'), Decimal('1.4000000000000000')]], 'teacher_result': [['Amstel', Decimal('0.75'), Decimal('1.4000000000000000')], ['Budweiser', Decimal('0.30'), Decimal('2.3000000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')]]}","Find, for each beer served at least 2 bars that frequented by drinkers whose name starts with 'B', the difference of maximum and minimum (price gap) and average price of the beers in all serving bars, order by bar name. I.e., your query should output beer, price_gap, and avg_price.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
3649,6,N,"<Neu Kong Fondue Restaurant|Alte Zollwache> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Akebono|Adel.es Restaurant>
... ommitted ...
--------------------","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE NOT EXISTS (SELECT s1.beer FROM serves s1 WHERE s1.bar = b1.name AND NOT EXISTS (SELECT 1 FROM serves s2 WHERE s2.bar = b2.name AND s2.beer = s1.beer)) AND EXISTS (SELECT s2.beer FROM serves s2 WHERE s2.bar = b2.name AND NOT EXISTS (SELECT 1 FROM serves s1 WHERE s1.bar = b1.name AND s1.beer = s2.beer));","WITH V1 AS(
    SELECT bar, beer
    FROM serves
    ORDER BY bar 
),

V2 AS (
    SELECT DISTINCT bar1.bar AS barA, bar2.bar AS barB
    FROM V1 bar1, V1 bar2
    WHERE bar1.bar > bar2.bar
)

SELECT * FROM V2;","{'student_result': [['James Joyce Pub', 'Down Under Pub'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'James Joyce Pub'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'James Joyce Pub'], ['Talk of the Town', 'Satisfaction'], ['The Edge', 'Down Under Pub'], ['The Edge', 'James Joyce Pub'], ['The Edge', 'Satisfaction'], ['The Edge', 'Talk of the Town']], 'teacher_result': [['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction']]}","Find all (bar1, bar2) pairs where the set of beers served at bar1 is a proper subset of the those served at bar2; i.e., bar2 serves every beer that bar1 serves and plus some more.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
3652,9,N,"<Petrus Dubbel Bruin Ale|1.25|3.125> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<471 Extra ESB|0.25|2.375>
... ommitted ...
--------------------","SELECT beer.name, min_price, bar FROM beer LEFT OUTER JOIN (SELECT beer, MIN(price) AS min_price FROM serves GROUP BY beer) t ON beer.name = t.beer LEFT OUTER JOIN serves ON beer.name = serves.beer AND min_price = serves.price;","WITH ValidBeers AS (SELECT beer FROM serves WHERE serves.bar IN (SELECT bar FROM frequents WHERE drinker LIKE 'B%') GROUP BY beer HAVING COUNT(bar) >= 2),
BeerPrices AS (SELECT serves.beer, serves.price FROM serves FULL OUTER JOIN ValidBeers ON serves.beer = ValidBeers.beer)
SELECT bp.beer, MAX(bp.price) - MIN(bp.price) AS price_gap, AVG(bp.price) AS avg_price FROM BeerPrices bp GROUP BY bp.beer ORDER BY bp.beer;","{'student_result': [['Amstel', Decimal('0.75'), Decimal('1.4000000000000000')], ['Budweiser', Decimal('0.30'), Decimal('2.3000000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')], ['Erdinger', Decimal('0.00'), Decimal('3.5000000000000000')], ['Full Sail', Decimal('0.00'), Decimal('7.7500000000000000')]], 'teacher_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Talk of the Town']]}","Find, for each beer, its lowest serving price and the bar(s) serving it at this price. The output should be a list of (beer, price, bar) triples. If some beer B is not served anywhere, you should still output (B, NULL, NULL).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
3659,8,N,"1-th tuple in answer should be <471 Extra ESB|0.25|2.375> instead of <Adriaan|0.75|2.875>
(there may be other errors too)
your output >>>>>
--------------------
<Adriaan|0.75|2.875>
... ommitted ...
--------------------","SELECT beer, MAX(price) - MIN(price) AS price_gap, AVG(price) AS avg_price FROM serves WHERE beer IN (SELECT s.beer FROM serves s, frequents f WHERE s.bar = f.bar AND f.drinker LIKE 'B%' GROUP BY s.beer HAVING COUNT(DISTINCT s.bar) >= 2) GROUP BY beer ORDER BY beer;","WITH beer_prices AS (
    SELECT
        s.beer,
        s.price
    FROM
        serves s
        JOIN frequents f ON s.bar = f.bar
        JOIN drinker d ON f.drinker = d.name
    WHERE
        d.name LIKE 'B%'
    GROUP BY
        s.beer,
        s.price
    HAVING
        COUNT(DISTINCT s.bar) >= 2
),
beer_stats AS (
    SELECT
        beer,
        MAX(price) - MIN(price) AS price_gap,
        AVG(price) AS avg_price
    FROM
        beer_prices
    GROUP BY
        beer
)
SELECT
    beer,
    price_gap,
    avg_price
FROM
    beer_stats
ORDER BY
    beer;
","{'student_result': [['Corona', Decimal('0.00'), Decimal('7.0000000000000000')]], 'teacher_result': [['Amstel', Decimal('0.75'), Decimal('1.4000000000000000')], ['Budweiser', Decimal('0.30'), Decimal('2.3000000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')]]}","Find, for each beer served at least 2 bars that frequented by drinkers whose name starts with 'B', the difference of maximum and minimum (price gap) and average price of the beers in all serving bars, order by bar name. I.e., your query should output beer, price_gap, and avg_price.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
3704,6,N,"<Burgerstuben|Gargantua> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<James Joyce Pub|Borsch Anni Imbiss>
... ommitted ...
--------------------","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE NOT EXISTS (SELECT s1.beer FROM serves s1 WHERE s1.bar = b1.name AND NOT EXISTS (SELECT 1 FROM serves s2 WHERE s2.bar = b2.name AND s2.beer = s1.beer)) AND EXISTS (SELECT s2.beer FROM serves s2 WHERE s2.bar = b2.name AND NOT EXISTS (SELECT 1 FROM serves s1 WHERE s1.bar = b1.name AND s1.beer = s2.beer));","SELECT b1.bar, b2.bar 
FROM serves AS b1 JOIN serves AS b2 ON b1.beer = b2.beer AND b1.bar <> b2.bar
WHERE b1.beer IN (
    SELECT serves.beer
    FROM serves 
    WHERE serves.bar = b2.bar
) AND b2.bar NOT IN (
    SELECT s2.bar
    FROM serves AS s2
    WHERE s2.beer NOT IN (
        SELECT s1.beer
        FROM serves AS s1
        WHERE s1.bar = b1.bar
    )
    AND s2.bar = b2.bar
);","{'student_result': [['Down Under Pub', 'Talk of the Town'], ['Down Under Pub', 'The Edge'], ['Down Under Pub', 'Talk of the Town'], ['Down Under Pub', 'The Edge'], ['Down Under Pub', 'The Edge'], ['The Edge', 'Talk of the Town'], ['The Edge', 'Down Under Pub'], ['The Edge', 'Talk of the Town'], ['The Edge', 'Down Under Pub'], ['The Edge', 'Down Under Pub'], ['Satisfaction', 'Talk of the Town'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'Talk of the Town'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'Down Under Pub']], 'teacher_result': [['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction']]}","Find all (bar1, bar2) pairs where the set of beers served at bar1 is a proper subset of the those served at bar2; i.e., bar2 serves every beer that bar1 serves and plus some more.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
3708,6,N,"<Burgerstuben|Gargantua> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Lapp|Akropolis>
... ommitted ...
--------------------","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE NOT EXISTS (SELECT s1.beer FROM serves s1 WHERE s1.bar = b1.name AND NOT EXISTS (SELECT 1 FROM serves s2 WHERE s2.bar = b2.name AND s2.beer = s1.beer)) AND EXISTS (SELECT s2.beer FROM serves s2 WHERE s2.bar = b2.name AND NOT EXISTS (SELECT 1 FROM serves s1 WHERE s1.bar = b1.name AND s1.beer = s2.beer));","SELECT b1.bar, b2.bar 
FROM serves AS b1 JOIN serves AS b2 ON b1.beer = b2.beer AND b1.bar <> b2.bar
WHERE b1.beer IN (
    SELECT serves.beer
    FROM serves 
    WHERE serves.bar = b2.bar
) AND b2.bar NOT IN (
    SELECT s2.bar
    FROM serves AS s2
    WHERE s2.beer NOT IN (
        SELECT s1.beer
        FROM serves AS s1
        WHERE s1.bar = b1.bar
    )
    AND s2.bar = b2.bar
) GROUP BY b2.bar, b1.bar;","{'student_result': [['Satisfaction', 'Down Under Pub'], ['The Edge', 'Down Under Pub'], ['Down Under Pub', 'Talk of the Town'], ['Satisfaction', 'Talk of the Town'], ['The Edge', 'Talk of the Town'], ['Down Under Pub', 'The Edge'], ['Satisfaction', 'The Edge']], 'teacher_result': [['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction']]}","Find all (bar1, bar2) pairs where the set of beers served at bar1 is a proper subset of the those served at bar2; i.e., bar2 serves every beer that bar1 serves and plus some more.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
3713,6,N,"<Lapp|Eulenpick> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Akebono|Adel.es Restaurant>
... ommitted ...
--------------------","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE NOT EXISTS (SELECT s1.beer FROM serves s1 WHERE s1.bar = b1.name AND NOT EXISTS (SELECT 1 FROM serves s2 WHERE s2.bar = b2.name AND s2.beer = s1.beer)) AND EXISTS (SELECT s2.beer FROM serves s2 WHERE s2.bar = b2.name AND NOT EXISTS (SELECT 1 FROM serves s1 WHERE s1.bar = b1.name AND s1.beer = s2.beer));","WITH V1 AS (
    SELECT bar, beer
    FROM serves
    ORDER BY bar 
),

V2 AS (
    SELECT DISTINCT bar1.bar AS barA, bar2.bar AS barB
    FROM V1 bar1, V1 bar2
    WHERE bar1.bar > bar2.bar
),

V3 AS (
    SELECT barA, barB
    FROM V2 
    WHERE NOT EXISTS (
        SELECT beer 
        FROM V1 serves_1
        WHERE serves_1.bar = barA
        AND serves_1.beer NOT IN (
            SELECT beer 
            FROM V1 serves_2
            WHERE serves_2.bar = barB
        )
    )
    OR EXISTS (
        SELECT beer 
        FROM V1 serves_2
        WHERE serves_2.bar = barB
        AND serves_2.beer NOT IN (
            SELECT beer 
            FROM V1 serves_1
            WHERE serves_1.bar = barA
        )
    )
)

SELECT * FROM V3;
","{'student_result': [['James Joyce Pub', 'Down Under Pub'], ['Satisfaction', 'James Joyce Pub'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'James Joyce Pub'], ['Talk of the Town', 'Satisfaction'], ['The Edge', 'Down Under Pub'], ['The Edge', 'James Joyce Pub'], ['The Edge', 'Satisfaction']], 'teacher_result': [['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction']]}","Find all (bar1, bar2) pairs where the set of beers served at bar1 is a proper subset of the those served at bar2; i.e., bar2 serves every beer that bar1 serves and plus some more.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
3759,9,N,"<WPA (Wheat Pale Ale)|3.0|Doner-Pizzeria> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<471 Extra ESB|2.5|Pizzeria Santa Lucia>
... ommitted ...
--------------------","SELECT beer.name, min_price, bar FROM beer LEFT OUTER JOIN (SELECT beer, MIN(price) AS min_price FROM serves GROUP BY beer) t ON beer.name = t.beer LEFT OUTER JOIN serves ON beer.name = serves.beer AND min_price = serves.price;","SELECT s.beer, s.price AS min_price, s.bar
FROM serves s
LEFT JOIN (
    SELECT beer, MIN(price) AS min_price
    FROM serves
    GROUP BY beer
) t ON s.beer = t.beer
AND s.price = t.min_price
ORDER BY s.beer;
","{'student_result': [['Amstel', Decimal('1.50'), 'Talk of the Town'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Amstel', Decimal('1.75'), 'Satisfaction'], ['Amstel', Decimal('1.75'), 'The Edge'], ['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Budweiser', Decimal('2.20'), 'Talk of the Town'], ['Budweiser', Decimal('2.25'), 'Down Under Pub'], ['Budweiser', Decimal('2.50'), 'The Edge'], ['Budweiser', Decimal('2.25'), 'Satisfaction'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('3.00'), 'James Joyce Pub'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Full Sail', Decimal('7.75'), 'Satisfaction']], 'teacher_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Talk of the Town']]}","Find, for each beer, its lowest serving price and the bar(s) serving it at this price. The output should be a list of (beer, price, bar) triples. If some beer B is not served anywhere, you should still output (B, NULL, NULL).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
3831,6,N,"<Gasthaus Sonne|Hansenhaus links> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<James Joyce Pub|Satisfaction>
... ommitted ...
--------------------","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE NOT EXISTS (SELECT s1.beer FROM serves s1 WHERE s1.bar = b1.name AND NOT EXISTS (SELECT 1 FROM serves s2 WHERE s2.bar = b2.name AND s2.beer = s1.beer)) AND EXISTS (SELECT s2.beer FROM serves s2 WHERE s2.bar = b2.name AND NOT EXISTS (SELECT 1 FROM serves s1 WHERE s1.bar = b1.name AND s1.beer = s2.beer));","SELECT b.name, b2.name FROM bar b, bar b2 WHERE b.name < b2.name 
AND NOT EXISTS(SELECT * FROM serves s WHERE b.name = s.bar 
AND NOT EXISTS
(SELECT * FROM serves s2 WHERE b2.name = s2.bar AND s.beer <> s2.beer));","{'student_result': [['Down Under Pub', 'The Edge'], ['Down Under Pub', 'James Joyce Pub'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'Talk of the Town'], ['James Joyce Pub', 'The Edge'], ['James Joyce Pub', 'Satisfaction'], ['James Joyce Pub', 'Talk of the Town'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'Talk of the Town'], ['Talk of the Town', 'The Edge']], 'teacher_result': [['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction']]}","Find all (bar1, bar2) pairs where the set of beers served at bar1 is a proper subset of the those served at bar2; i.e., bar2 serves every beer that bar1 serves and plus some more.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
3851,8,N,"3-th tuple in answer should be <American Pale Ale|1.25|2.833333333> instead of <American Pale Ale|1.25|3.0>
(there may be other errors too)
your output >>>>>
--------------------
<471 Extra ESB|0.25|2.375>
... ommitted ...
--------------------","SELECT beer, MAX(price) - MIN(price) AS price_gap, AVG(price) AS avg_price FROM serves WHERE beer IN (SELECT s.beer FROM serves s, frequents f WHERE s.bar = f.bar AND f.drinker LIKE 'B%' GROUP BY s.beer HAVING COUNT(DISTINCT s.bar) >= 2) GROUP BY beer ORDER BY beer;"," WITH BeerInBars AS (
    SELECT s.beer, s.bar, s.price
    FROM serves s
    JOIN frequents f ON s.bar = f.bar
    JOIN drinker d ON f.drinker = d.name
    WHERE d.name LIKE 'B%'
),
BeerStats AS (
    SELECT beer,
           MAX(price) - MIN(price) AS price_gap,
           AVG(price) AS avg_price
    FROM BeerInBars
    GROUP BY beer
    HAVING COUNT(DISTINCT bar) >= 2
)
SELECT beer, 
       price_gap, 
       CAST(avg_price AS DECIMAL(16, 10)) AS avg_price
FROM BeerStats
ORDER BY beer;
","{'student_result': [['Amstel', Decimal('0.75'), Decimal('1.4166666667')], ['Budweiser', Decimal('0.05'), Decimal('2.2250000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000')]], 'teacher_result': [['Amstel', Decimal('0.75'), Decimal('1.4000000000000000')], ['Budweiser', Decimal('0.30'), Decimal('2.3000000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')]]}","Find, for each beer served at least 2 bars that frequented by drinkers whose name starts with 'B', the difference of maximum and minimum (price gap) and average price of the beers in all serving bars, order by bar name. I.e., your query should output beer, price_gap, and avg_price.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
3971,4,N,"<Savannah|Savannah> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Misty|Misty>
... ommitted ...
--------------------","SELECT f1.drinker, f2.drinker FROM (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f1, (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f2 WHERE f1.drinker < f2.drinker AND f1.st = f2.st","WITH Drinker_Total AS (
    SELECT drinker, SUM(times_a_week) AS total_times
    FROM Frequents
    GROUP BY drinker
)
SELECT d2.drinker AS drinkerA, d2.drinker AS drinkerB
FROM Drinker_Total d1
JOIN Drinker_Total d2 ON d1.total_times = d2.total_times AND d1.drinker < d2.drinker;","{'student_result': [['Eve', 'Eve'], ['Eve', 'Eve'], ['Coy', 'Coy']], 'teacher_result': [['Coy', 'Eve'], ['Amy', 'Eve'], ['Amy', 'Coy']]}","Find the pair of drinkers who frequent bars the same total number of times per week. Don't list (drinkerA, drinkerA). Only list pairs (drinkerA, drinkerB) where drinkerA < drinkerB  in the answer; don't list (drinkerB, drinkerA) again.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
4033,9,N,"<Bent Nail IPA|2.5|None> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<471 Extra ESB|2.25|Restaurant Hotel Bessunger Forst>
... ommitted ...
--------------------","SELECT beer.name, min_price, bar FROM beer LEFT OUTER JOIN (SELECT beer, MIN(price) AS min_price FROM serves GROUP BY beer) t ON beer.name = t.beer LEFT OUTER JOIN serves ON beer.name = serves.beer AND min_price = serves.price;","SELECT b.name AS beer, MIN(s.price) AS price, sb.name AS bar
FROM beer b
LEFT JOIN serves s ON b.name = s.beer
LEFT JOIN bar sb ON s.bar = sb.name
AND s.price = (SELECT MIN(s2.price)
                    FROM serves s2
                    WHERE s2.beer = b.name)
                    OR
                    (s.price IS NULL AND sb.name IS NULL)
GROUP BY b.name, sb.name, s.price
ORDER BY b.name, s.price;","{'student_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Amstel', Decimal('1.50'), None], ['Amstel', Decimal('1.75'), None], ['Budweiser', Decimal('2.20'), 'Talk of the Town'], ['Budweiser', Decimal('2.25'), None], ['Budweiser', Decimal('2.50'), None], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Corona', Decimal('7.00'), 'The Edge'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Dixie', Decimal('3.00'), None], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Full Sail', Decimal('7.75'), 'Satisfaction']], 'teacher_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Talk of the Town']]}","Find, for each beer, its lowest serving price and the bar(s) serving it at this price. The output should be a list of (beer, price, bar) triples. If some beer B is not served anywhere, you should still output (B, NULL, NULL).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
4048,4,N,"<Patrick|Victoria> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Stacey|Virginia>
... ommitted ...
--------------------","SELECT f1.drinker, f2.drinker FROM (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f1, (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f2 WHERE f1.drinker < f2.drinker AND f1.st = f2.st","SELECT d1.drinker AS drinkerA, d2.drinker AS drinkerB
FROM frequents d1, frequents d2
WHERE d1.drinker < d2.drinker
GROUP BY d1.drinker, d2.drinker
HAVING SUM(d1.times_a_week) = (
    SELECT SUM(d3.times_a_week)
    FROM frequents d3
    WHERE d3.drinker = d2.drinker
);
","{'student_result': [['Amy', 'Eve'], ['Coy', 'Eve']], 'teacher_result': [['Coy', 'Eve'], ['Amy', 'Eve'], ['Amy', 'Coy']]}","Find the pair of drinkers who frequent bars the same total number of times per week. Don't list (drinkerA, drinkerA). Only list pairs (drinkerA, drinkerB) where drinkerA < drinkerB  in the answer; don't list (drinkerB, drinkerA) again.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
4139,1,N,"<Kaitlyn> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Andrea>
... ommitted ...
--------------------",SELECT DISTINCT bar FROM Serves WHERE (beer = 'Amstel' OR beer = 'Corona') AND price > 2;,"SELECT Q5.name
FROM 
	(SELECT frequents2.drinker as name, COUNT(frequents2.bar) as NumBarFreq
	FROM frequents as frequents2
	GROUP BY frequents2.drinker
	ORDER BY frequents2.drinker ASC) as Q5
JOIN
	(SELECT frequents1.drinker as drinker, COUNT(frequents1.bar) as NumBarFreqLike
	FROM frequents as frequents1
	JOIN
		(SELECT Q2.drinker as drinker, Q2.bar as bar
		FROM
			(SELECT likes2.drinker as drinker, serves.bar as bar, COUNT(serves.bar) as CountBarServesBeerLiked
			FROM serves, likes as likes2
			WHERE likes2.beer = serves.beer
			GROUP BY likes2.drinker, serves.bar
			ORDER BY likes2.drinker ASC, serves.bar ASC) AS Q2
		JOIN
			(SELECT likes1.drinker as drinker, COUNT(likes1.beer) as CountBeerLiked
			FROM likes as likes1
			GROUP BY likes1.drinker
			ORDER BY likes1.drinker ASC) AS Q1
		ON Q2.drinker = Q1.drinker
		AND Q2.CountBarServesBeerLiked = Q1.CountBeerLiked) as Q3
	ON frequents1.drinker = Q3.drinker
	AND frequents1.bar = Q3.bar
	GROUP BY frequents1.drinker) as Q4
ON Q5.name = Q4.drinker
AND Q5.NumBarFreq = Q4.NumBarFreqLike
ORDER BY Q5.name ASC;","{'student_result': [['Amy'], ['Eve']], 'teacher_result': [['Down Under Pub'], ['James Joyce Pub'], ['Satisfaction'], ['The Edge']]}",Find names of bars that serve either Amstel or Corona at price higher than $2.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
4165,5,N,"<Gary> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Meredith>
... ommitted ...
--------------------","SELECT name FROM drinker WHERE NOT EXISTS (SELECT f.bar FROM frequents f, serves s WHERE f.drinker = drinker.name AND f.bar = s.bar AND s.beer NOT IN (SELECT beer FROM likes WHERE drinker = drinker.name));","SELECT f.drinker
FROM frequents f
JOIN serves s ON f.bar = s.bar
RIGHT JOIN likes l ON f.drinker = l.drinker AND s.beer = l.beer
GROUP BY f.drinker
HAVING COUNT(CASE WHEN l.beer IS NULL THEN 1 ELSE NULL END) = 0;

","{'student_result': [[None], ['Dan'], ['Ben'], ['Amy'], ['Eve']], 'teacher_result': []}",Find names of all drinkers who do not frequent any bar that serves any beer they do not like.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
4188,4,N,"<Margaret|Ellen> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Jeffrey|Erin>
... ommitted ...
--------------------","SELECT f1.drinker, f2.drinker FROM (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f1, (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f2 WHERE f1.drinker < f2.drinker AND f1.st = f2.st","SELECT DISTINCT drinker AS drinkerA, drinkerB FROM frequents JOIN (SELECT drinker AS drinkerB, times_a_week FROM frequents) AS frequentsB ON frequents.times_a_week < frequentsB.times_a_week;","{'student_result': [['Dan', 'Eve'], ['Coy', 'Ben'], ['Dan', 'Amy'], ['Dan', 'Dan'], ['Dan', 'Ben'], ['Ben', 'Amy'], ['Coy', 'Amy'], ['Ben', 'Ben'], ['Coy', 'Eve'], ['Ben', 'Eve'], ['Ben', 'Dan'], ['Coy', 'Dan']], 'teacher_result': [['Coy', 'Eve'], ['Amy', 'Eve'], ['Amy', 'Coy']]}","Find the pair of drinkers who frequent bars the same total number of times per week. Don't list (drinkerA, drinkerA). Only list pairs (drinkerA, drinkerB) where drinkerA < drinkerB  in the answer; don't list (drinkerB, drinkerA) again.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
4220,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Adel.es Restaurant|3|3.0|Dylan>
(there may be other errors too)
your output >>>>>
--------------------
<Adel.es Restaurant|3|3.0|Dylan>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","WITH BarStatistics AS (
    SELECT 
        f.bar AS barName,
        COUNT(DISTINCT f.drinker) AS totalDrinkers,
        AVG(s.price) AS avgPrice
    FROM 
        frequents f
    JOIN 
        serves s ON f.bar = s.bar
    GROUP BY 
        f.bar
),
Regulars AS (
    SELECT 
        f.bar AS barName,
        FIRST_VALUE(f.drinker) OVER (PARTITION BY f.bar ORDER BY SUM(f.times_a_week) DESC) AS mostReg
    FROM 
        frequents f
    GROUP BY 
        f.bar, f.drinker
)
SELECT DISTINCT
    bars.barName,
    bars.totalDrinkers,
    bars.avgPrice,
    mrd.mostReg
FROM 
    BarStatistics bars
JOIN 
    Regulars mrd ON bars.barName = mrd.barName
ORDER BY 
	bars.barName ASC;","{'student_result': [['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Eve'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
4221,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Om Shanti|4|5.0|Cody>
(there may be other errors too)
your output >>>>>
--------------------
<Om Shanti|4|5.0|Cody>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","WITH BarStatistics AS (
    SELECT 
        f.bar AS barName,
        COUNT(DISTINCT f.drinker) AS totalDrinkers,
        AVG(s.price) AS avgPrice
    FROM 
        frequents f
    JOIN 
        serves s ON f.bar = s.bar
    GROUP BY 
        f.bar
),
Regulars AS (
    SELECT 
        f.bar AS barName,
        FIRST_VALUE(f.drinker) OVER (PARTITION BY f.bar ORDER BY SUM(f.times_a_week) DESC) AS mostReg
    FROM 
        frequents f
    GROUP BY 
        f.bar, f.drinker
)
SELECT DISTINCT
    bars.barName,
    bars.totalDrinkers,
    bars.avgPrice,
    mrd.mostReg
FROM 
    BarStatistics bars
JOIN 
    Regulars mrd ON bars.barName = mrd.barName
ORDER BY 
	bars.avgPrice DESC;","{'student_result': [['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy'], ['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Eve'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
4225,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Donerhaus Dest|16|2.95|Yesenia>
(there may be other errors too)
your output >>>>>
--------------------
<Donerhaus Dest|16|2.95|Yesenia>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","WITH BarStatistics AS (
    SELECT 
        f.bar AS barName,
        COUNT(DISTINCT f.drinker) AS totalDrinkers,
        AVG(s.price) AS avgPrice
    FROM 
        frequents f
    JOIN 
        serves s ON f.bar = s.bar
    GROUP BY 
        f.bar
),
Regulars AS (
    SELECT 
        f.bar AS barName,
        FIRST_VALUE(f.drinker) OVER (PARTITION BY f.bar ORDER BY SUM(f.times_a_week) DESC) AS mostReg
    FROM 
        frequents f
    GROUP BY 
        f.bar, f.drinker
)
SELECT DISTINCT
    bars.barName,
    bars.totalDrinkers,
    bars.avgPrice,
    mrd.mostReg
FROM 
    BarStatistics bars
JOIN 
    Regulars mrd ON bars.barName = mrd.barName
ORDER BY
	bars.totalDrinkers DESC;","{'student_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Eve'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
4305,4,N,"<Frances|Ronald> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Jeffrey|Erin>
... ommitted ...
--------------------","SELECT f1.drinker, f2.drinker FROM (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f1, (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f2 WHERE f1.drinker < f2.drinker AND f1.st = f2.st","SELECT f1.drinker, f2.drinker FROM frequents as f1, frequents as f2
GROUP BY f1.drinker, f2.drinker
HAVING SUM(f1.times_a_week) < SUM(f2.times_a_week);","{'student_result': [['Coy', 'Amy'], ['Coy', 'Eve'], ['Ben', 'Eve'], ['Ben', 'Dan'], ['Dan', 'Eve'], ['Coy', 'Ben'], ['Dan', 'Amy'], ['Ben', 'Amy'], ['Coy', 'Dan']], 'teacher_result': [['Coy', 'Eve'], ['Amy', 'Eve'], ['Amy', 'Coy']]}","Find the pair of drinkers who frequent bars the same total number of times per week. Don't list (drinkerA, drinkerA). Only list pairs (drinkerA, drinkerB) where drinkerA < drinkerB  in the answer; don't list (drinkerB, drinkerA) again.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
4407,6,N,"<Satisfaction|Saftbar> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Qbar|Enchilada Kassel>
... ommitted ...
--------------------","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE NOT EXISTS (SELECT s1.beer FROM serves s1 WHERE s1.bar = b1.name AND NOT EXISTS (SELECT 1 FROM serves s2 WHERE s2.bar = b2.name AND s2.beer = s1.beer)) AND EXISTS (SELECT s2.beer FROM serves s2 WHERE s2.bar = b2.name AND NOT EXISTS (SELECT 1 FROM serves s1 WHERE s1.bar = b1.name AND s1.beer = s2.beer));","select distinct v1.bar, v2.bar
from serves as v1, serves as v2
where v1.beer in (v2.beer)
and v1.bar <> v2.bar","{'student_result': [['Satisfaction', 'James Joyce Pub'], ['James Joyce Pub', 'Satisfaction'], ['Talk of the Town', 'James Joyce Pub'], ['Satisfaction', 'Down Under Pub'], ['The Edge', 'Talk of the Town'], ['The Edge', 'James Joyce Pub'], ['Down Under Pub', 'Talk of the Town'], ['Satisfaction', 'The Edge'], ['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['James Joyce Pub', 'The Edge'], ['James Joyce Pub', 'Talk of the Town'], ['Talk of the Town', 'Satisfaction'], ['Satisfaction', 'Talk of the Town'], ['Talk of the Town', 'The Edge'], ['Down Under Pub', 'James Joyce Pub'], ['Down Under Pub', 'The Edge'], ['Talk of the Town', 'Down Under Pub'], ['The Edge', 'Down Under Pub'], ['James Joyce Pub', 'Down Under Pub']], 'teacher_result': [['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction']]}","Find all (bar1, bar2) pairs where the set of beers served at bar1 is a proper subset of the those served at bar2; i.e., bar2 serves every beer that bar1 serves and plus some more.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
4471,1,N,"<Fernando> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Julia>
... ommitted ...
--------------------",SELECT DISTINCT bar FROM Serves WHERE (beer = 'Amstel' OR beer = 'Corona') AND price > 2;,"SELECT likes.drinker FROM  serves
LEFT JOIN likes
    ON likes.beer = serves.beer
LEFT JOIN frequents
    on frequents.bar = serves.bar","{'student_result': [['Eve'], ['Eve'], ['Dan'], ['Dan'], ['Ben'], ['Ben'], ['Amy'], ['Amy'], ['Dan'], ['Dan'], ['Ben'], ['Ben'], ['Eve'], ['Eve'], ['Dan'], ['Dan'], ['Amy'], ['Amy'], ['Eve'], ['Eve'], ['Dan'], ['Dan'], ['Ben'], ['Ben'], ['Amy'], ['Amy'], ['Dan'], ['Dan'], ['Ben'], ['Ben'], ['Eve'], ['Eve'], ['Dan'], ['Dan'], ['Amy'], ['Amy'], ['Eve'], ['Eve'], ['Eve'], ['Eve'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Amy'], ['Amy'], ['Amy'], ['Amy'], ['Eve'], ['Eve'], ['Eve'], ['Eve'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Amy'], ['Amy'], ['Amy'], ['Amy'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Coy'], ['Coy'], ['Coy'], ['Coy'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Eve'], ['Eve'], ['Dan'], ['Dan'], ['Ben'], ['Ben'], ['Amy'], ['Amy'], ['Dan'], ['Dan'], ['Ben'], ['Ben'], ['Eve'], ['Eve'], ['Dan'], ['Dan'], ['Amy'], ['Amy'], ['Dan'], ['Dan'], ['Coy'], ['Coy'], [None], [None], ['Eve'], ['Eve'], ['Dan'], ['Dan'], ['Ben'], ['Ben'], ['Amy'], ['Amy'], ['Dan'], ['Dan'], ['Ben'], ['Ben']], 'teacher_result': [['Down Under Pub'], ['James Joyce Pub'], ['Satisfaction'], ['The Edge']]}",Find names of bars that serve either Amstel or Corona at price higher than $2.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
4473,1,N,"<Fernando> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Frances>
... ommitted ...
--------------------",SELECT DISTINCT bar FROM Serves WHERE (beer = 'Amstel' OR beer = 'Corona') AND price > 2;,"SELECT DISTINCT likes.drinker FROM  serves
LEFT JOIN likes
    ON likes.beer = serves.beer
LEFT JOIN frequents
    on frequents.bar = serves.bar","{'student_result': [[None], ['Dan'], ['Coy'], ['Ben'], ['Amy'], ['Eve']], 'teacher_result': [['Down Under Pub'], ['James Joyce Pub'], ['Satisfaction'], ['The Edge']]}",Find names of bars that serve either Amstel or Corona at price higher than $2.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
4630,6,N,"<Bernemer Brunnchen|Talk of the Town> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Adel.es Restaurant|Akebono>
... ommitted ...
--------------------","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE NOT EXISTS (SELECT s1.beer FROM serves s1 WHERE s1.bar = b1.name AND NOT EXISTS (SELECT 1 FROM serves s2 WHERE s2.bar = b2.name AND s2.beer = s1.beer)) AND EXISTS (SELECT s2.beer FROM serves s2 WHERE s2.bar = b2.name AND NOT EXISTS (SELECT 1 FROM serves s1 WHERE s1.bar = b1.name AND s1.beer = s2.beer));","SELECT bar1, bar2 FROM (SELECT s1.bar AS bar1, s2.bar AS bar2, s2.beer FROM serves AS s1 JOIN serves AS s2 ON s1.bar != s2.bar EXCEPT SELECT s1.bar AS bar1, s2.bar AS bar2, s1.beer FROM serves AS s1 JOIN serves AS s2 ON s1.bar != s2.bar) AS q;","{'student_result': [['Down Under Pub', 'James Joyce Pub'], ['Down Under Pub', 'James Joyce Pub'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'Satisfaction'], ['James Joyce Pub', 'Down Under Pub'], ['James Joyce Pub', 'Satisfaction'], ['James Joyce Pub', 'Satisfaction'], ['James Joyce Pub', 'Talk of the Town'], ['James Joyce Pub', 'The Edge'], ['Satisfaction', 'James Joyce Pub'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'James Joyce Pub'], ['Talk of the Town', 'James Joyce Pub'], ['Talk of the Town', 'James Joyce Pub'], ['Talk of the Town', 'Satisfaction'], ['Talk of the Town', 'Satisfaction'], ['Talk of the Town', 'Satisfaction'], ['Talk of the Town', 'The Edge'], ['The Edge', 'James Joyce Pub'], ['The Edge', 'James Joyce Pub'], ['The Edge', 'Satisfaction'], ['The Edge', 'Satisfaction']], 'teacher_result': [['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction']]}","Find all (bar1, bar2) pairs where the set of beers served at bar1 is a proper subset of the those served at bar2; i.e., bar2 serves every beer that bar1 serves and plus some more.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
4730,9,N,"<God Jul - Winter Ale|2.75|Bistro 1904 am Hotel Kurfurst Wilhelm I.> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Coney Island Lager|2.5|Asia Thai Imbiss am Zoo>
... ommitted ...
--------------------","SELECT beer.name, min_price, bar FROM beer LEFT OUTER JOIN (SELECT beer, MIN(price) AS min_price FROM serves GROUP BY beer) t ON beer.name = t.beer LEFT OUTER JOIN serves ON beer.name = serves.beer AND min_price = serves.price;","SELECT s1.beer, s1.price, s1.bar
FROM serves as s1
JOIN serves as s2 ON s1.bar = s2.bar
GROUP BY s1.bar, s1.price, s1.beer
having s1.price = min(s2.price);","{'student_result': [['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Amstel', Decimal('1.50'), 'Talk of the Town'], ['Amstel', Decimal('1.75'), 'Satisfaction'], ['Amstel', Decimal('1.75'), 'The Edge'], ['Amstel', Decimal('1.00'), 'Down Under Pub']], 'teacher_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Talk of the Town']]}","Find, for each beer, its lowest serving price and the bar(s) serving it at this price. The output should be a list of (beer, price, bar) triples. If some beer B is not served anywhere, you should still output (B, NULL, NULL).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
4788,9,N,"<God Jul - Winter Ale|2.75|Bistro 1904 am Hotel Kurfurst Wilhelm I.> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<471 Extra ESB|2.25|Restaurant Hotel Bessunger Forst>
... ommitted ...
--------------------","SELECT beer.name, min_price, bar FROM beer LEFT OUTER JOIN (SELECT beer, MIN(price) AS min_price FROM serves GROUP BY beer) t ON beer.name = t.beer LEFT OUTER JOIN serves ON beer.name = serves.beer AND min_price = serves.price;","SELECT distinct s1.beer, s1.price, s1.bar
FROM serves as s1
JOIN serves as s2 ON s1.bar = s2.bar
GROUP BY s1.bar, s1.price, s1.beer
having s1.price = min(s2.price);","{'student_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Amstel', Decimal('1.50'), 'Talk of the Town'], ['Amstel', Decimal('1.75'), 'Satisfaction'], ['Amstel', Decimal('1.75'), 'The Edge']], 'teacher_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Talk of the Town']]}","Find, for each beer, its lowest serving price and the bar(s) serving it at this price. The output should be a list of (beer, price, bar) triples. If some beer B is not served anywhere, you should still output (B, NULL, NULL).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
4850,6,N,"<Bernemer Brunnchen|Talk of the Town> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Yorgun|Gaststatte Bosphorus>
... ommitted ...
--------------------","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE NOT EXISTS (SELECT s1.beer FROM serves s1 WHERE s1.bar = b1.name AND NOT EXISTS (SELECT 1 FROM serves s2 WHERE s2.bar = b2.name AND s2.beer = s1.beer)) AND EXISTS (SELECT s2.beer FROM serves s2 WHERE s2.bar = b2.name AND NOT EXISTS (SELECT 1 FROM serves s1 WHERE s1.bar = b1.name AND s1.beer = s2.beer));","SELECT barsbeer1.name, barsbeer2.name FROM (
    SELECT barsbeer.name as name, COUNT(barsbeer.name) as count FROM (
        SELECT b1.name FROM bar as b1 LEFT JOIN serves ON b1.name = serves.bar) as barsbeer
            GROUP BY barsbeer.name)  as barsbeer1, 
        (
    SELECT barsbeer.name as name, COUNT(barsbeer.name) as count FROM (
        SELECT b1.name FROM bar as b1 LEFT JOIN serves ON b1.name = serves.bar) as barsbeer
            GROUP BY barsbeer.name)  as barsbeer2

WHERE barsbeer1.count < barsbeer2.count;","{'student_result': [['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'James Joyce Pub'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'Satisfaction'], ['Talk of the Town', 'James Joyce Pub'], ['Talk of the Town', 'The Edge'], ['James Joyce Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['The Edge', 'James Joyce Pub']], 'teacher_result': [['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction']]}","Find all (bar1, bar2) pairs where the set of beers served at bar1 is a proper subset of the those served at bar2; i.e., bar2 serves every beer that bar1 serves and plus some more.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
4930,5,N,"<Clinton> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<None>
... ommitted ...
--------------------","SELECT name FROM drinker WHERE NOT EXISTS (SELECT f.bar FROM frequents f, serves s WHERE f.drinker = drinker.name AND f.bar = s.bar AND s.beer NOT IN (SELECT beer FROM likes WHERE drinker = drinker.name));","WITH 
	-- the number of beers served at each bar
	BeerServedBar AS 
	(SELECT bar AS bar, COUNT(beer) as NumBeerServed
	FROM serves
	GROUP BY bar),

	-- the number of bars frequented by each drinker
	BarsFrequented AS
	(SELECT DISTINCT frequents2.drinker as drinker,  COUNT(frequents2.bar) as NumBarFreq
	FROM frequents as frequents2
	RIGHT JOIN drinker as drinker2
	ON frequents2.drinker = drinker2.name
	GROUP BY frequents2.drinker
	ORDER BY frequents2.drinker ASC),

	-- the number of beers liked by each drinker
	BeersLiked AS
	(SELECT DISTINCT drinker1.name as drinker, COUNT(likes1.beer) as CountBeerLiked
	FROM likes as likes1
	RIGHT JOIN drinker as drinker1
	ON likes1.drinker = drinker1.name
	GROUP BY drinker1.name
	ORDER BY drinker1.name ASC),

	-- drinkers, and bars that serve all the beers they like
	DrinkerBarServeAllBeerLiked AS
	(SELECT Q2.drinker as drinker, Q2.bar as bar, BeersLiked.CountBeerLiked as CountBeerLiked 
	FROM BeersLiked,
		-- drinkers, bars, and the number of beers served there that they like
		(SELECT likes2.drinker as drinker, serves.bar as bar, COUNT(serves.bar) as CountBarServesBeerLiked
		FROM serves, likes as likes2
		WHERE likes2.beer = serves.beer
		GROUP BY likes2.drinker, serves.bar
		ORDER BY likes2.drinker ASC, serves.bar ASC) AS Q2
	WHERE Q2.drinker = BeersLiked.drinker
	AND Q2.CountBarServesBeerLiked = BeersLiked.CountBeerLiked) 

SELECT DISTINCT Q5.drinker
FROM BarsFrequented
LEFT JOIN
	(SELECT DISTINCT Q4.drinker as drinker, COUNT(Q4.bar) as NumBarFreqOnlyBeerLike
	FROM
		-- the bars that drinkers frequent that ONLY serve the beer they like
		(SELECT DrinkerBarServeAllBeerLiked.drinker as drinker, DrinkerBarServeAllBeerLiked.bar as bar, DrinkerBarServeAllBeerLiked.CountBeerLiked
		FROM BeerServedBar, DrinkerBarServeAllBeerLiked
		WHERE DrinkerBarServeAllBeerLiked.bar = BeerServedBar.bar
		AND DrinkerBarServeAllBeerLiked.CountBeerLiked = BeerServedBar.NumBeerServed) as Q4
	GROUP BY Q4.drinker) as Q5
ON BarsFrequented.drinker = Q5.drinker IS NOT NULL
AND BarsFrequented.NumBarFreq = Q5.NumBarFreqOnlyBeerLike;","{'student_result': [['Ben'], [None]], 'teacher_result': []}",Find names of all drinkers who do not frequent any bar that serves any beer they do not like.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
5001,8,N,"1-th tuple in answer should be <471 Extra ESB|0.25|2.375> instead of <Old Bawdy 2006|0.75|2.8>
(there may be other errors too)
your output >>>>>
--------------------
<Old Bawdy 2006|0.75|2.8>
... ommitted ...
--------------------","SELECT beer, MAX(price) - MIN(price) AS price_gap, AVG(price) AS avg_price FROM serves WHERE beer IN (SELECT s.beer FROM serves s, frequents f WHERE s.bar = f.bar AND f.drinker LIKE 'B%' GROUP BY s.beer HAVING COUNT(DISTINCT s.bar) >= 2) GROUP BY beer ORDER BY beer;","WITH
    beer_price_gaps AS (
        SELECT q.beer,
            q.max_price - q.min_price AS price_gap
        FROM (
            SELECT beer,
                COUNT(bar) AS bar_count,
                MIN(price) AS min_price,
                MAX(price) AS max_price
            FROM frequents
            NATURAL JOIN serves
            WHERE drinker LIKE 'B%'
            GROUP BY serves.beer
        ) AS q
        WHERE q.bar_count >= 2
    ),
    avg_prices AS (
        SELECT beer,
            AVG(price) AS avg_price
        FROM serves
        GROUP BY beer
    )
SELECT beer_price_gaps.beer, beer_price_gaps.price_gap, avg_prices.avg_price
FROM beer_price_gaps NATURAL JOIN avg_prices;","{'student_result': [['Budweiser', Decimal('0.05'), Decimal('2.3000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Amstel', Decimal('0.75'), Decimal('1.4000000000000000')]], 'teacher_result': [['Amstel', Decimal('0.75'), Decimal('1.4000000000000000')], ['Budweiser', Decimal('0.30'), Decimal('2.3000000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')]]}","Find, for each beer served at least 2 bars that frequented by drinkers whose name starts with 'B', the difference of maximum and minimum (price gap) and average price of the beers in all serving bars, order by bar name. I.e., your query should output beer, price_gap, and avg_price.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
5238,1,N,"<Meagan> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Ben>
... ommitted ...
--------------------",SELECT DISTINCT bar FROM Serves WHERE (beer = 'Amstel' OR beer = 'Corona') AND price > 2;,SELECT drinker.name FROM drinker JOIN frequents ON drinker.name = frequents.drinker JOIN serves ON frequents.bar = serves.bar WHERE serves.beer = 'Corona' AND drinker.name NOT IN ( SELECT drinker FROM likes WHERE beer = 'Corona' );,"{'student_result': [['Ben'], ['Ben'], ['Coy'], ['Coy']], 'teacher_result': [['Down Under Pub'], ['James Joyce Pub'], ['Satisfaction'], ['The Edge']]}",Find names of bars that serve either Amstel or Corona at price higher than $2.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
5287,3,N,"<3> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<5>
... ommitted ...
--------------------",SELECT bar FROM Serves GROUP BY bar HAVING COUNT(beer) >= 5;,"select count(beer)
from serves
group by bar;","{'student_result': [[2], [5], [4], [3], [3]], 'teacher_result': [['Satisfaction']]}",Find the names of all bars that serve at least 5 beers.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
5345,4,N,"<Frances|Ronald> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Jeffrey|Erin>
... ommitted ...
--------------------","SELECT f1.drinker, f2.drinker FROM (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f1, (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f2 WHERE f1.drinker < f2.drinker AND f1.st = f2.st","select distinct A.drinker, B.drinker
from frequents A, frequents B
where A.times_a_week = B.times_a_week","{'student_result': [['Amy', 'Ben'], ['Dan', 'Eve'], ['Coy', 'Ben'], ['Amy', 'Eve'], ['Amy', 'Amy'], ['Ben', 'Eve'], ['Eve', 'Eve'], ['Amy', 'Dan'], ['Coy', 'Coy'], ['Dan', 'Amy'], ['Eve', 'Ben'], ['Eve', 'Dan'], ['Dan', 'Ben'], ['Dan', 'Dan'], ['Ben', 'Coy'], ['Ben', 'Dan'], ['Ben', 'Amy'], ['Dan', 'Coy'], ['Coy', 'Dan'], ['Eve', 'Amy'], ['Ben', 'Ben']], 'teacher_result': [['Coy', 'Eve'], ['Amy', 'Eve'], ['Amy', 'Coy']]}","Find the pair of drinkers who frequent bars the same total number of times per week. Don't list (drinkerA, drinkerA). Only list pairs (drinkerA, drinkerB) where drinkerA < drinkerB  in the answer; don't list (drinkerB, drinkerA) again.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
5463,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Bistro 1904 am Hotel Kurfurst Wilhelm I.|10|3.083333333|Zachary>
(there may be other errors too)
your output >>>>>
--------------------
<Bistro 1904 am Hotel Kurfurst Wilhelm I.|10|3.083333333|Zachary>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","SELECT 
    b.name, 
    COALESCE(COUNT(DISTINCT f.drinker), 0) as total_num_drinker, 
    COALESCE(AVG(s.price), NULL) as avg_price, 
    most_frequent.drinker as most_reg_drinker
FROM bar b
JOIN serves s ON s.bar = b.name
JOIN frequents f ON f.bar = b.name
LEFT JOIN (
    SELECT bar, drinker
    FROM frequents
    WHERE (bar, times_a_week) IN (
        SELECT bar, MAX(times_a_week)
        FROM frequents
        GROUP BY bar
    )
) AS most_frequent ON b.name = most_frequent.bar
GROUP BY b.name, most_frequent.drinker
ORDER BY most_frequent.drinker DESC, b.name;","{'student_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Eve'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Dan'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
5564,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Donerhaus Dest|270|2.95|Faith>
(there may be other errors too)
your output >>>>>
--------------------
<Donerhaus Dest|270|2.95|Faith>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","SELECT
    b.name AS bar_name,
    COALESCE(SUM(f.times_a_week), 0) AS total_num_drinker,
    AVG(s.price) AS avg_price,
    (
        SELECT name
        FROM (
            SELECT d.name, SUM(f.times_a_week) AS total_times
            FROM drinker d
            JOIN frequents f ON d.name = f.drinker
            WHERE f.bar = b.name
            GROUP BY d.name
            ORDER BY total_times DESC, d.name ASC
            LIMIT 1
        ) AS max_reg_drinker
    ) AS most_reg_drinker
FROM bar b
LEFT JOIN frequents f ON b.name = f.bar
LEFT JOIN serves s ON b.name = s.bar
GROUP BY b.name
ORDER BY total_num_drinker DESC, b.name ASC;
","{'student_result': [['James Joyce Pub', 24, Decimal('3.6250000000000000'), 'Amy'], ['Satisfaction', 20, Decimal('4.3000000000000000'), 'Ben'], ['Down Under Pub', 9, Decimal('3.4166666666666667'), 'Dan'], ['Talk of the Town', 6, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 6, Decimal('3.7500000000000000'), 'Coy']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
5586,9,N,"<Blue Moon|Gasthof Altes Casino Restaurant|2.75> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Guinness|James Joyce Pub|5.0>
... ommitted ...
--------------------","SELECT beer.name, min_price, bar FROM beer LEFT OUTER JOIN (SELECT beer, MIN(price) AS min_price FROM serves GROUP BY beer) t ON beer.name = t.beer LEFT OUTER JOIN serves ON beer.name = serves.beer AND min_price = serves.price;","SELECT b.name AS beer, s.bar, s.price FROM beer b LEFT JOIN serves s ON b.name = s.beer WHERE s.price IS NULL OR s.price = ( SELECT MIN(price) FROM serves WHERE beer = b.name );","{'student_result': [['Amstel', 'Down Under Pub', Decimal('1.00')], ['Corona', 'Down Under Pub', Decimal('7.00')], ['Corona', 'The Edge', Decimal('7.00')], ['Amstel', 'James Joyce Pub', Decimal('1.00')], ['Corona', 'James Joyce Pub', Decimal('7.00')], ['Erdinger', 'James Joyce Pub', Decimal('3.50')], ['Corona', 'Satisfaction', Decimal('7.00')], ['Dixie', 'Satisfaction', Decimal('2.75')], ['Full Sail', 'Satisfaction', Decimal('7.75')], ['Budweiser', 'Talk of the Town', Decimal('2.20')]], 'teacher_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Talk of the Town']]}","Find, for each beer, its lowest serving price and the bar(s) serving it at this price. The output should be a list of (beer, price, bar) triples. If some beer B is not served anywhere, you should still output (B, NULL, NULL).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
5598,8,N,"23-th tuple in answer should be <Calabaza Blanca|0.0|3.0> instead of <Calabaza Blanca|3.0|3.0>
(there may be other errors too)
your output >>>>>
--------------------
<471 Extra ESB|0.25|2.375>
... ommitted ...
--------------------","SELECT beer, MAX(price) - MIN(price) AS price_gap, AVG(price) AS avg_price FROM serves WHERE beer IN (SELECT s.beer FROM serves s, frequents f WHERE s.bar = f.bar AND f.drinker LIKE 'B%' GROUP BY s.beer HAVING COUNT(DISTINCT s.bar) >= 2) GROUP BY beer ORDER BY beer;","WITH BeerBars AS (
    SELECT 
        serves.beer AS beer,
        MAX(serves.price) AS max_price,
        MIN(serves.price) AS min_price,
        AVG(serves.price) AS avg_price
    FROM 
        serves
    WHERE 
        serves.bar IN (SELECT frequents.bar FROM frequents WHERE frequents.drinker LIKE 'B%')
    GROUP BY 
        serves.beer
    HAVING 
        COUNT(DISTINCT serves.bar) >= 2
)

SELECT 
    bb.beer AS beer,
    CASE 
        WHEN max_price = min_price THEN max_price
        ELSE max_price - min_price
    END AS price_gap,
    bb.avg_price AS avg_price
FROM 
    BeerBars bb
ORDER BY 
    bb.beer;","{'student_result': [['Amstel', Decimal('0.75'), Decimal('1.4166666666666667')], ['Budweiser', Decimal('0.05'), Decimal('2.2250000000000000')], ['Corona', Decimal('7.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')]], 'teacher_result': [['Amstel', Decimal('0.75'), Decimal('1.4000000000000000')], ['Budweiser', Decimal('0.30'), Decimal('2.3000000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')]]}","Find, for each beer served at least 2 bars that frequented by drinkers whose name starts with 'B', the difference of maximum and minimum (price gap) and average price of the beers in all serving bars, order by bar name. I.e., your query should output beer, price_gap, and avg_price.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
5632,6,N,"<Man Wah|Pik-Dame> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Adel.es Restaurant|Akebono>
... ommitted ...
--------------------","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE NOT EXISTS (SELECT s1.beer FROM serves s1 WHERE s1.bar = b1.name AND NOT EXISTS (SELECT 1 FROM serves s2 WHERE s2.bar = b2.name AND s2.beer = s1.beer)) AND EXISTS (SELECT s2.beer FROM serves s2 WHERE s2.bar = b2.name AND NOT EXISTS (SELECT 1 FROM serves s1 WHERE s1.bar = b1.name AND s1.beer = s2.beer));","SELECT s1.bar AS bar1, s2.bar AS bar2
FROM serves s1
JOIN serves s2 ON s1.beer = s2.beer AND s1.bar < s2.bar
GROUP BY s1.bar, s2.bar
HAVING COUNT(DISTINCT s1.beer) = COUNT(s1.beer);","{'student_result': [['Down Under Pub', 'James Joyce Pub'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'Talk of the Town'], ['Down Under Pub', 'The Edge'], ['James Joyce Pub', 'Satisfaction'], ['James Joyce Pub', 'Talk of the Town'], ['James Joyce Pub', 'The Edge'], ['Satisfaction', 'Talk of the Town'], ['Satisfaction', 'The Edge'], ['Talk of the Town', 'The Edge']], 'teacher_result': [['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction']]}","Find all (bar1, bar2) pairs where the set of beers served at bar1 is a proper subset of the those served at bar2; i.e., bar2 serves every beer that bar1 serves and plus some more.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
5746,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Donerhaus Dest|8|2.95|Faith>
(there may be other errors too)
your output >>>>>
--------------------
<Donerhaus Dest|8|2.95|Faith>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","select bar.name,
	COALESCE(tm.total_num_drinker, 0),
    COALESCE(ap.avg_price, NULL),
    COALESCE(tm.most_reg_drinker, NULL)
from bar
left join (select u.bar, count(u.drinker) as total_num_drinker, min(u.drinker) as most_reg_drinker
			from frequents as u
			join (select bar, max(times_a_week) as max_times
					from frequents
					group by bar) as mrd
			on u.bar = mrd.bar
			and u.times_a_week = mrd.max_times
			group by u.bar) as tm
on bar.name = tm.bar
left join (select bar, avg(price) as avg_price
			from serves
			group by bar) as ap
on bar.name = ap.bar

order by tm.total_num_drinker desc, bar.name, tm.most_reg_drinker","{'student_result': [['James Joyce Pub', 2, Decimal('3.6250000000000000'), 'Amy'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy'], ['Down Under Pub', 1, Decimal('3.4166666666666667'), 'Dan'], ['Talk of the Town', 1, Decimal('1.8500000000000000'), 'Dan']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
5824,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Donerhaus Dest|16|2.95|None>
(there may be other errors too)
your output >>>>>
--------------------
<Donerhaus Dest|16|2.95|None>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","WITH numDrinker AS (
    SELECT bar, COUNT(drinker) AS num
    FROM frequents
    GROUP BY bar
),
avgPrice AS (
    SELECT bar, AVG(price) AS price
    FROM serves
    GROUP BY bar
),
mostReg AS (
    SELECT bar, drinker
    FROM frequents f1
    WHERE f1.times_a_week = (
        SELECT MAX(f2.times_a_week)
        FROM frequents f2
        WHERE f1.bar = f2.bar
    )
    AND f1.drinker = (
        SELECT MIN(f2.drinker)
        FROM frequents f2
        WHERE f1.bar = f2.bar AND f2.times_a_week = f2.times_a_week
    )
)
SELECT 
    bar.name,
    COALESCE(numDrinker.num, 0) AS num,
    avgPrice.price,
    mostReg.drinker
FROM bar
LEFT JOIN numDrinker ON bar.name = numDrinker.bar
LEFT JOIN avgPrice ON bar.name = avgPrice.bar
LEFT JOIN mostReg ON bar.name = mostReg.bar
ORDER BY 
    num DESC,
    bar.name;","{'student_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), None], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), None], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
5852,4,N,"<April|Ben> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<April|Ben>
--------------------","SELECT f1.drinker, f2.drinker FROM (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f1, (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f2 WHERE f1.drinker < f2.drinker AND f1.st = f2.st","WITH total_frequencies AS (
    SELECT f1.drinker AS drinker1, f2.drinker AS drinker2, SUM(f1.times_a_week) AS total_freq
    FROM frequents f1, frequents f2
    WHERE f1.drinker < f2.drinker AND f1.bar = f2.bar
    GROUP BY f1.drinker, f2.drinker
)
SELECT drinker1, drinker2
FROM total_frequencies
WHERE total_freq = (
    SELECT MAX(total_freq)
    FROM total_frequencies
);","{'student_result': [['Ben', 'Dan']], 'teacher_result': [['Coy', 'Eve'], ['Amy', 'Eve'], ['Amy', 'Coy']]}","Find the pair of drinkers who frequent bars the same total number of times per week. Don't list (drinkerA, drinkerA). Only list pairs (drinkerA, drinkerB) where drinkerA < drinkerB  in the answer; don't list (drinkerB, drinkerA) again.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
5914,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Donerhaus Dest|16|2.95|Jerry>
(there may be other errors too)
your output >>>>>
--------------------
<Donerhaus Dest|16|2.95|Jerry>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","WITH frequents_count AS (
    SELECT 
        bar,
        COUNT(DISTINCT drinker) AS total_drinkers
    FROM frequents
    GROUP BY bar
),
average_price AS (
    SELECT 
        bar,
        AVG(price) AS avg_price
    FROM serves
    GROUP BY bar
),
top_drinker AS (
    SELECT 
        bar,
        drinker,
        times_a_week,
        ROW_NUMBER() OVER (PARTITION BY bar ORDER BY times_a_week DESC) AS rn
    FROM frequents
)
SELECT
    b.name AS bar_name,
    fc.total_drinkers,
    ap.avg_price,
    td.drinker AS top_drinker
FROM
    bar b
LEFT JOIN frequents_count fc ON b.name = fc.bar
LEFT JOIN average_price ap ON b.name = ap.bar
LEFT JOIN top_drinker td ON b.name = td.bar AND td.rn = 1
ORDER BY
    fc.total_drinkers DESC;
","{'student_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Eve'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
5923,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Donerhaus Dest|16|2.95|Amanda>
(there may be other errors too)
your output >>>>>
--------------------
<Donerhaus Dest|16|2.95|Amanda>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","SELECT 
    b.name AS bar_name,
    COUNT(DISTINCT f.drinker) AS total_frequenters,
    AVG(s.price) AS average_beer_price,
    (
        SELECT d.name
        FROM frequents f2
        JOIN drinker d ON f2.drinker = d.name
        GROUP BY f2.bar, d.name
        ORDER BY COUNT(f2.times_a_week) DESC
        LIMIT 1
    ) AS most_frequent_drinker
FROM bar b
LEFT JOIN frequents f ON b.name = f.bar
LEFT JOIN serves s ON b.name = s.bar
GROUP BY b.name
ORDER BY total_frequenters DESC;","{'student_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Dan'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Dan'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Dan']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
6059,8,N,"1-th tuple in answer should be <471 Extra ESB|0.25|2.375> instead of <Long Leg English Fuggles Hop Ale|3.25|Gaststaette Oelgraben>
(there may be other errors too)
your output >>>>>
--------------------
<Long Leg English Fuggles Hop Ale|3.25|Gaststaette Oelgraben>
... ommitted ...
--------------------","SELECT beer, MAX(price) - MIN(price) AS price_gap, AVG(price) AS avg_price FROM serves WHERE beer IN (SELECT s.beer FROM serves s, frequents f WHERE s.bar = f.bar AND f.drinker LIKE 'B%' GROUP BY s.beer HAVING COUNT(DISTINCT s.bar) >= 2) GROUP BY beer ORDER BY beer;","SELECT B.name AS beer, 

       MIN(S.price) AS price, 

       S.bar AS bar

FROM Beer B

LEFT JOIN Serves S ON B.name = S.beer

GROUP BY B.name, S.bar;
","{'student_result': [['Dixie', Decimal('3.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Amstel', Decimal('1.75'), 'The Edge'], ['Budweiser', Decimal('2.50'), 'The Edge'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Corona', Decimal('7.00'), 'The Edge'], ['Budweiser', Decimal('2.20'), 'Talk of the Town'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Budweiser', Decimal('2.25'), 'Satisfaction'], ['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Amstel', Decimal('1.75'), 'Satisfaction'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Amstel', Decimal('1.50'), 'Talk of the Town'], ['Budweiser', Decimal('2.25'), 'Down Under Pub']], 'teacher_result': [['Amstel', Decimal('0.75'), Decimal('1.4000000000000000')], ['Budweiser', Decimal('0.30'), Decimal('2.3000000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')]]}","Find, for each beer served at least 2 bars that frequented by drinkers whose name starts with 'B', the difference of maximum and minimum (price gap) and average price of the beers in all serving bars, order by bar name. I.e., your query should output beer, price_gap, and avg_price.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
6147,8,N,"23-th tuple in answer should be <Calabaza Blanca|0.0|3.0> instead of <Cardinal Pale Ale|1.5|3.0>
(there may be other errors too)
your output >>>>>
--------------------
<471 Extra ESB|0.25|2.375>
... ommitted ...
--------------------","SELECT beer, MAX(price) - MIN(price) AS price_gap, AVG(price) AS avg_price FROM serves WHERE beer IN (SELECT s.beer FROM serves s, frequents f WHERE s.bar = f.bar AND f.drinker LIKE 'B%' GROUP BY s.beer HAVING COUNT(DISTINCT s.bar) >= 2) GROUP BY beer ORDER BY beer;","WITH beer_bars AS (
    SELECT s.beer, s.price
    FROM serves s
    WHERE s.bar IN (
        SELECT f.bar
        FROM frequents f
        JOIN drinker d ON f.drinker = d.name
        WHERE d.name LIKE 'B%'
    )
)
SELECT bb.beer,
       MAX(bb.price) - MIN(bb.price) AS price_gap,
       AVG(bb.price) AS avg_price
FROM beer_bars bb
GROUP BY bb.beer
HAVING COUNT(DISTINCT bb.price) >= 2
ORDER BY bb.beer;","{'student_result': [['Amstel', Decimal('0.75'), Decimal('1.4166666666666667')], ['Budweiser', Decimal('0.05'), Decimal('2.2250000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')]], 'teacher_result': [['Amstel', Decimal('0.75'), Decimal('1.4000000000000000')], ['Budweiser', Decimal('0.30'), Decimal('2.3000000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')]]}","Find, for each beer served at least 2 bars that frequented by drinkers whose name starts with 'B', the difference of maximum and minimum (price gap) and average price of the beers in all serving bars, order by bar name. I.e., your query should output beer, price_gap, and avg_price.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
6186,3,N,"<Meagan> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Alan>
... ommitted ...
--------------------",SELECT bar FROM Serves GROUP BY bar HAVING COUNT(beer) >= 5;,"SELECT DISTINCT d1.name 
FROM drinker d1 
JOIN frequents freq ON d1.name = freq.drinker 
JOIN bar b1 ON freq.bar = b1.name 
JOIN serves s1 ON b1.name = s1.bar 
WHERE s1.beer = 'Corona' AND d1.name NOT IN (
    SELECT likes.drinker 
    FROM likes 
    JOIN beer b2 ON likes.beer = b2.name 
    WHERE b2.name = 'Corona'
    GROUP BY likes.drinker
);","{'student_result': [['Ben'], ['Coy']], 'teacher_result': [['Satisfaction']]}",Find the names of all bars that serve at least 5 beers.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
6375,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Bernemer Brunnchen|12|3.0|4>
(there may be other errors too)
your output >>>>>
--------------------
<Bernemer Brunnchen|12|3.0|4>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","Select bar.name, COUNT(frequents.drinker), AVG(serves.price), MAX(frequents.times_a_week)  
FROM bar
LEFT JOIN frequents ON bar.name = frequents.bar
LEFT JOIN serves ON bar.name = serves.bar
GROUP BY bar.name","{'student_result': [['Down Under Pub', 6, Decimal('3.4166666666666667'), 2], ['Talk of the Town', 4, Decimal('1.8500000000000000'), 2], ['Satisfaction', 10, Decimal('4.3000000000000000'), 2], ['James Joyce Pub', 16, Decimal('3.6250000000000000'), 2], ['The Edge', 6, Decimal('3.7500000000000000'), 1]], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
6447,8,N,"1-th tuple in answer should be <471 Extra ESB|0.25|2.375> instead of <Amstel|2.25|2.272727273>
(there may be other errors too)
your output >>>>>
--------------------
<Amstel|2.25|2.272727273>
... ommitted ...
--------------------","SELECT beer, MAX(price) - MIN(price) AS price_gap, AVG(price) AS avg_price FROM serves WHERE beer IN (SELECT s.beer FROM serves s, frequents f WHERE s.bar = f.bar AND f.drinker LIKE 'B%' GROUP BY s.beer HAVING COUNT(DISTINCT s.bar) >= 2) GROUP BY beer ORDER BY beer;","WITH Drinkers_B AS (
    SELECT DISTINCT f.bar, l.beer
    FROM frequents f
    JOIN likes l ON f.drinker = l.drinker
    JOIN drinker d ON d.name LIKE 'B%' AND d.name = f.drinker
),
Beer_Served_In_Bars AS (
    SELECT s.beer, s.bar, s.price
    FROM serves s
    JOIN Drinkers_B db ON s.bar = db.bar AND s.beer = db.beer
),
Beer_Aggregates AS (
    SELECT beer, 
           MAX(price) - MIN(price) AS price_gap,
           AVG(price) AS avg_price
    FROM Beer_Served_In_Bars
    GROUP BY beer
    HAVING COUNT(DISTINCT bar) >= 2
)
SELECT beer, price_gap, avg_price
FROM Beer_Aggregates
ORDER BY beer;","{'student_result': [['Amstel', Decimal('0.75'), Decimal('1.4166666666666667')], ['Budweiser', Decimal('0.05'), Decimal('2.2250000000000000')]], 'teacher_result': [['Amstel', Decimal('0.75'), Decimal('1.4000000000000000')], ['Budweiser', Decimal('0.30'), Decimal('2.3000000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')]]}","Find, for each beer served at least 2 bars that frequented by drinkers whose name starts with 'B', the difference of maximum and minimum (price gap) and average price of the beers in all serving bars, order by bar name. I.e., your query should output beer, price_gap, and avg_price.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
6494,8,N,"1-th tuple in answer should be <471 Extra ESB|0.25|2.375> instead of <Old Bawdy 2006|0.75|2.8>
(there may be other errors too)
your output >>>>>
--------------------
<Old Bawdy 2006|0.75|2.8>
... ommitted ...
--------------------","SELECT beer, MAX(price) - MIN(price) AS price_gap, AVG(price) AS avg_price FROM serves WHERE beer IN (SELECT s.beer FROM serves s, frequents f WHERE s.bar = f.bar AND f.drinker LIKE 'B%' GROUP BY s.beer HAVING COUNT(DISTINCT s.bar) >= 2) GROUP BY beer ORDER BY beer;","With BarFreq AS (
	SELECT DISTINCT bar From frequents
	WHERE drinker like 'B%'
),
beerServed AS (
	SELECT s.beer, s.bar, s.price from serves s
	WHERE s.bar in ( SELECT bar from BarFreq)
),
beerServedCount AS (
	SELECT beer, COUNT(bar) as barCount FROM beerServed
	GROUP BY beer HAVING COUNT(bar) > 2
)
SELECT bs.beer, MAX(bs.price)-MIN(bs.price) AS price_gap, AVG(price) AS avg_price
FROM beerServed bs
JOIN beerServedCount bsc ON bs.beer = bsc.beer
GROUP BY bs.beer
","{'student_result': [['Amstel', Decimal('0.75'), Decimal('1.4166666666666667')]], 'teacher_result': [['Amstel', Decimal('0.75'), Decimal('1.4000000000000000')], ['Budweiser', Decimal('0.30'), Decimal('2.3000000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')]]}","Find, for each beer served at least 2 bars that frequented by drinkers whose name starts with 'B', the difference of maximum and minimum (price gap) and average price of the beers in all serving bars, order by bar name. I.e., your query should output beer, price_gap, and avg_price.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
6499,8,N,"1-th tuple in answer should be <471 Extra ESB|0.25|2.375> instead of <Old Bawdy 2006|0.75|2.8>
(there may be other errors too)
your output >>>>>
--------------------
<Old Bawdy 2006|0.75|2.8>
... ommitted ...
--------------------","SELECT beer, MAX(price) - MIN(price) AS price_gap, AVG(price) AS avg_price FROM serves WHERE beer IN (SELECT s.beer FROM serves s, frequents f WHERE s.bar = f.bar AND f.drinker LIKE 'B%' GROUP BY s.beer HAVING COUNT(DISTINCT s.bar) >= 2) GROUP BY beer ORDER BY beer;","With BarFreq AS (
	SELECT DISTINCT bar From frequents
	WHERE drinker like 'B%'
),
beerServed AS (
	SELECT s.beer, s.bar, s.price from serves s
	WHERE s.bar in ( SELECT bar from BarFreq)
),
beerServedCount AS (
	SELECT beer, COUNT(bar) as barCount FROM beerServed
	GROUP BY beer HAVING COUNT(bar) >= 2
)
SELECT bs.beer, MAX(bs.price)-MIN(bs.price) AS price_gap, AVG(price) AS avg_price
FROM beerServed bs
JOIN beerServedCount bsc ON bs.beer = bsc.beer
GROUP BY bs.beer
","{'student_result': [['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')], ['Budweiser', Decimal('0.05'), Decimal('2.2250000000000000')], ['Amstel', Decimal('0.75'), Decimal('1.4166666666666667')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')]], 'teacher_result': [['Amstel', Decimal('0.75'), Decimal('1.4000000000000000')], ['Budweiser', Decimal('0.30'), Decimal('2.3000000000000000')], ['Corona', Decimal('0.00'), Decimal('7.0000000000000000')], ['Dixie', Decimal('0.25'), Decimal('2.8750000000000000')]]}","Find, for each beer served at least 2 bars that frequented by drinkers whose name starts with 'B', the difference of maximum and minimum (price gap) and average price of the beers in all serving bars, order by bar name. I.e., your query should output beer, price_gap, and avg_price.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
6509,9,N,"<Gaststatte Metzger|1.75|Gaststatte Metzger> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<James Joyce Pub|3.5|James Joyce Pub>
... ommitted ...
--------------------","SELECT beer.name, min_price, bar FROM beer LEFT OUTER JOIN (SELECT beer, MIN(price) AS min_price FROM serves GROUP BY beer) t ON beer.name = t.beer LEFT OUTER JOIN serves ON beer.name = serves.beer AND min_price = serves.price;","WITH MinPriceBeer AS (
	SELECT beer, MIN(price) AS minPrice FROM Serves
	GROUP BY beer
),
BarServedMinPrice AS (
	SELECT s.beer, s.bar, s.price FROM Serves s
	JOIN MinPriceBeer mpb ON s.beer = mpb.beer AND s.price = mpb.minPrice
)
SELECT b.name, bsmp.price, bsmp.bar
FROM bar b
LEFT JOIN BarServedMinPrice bsmp on b.name = bsmp.bar","{'student_result': [['Down Under Pub', Decimal('1.00'), 'Down Under Pub'], ['Down Under Pub', Decimal('7.00'), 'Down Under Pub'], ['The Edge', Decimal('7.00'), 'The Edge'], ['James Joyce Pub', Decimal('1.00'), 'James Joyce Pub'], ['James Joyce Pub', Decimal('7.00'), 'James Joyce Pub'], ['James Joyce Pub', Decimal('3.50'), 'James Joyce Pub'], ['Satisfaction', Decimal('7.00'), 'Satisfaction'], ['Satisfaction', Decimal('2.75'), 'Satisfaction'], ['Satisfaction', Decimal('7.75'), 'Satisfaction'], ['Talk of the Town', Decimal('2.20'), 'Talk of the Town']], 'teacher_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Talk of the Town']]}","Find, for each beer, its lowest serving price and the bar(s) serving it at this price. The output should be a list of (beer, price, bar) triples. If some beer B is not served anywhere, you should still output (B, NULL, NULL).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
6559,7,N,"3-th tuple in answer should be <Altes Sudhaus|11|3.0|Curtis> instead of <Rhodos|11|2.9375|Adrienne>
(there may be other errors too)
your output >>>>>
--------------------
<Donerhaus Dest|16|2.95|Faith>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","WITH total_drinkers AS (
	SELECT bar, COUNT(drinker) AS total_num_drinker
	FROM frequents
	GROUP BY bar
),
avg_prices AS (
	SELECT bar, AVG(price) AS avg_price
	FROM serves
	GROUP BY bar
),
most_reg_drinkers AS (
	SELECT frequents.bar, frequents.drinker,
		ROW_NUMBER() OVER (PARTITION BY frequents.bar ORDER BY MAX(frequents.times_a_week) DESC, frequents.drinker) AS rnk
	FROM frequents
	GROUP BY frequents.bar, frequents.drinker
)
SELECT bar.name AS bar,
		COALESCE(total_drinkers.total_num_drinker, 0) AS total_num_drinker,
		avg_prices.avg_price,
		CASE 
           WHEN total_drinkers.total_num_drinker = 0 THEN NULL
           ELSE most_reg_drinkers.drinker
       	END
FROM bar
LEFT JOIN total_drinkers ON bar.name = total_drinkers.bar
LEFT JOIN avg_prices ON bar.name = avg_prices.bar
LEFT JOIN (
	SELECT bar, drinker
	FROM most_reg_drinkers
	WHERE rnk = 1
) most_reg_drinkers ON bar.name = most_reg_drinkers.bar
ORDER BY total_num_drinker DESC, bar DESC;
		
","{'student_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
6565,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Bernemer Brunnchen|12|3.0|Robin>
(there may be other errors too)
your output >>>>>
--------------------
<Bernemer Brunnchen|12|3.0|Robin>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","Select b1.name, COUNT(f1.drinker), AVG(serves.price), MAX(f1.drinker)
FROM bar as b1
LEFT JOIN serves ON b1.name = serves.bar
LEFT JOIN frequents as f1 ON b1.name = f1.bar
GROUP BY b1.name","{'student_result': [['Down Under Pub', 6, Decimal('3.4166666666666667'), 'Dan'], ['Talk of the Town', 4, Decimal('1.8500000000000000'), 'Dan'], ['Satisfaction', 10, Decimal('4.3000000000000000'), 'Dan'], ['James Joyce Pub', 16, Decimal('3.6250000000000000'), 'Eve'], ['The Edge', 6, Decimal('3.7500000000000000'), 'Dan']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
6602,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Pizzeria Amalfi|1|3.5|Roger>
(there may be other errors too)
your output >>>>>
--------------------
<Pizzeria Amalfi|1|3.5|Roger>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","Select b1.name, COUNT(f1.drinker), AVG(s1.price), MIN(f1.drinker)
FROM bar as b1, serves as s1, frequents as f1
WHERE f1.bar = b1.name AND s1.bar = b1.name
AND NOT EXISTS (SELECT * FROM frequents as f2 WHERE f2.times_a_week > f1.times_a_week AND f1.bar = f2.bar)
GROUP BY b1.name

--LEFT JOIN serves ON b1.name = serves.bar
--LEFT JOIN frequents as f1 ON b1.name = f1.bar

ORDER BY COUNT(f1.drinker)","{'student_result': [['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['Down Under Pub', 3, Decimal('3.4166666666666667'), 'Dan'], ['The Edge', 6, Decimal('3.7500000000000000'), 'Coy'], ['James Joyce Pub', 8, Decimal('3.6250000000000000'), 'Amy'], ['Satisfaction', 10, Decimal('4.3000000000000000'), 'Ben']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
6616,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Adel.es Restaurant|Ben|3.5|Ben>
(there may be other errors too)
your output >>>>>
--------------------
<Adel.es Restaurant|Ben|3.5|Ben>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","Select b1.name, f1.drinker, s1.price, f1.drinker
FROM bar as b1, serves as s1, frequents as f1
WHERE f1.bar = b1.name AND s1.bar = b1.name
ORDER BY b1.name","{'student_result': [['Down Under Pub', 'Dan', Decimal('1.00'), 'Dan'], ['Down Under Pub', 'Coy', Decimal('1.00'), 'Coy'], ['Down Under Pub', 'Dan', Decimal('2.25'), 'Dan'], ['Down Under Pub', 'Coy', Decimal('2.25'), 'Coy'], ['Down Under Pub', 'Dan', Decimal('7.00'), 'Dan'], ['Down Under Pub', 'Coy', Decimal('7.00'), 'Coy'], ['James Joyce Pub', 'Ben', Decimal('3.50'), 'Ben'], ['James Joyce Pub', 'Eve', Decimal('1.00'), 'Eve'], ['James Joyce Pub', 'Dan', Decimal('1.00'), 'Dan'], ['James Joyce Pub', 'Ben', Decimal('1.00'), 'Ben'], ['James Joyce Pub', 'Amy', Decimal('1.00'), 'Amy'], ['James Joyce Pub', 'Eve', Decimal('7.00'), 'Eve'], ['James Joyce Pub', 'Dan', Decimal('7.00'), 'Dan'], ['James Joyce Pub', 'Ben', Decimal('7.00'), 'Ben'], ['James Joyce Pub', 'Amy', Decimal('7.00'), 'Amy'], ['James Joyce Pub', 'Eve', Decimal('3.00'), 'Eve'], ['James Joyce Pub', 'Dan', Decimal('3.00'), 'Dan'], ['James Joyce Pub', 'Ben', Decimal('3.00'), 'Ben'], ['James Joyce Pub', 'Amy', Decimal('3.00'), 'Amy'], ['James Joyce Pub', 'Eve', Decimal('3.50'), 'Eve'], ['James Joyce Pub', 'Dan', Decimal('3.50'), 'Dan'], ['James Joyce Pub', 'Amy', Decimal('3.50'), 'Amy'], ['Satisfaction', 'Ben', Decimal('7.75'), 'Ben'], ['Satisfaction', 'Dan', Decimal('1.75'), 'Dan'], ['Satisfaction', 'Ben', Decimal('1.75'), 'Ben'], ['Satisfaction', 'Dan', Decimal('2.25'), 'Dan'], ['Satisfaction', 'Ben', Decimal('2.25'), 'Ben'], ['Satisfaction', 'Dan', Decimal('7.00'), 'Dan'], ['Satisfaction', 'Ben', Decimal('7.00'), 'Ben'], ['Satisfaction', 'Dan', Decimal('2.75'), 'Dan'], ['Satisfaction', 'Ben', Decimal('2.75'), 'Ben'], ['Satisfaction', 'Dan', Decimal('7.75'), 'Dan'], ['Talk of the Town', 'Ben', Decimal('2.20'), 'Ben'], ['Talk of the Town', 'Dan', Decimal('1.50'), 'Dan'], ['Talk of the Town', 'Ben', Decimal('1.50'), 'Ben'], ['Talk of the Town', 'Dan', Decimal('2.20'), 'Dan'], ['The Edge', 'Dan', Decimal('1.75'), 'Dan'], ['The Edge', 'Coy', Decimal('1.75'), 'Coy'], ['The Edge', 'Dan', Decimal('2.50'), 'Dan'], ['The Edge', 'Coy', Decimal('2.50'), 'Coy'], ['The Edge', 'Dan', Decimal('7.00'), 'Dan'], ['The Edge', 'Coy', Decimal('7.00'), 'Coy']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
6617,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Adel.es Restaurant|2|3.0|Dylan>
(there may be other errors too)
your output >>>>>
--------------------
<Adel.es Restaurant|2|3.0|Dylan>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","Select b1.name, COUNT(DISTINCT f1.drinker), AVG(s1.price), MIN(f1.drinker)
FROM bar as b1, serves as s1, frequents as f1
WHERE f1.bar = b1.name AND s1.bar = b1.name
AND NOT EXISTS (SELECT * FROM frequents as f2 WHERE f2.times_a_week > f1.times_a_week AND f1.bar = f2.bar)
GROUP BY b1.name


ORDER BY b1.name","{'student_result': [['Down Under Pub', 1, Decimal('3.4166666666666667'), 'Dan'], ['James Joyce Pub', 2, Decimal('3.6250000000000000'), 'Amy'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 1, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
6667,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Gaststatte Gruner Baum|2|3.0|Ben>
(there may be other errors too)
your output >>>>>
--------------------
<Gaststatte Gruner Baum|2|3.0|Ben>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","Select b1.name, COUNT(f1.drinker), AVG(s1.price), min(MostFrequent.drinker)
FROM bar as b1, serves as s1, frequents as f1, 
	(select bar, min(drinker) as drinker from frequents f4
	where NOT EXISTS(SELECT * FROM frequents as f2 WHERE f2.times_a_week > f4.times_a_week AND f4.bar = f2.bar)
     group by bar) as MostFrequent
WHERE f1.bar = b1.name AND s1.bar = b1.name
	and MostFrequent.bar= s1.bar
GROUP BY b1.name
ORDER BY count(f1.drinker)
","{'student_result': [['Talk of the Town', 4, Decimal('1.8500000000000000'), 'Dan'], ['Down Under Pub', 6, Decimal('3.4166666666666667'), 'Dan'], ['The Edge', 6, Decimal('3.7500000000000000'), 'Coy'], ['Satisfaction', 10, Decimal('4.3000000000000000'), 'Ben'], ['James Joyce Pub', 16, Decimal('3.6250000000000000'), 'Amy']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
6747,9,N,"<Beer Geek Breakfast|2.75|Gaststaette Oelgraben> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Triple Exultation Old Ale|2.25|James Joyce Pub>
... ommitted ...
--------------------","SELECT beer.name, min_price, bar FROM beer LEFT OUTER JOIN (SELECT beer, MIN(price) AS min_price FROM serves GROUP BY beer) t ON beer.name = t.beer LEFT OUTER JOIN serves ON beer.name = serves.beer AND min_price = serves.price;","select b1.name,b1.min_price,s1.bar
	from 
(select b.name, min(s.price) as min_price
	from beer b left join serves s on b.name=s.beer
		group by b.name) as b1 natural join serves s1
","{'student_result': [['Dixie', Decimal('2.75'), 'Down Under Pub'], ['Budweiser', Decimal('2.20'), 'Down Under Pub'], ['Erdinger', Decimal('3.50'), 'Down Under Pub'], ['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Full Sail', Decimal('7.75'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Dixie', Decimal('2.75'), 'Down Under Pub'], ['Budweiser', Decimal('2.20'), 'Down Under Pub'], ['Erdinger', Decimal('3.50'), 'Down Under Pub'], ['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Full Sail', Decimal('7.75'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Dixie', Decimal('2.75'), 'Down Under Pub'], ['Budweiser', Decimal('2.20'), 'Down Under Pub'], ['Erdinger', Decimal('3.50'), 'Down Under Pub'], ['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Full Sail', Decimal('7.75'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Dixie', Decimal('2.75'), 'The Edge'], ['Budweiser', Decimal('2.20'), 'The Edge'], ['Erdinger', Decimal('3.50'), 'The Edge'], ['Amstel', Decimal('1.00'), 'The Edge'], ['Full Sail', Decimal('7.75'), 'The Edge'], ['Corona', Decimal('7.00'), 'The Edge'], ['Dixie', Decimal('2.75'), 'The Edge'], ['Budweiser', Decimal('2.20'), 'The Edge'], ['Erdinger', Decimal('3.50'), 'The Edge'], ['Amstel', Decimal('1.00'), 'The Edge'], ['Full Sail', Decimal('7.75'), 'The Edge'], ['Corona', Decimal('7.00'), 'The Edge'], ['Dixie', Decimal('2.75'), 'The Edge'], ['Budweiser', Decimal('2.20'), 'The Edge'], ['Erdinger', Decimal('3.50'), 'The Edge'], ['Amstel', Decimal('1.00'), 'The Edge'], ['Full Sail', Decimal('7.75'), 'The Edge'], ['Corona', Decimal('7.00'), 'The Edge'], ['Dixie', Decimal('2.75'), 'James Joyce Pub'], ['Budweiser', Decimal('2.20'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Full Sail', Decimal('7.75'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Dixie', Decimal('2.75'), 'James Joyce Pub'], ['Budweiser', Decimal('2.20'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Full Sail', Decimal('7.75'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Dixie', Decimal('2.75'), 'James Joyce Pub'], ['Budweiser', Decimal('2.20'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Full Sail', Decimal('7.75'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Dixie', Decimal('2.75'), 'James Joyce Pub'], ['Budweiser', Decimal('2.20'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Full Sail', Decimal('7.75'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Satisfaction'], ['Erdinger', Decimal('3.50'), 'Satisfaction'], ['Amstel', Decimal('1.00'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Satisfaction'], ['Erdinger', Decimal('3.50'), 'Satisfaction'], ['Amstel', Decimal('1.00'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Satisfaction'], ['Erdinger', Decimal('3.50'), 'Satisfaction'], ['Amstel', Decimal('1.00'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Satisfaction'], ['Erdinger', Decimal('3.50'), 'Satisfaction'], ['Amstel', Decimal('1.00'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Satisfaction'], ['Erdinger', Decimal('3.50'), 'Satisfaction'], ['Amstel', Decimal('1.00'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Talk of the Town'], ['Budweiser', Decimal('2.20'), 'Talk of the Town'], ['Erdinger', Decimal('3.50'), 'Talk of the Town'], ['Amstel', Decimal('1.00'), 'Talk of the Town'], ['Full Sail', Decimal('7.75'), 'Talk of the Town'], ['Corona', Decimal('7.00'), 'Talk of the Town'], ['Dixie', Decimal('2.75'), 'Talk of the Town'], ['Budweiser', Decimal('2.20'), 'Talk of the Town'], ['Erdinger', Decimal('3.50'), 'Talk of the Town'], ['Amstel', Decimal('1.00'), 'Talk of the Town'], ['Full Sail', Decimal('7.75'), 'Talk of the Town'], ['Corona', Decimal('7.00'), 'Talk of the Town']], 'teacher_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Talk of the Town']]}","Find, for each beer, its lowest serving price and the bar(s) serving it at this price. The output should be a list of (beer, price, bar) triples. If some beer B is not served anywhere, you should still output (B, NULL, NULL).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
6724,9,N,"<Blue Moon|Gasthof Altes Casino Restaurant|2.75> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Corona|Starbucks|2.25>
... ommitted ...
--------------------","SELECT beer.name, min_price, bar FROM beer LEFT OUTER JOIN (SELECT beer, MIN(price) AS min_price FROM serves GROUP BY beer) t ON beer.name = t.beer LEFT OUTER JOIN serves ON beer.name = serves.beer AND min_price = serves.price;","WITH lowest AS (
    SELECT beer, MIN(price) AS lowestprice
    FROM serves 
    GROUP BY beer
),

lowest2 AS (
    SELECT serves.beer, serves.bar, serves.price 
    FROM serves 
    JOIN lowest
    ON serves.beer = lowest.beer AND serves.price = lowest.lowestprice
)

SELECT beer.name, lowest2.bar, lowest2.price
FROM beer 
LEFT JOIN lowest2
ON beer.name = lowest2.beer","{'student_result': [['Amstel', 'Down Under Pub', Decimal('1.00')], ['Amstel', 'James Joyce Pub', Decimal('1.00')], ['Budweiser', 'Talk of the Town', Decimal('2.20')], ['Corona', 'Down Under Pub', Decimal('7.00')], ['Corona', 'The Edge', Decimal('7.00')], ['Corona', 'James Joyce Pub', Decimal('7.00')], ['Corona', 'Satisfaction', Decimal('7.00')], ['Dixie', 'Satisfaction', Decimal('2.75')], ['Erdinger', 'James Joyce Pub', Decimal('3.50')], ['Full Sail', 'Satisfaction', Decimal('7.75')]], 'teacher_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Talk of the Town']]}","Find, for each beer, its lowest serving price and the bar(s) serving it at this price. The output should be a list of (beer, price, bar) triples. If some beer B is not served anywhere, you should still output (B, NULL, NULL).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
6837,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <James Joyce Pub|9|3.575|Gary>
(there may be other errors too)
your output >>>>>
--------------------
<James Joyce Pub|9|3.575|Gary>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","WITH total AS (
    SELECT bar, COUNT(drinker) as totalno
    FROM frequents
    GROUP BY bar
),

average AS (
    SELECT bar, AVG(price) as averageprice
    FROM serves
    GROUP BY bar
), 

maxfreq AS (
    SELECT bar, MAX(times_a_week) as maxno
    FROM frequents
    GROUP BY bar
),

maxname AS (
    SELECT frequents.bar, drinker as theregular, times_a_week
    FROM frequents
    JOIN maxfreq ON frequents.bar = maxfreq.bar AND frequents.times_a_week = maxfreq.maxno
)

SELECT bar.name, COALESCE(total.totalno, 0), average.averageprice, maxname.theregular
FROM bar
LEFT JOIN total
ON bar.name = total.bar
LEFT JOIN average
ON bar.name = average.bar
LEFT JOIN maxname
ON bar.name = maxname.bar;
","{'student_result': [['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Dan'], ['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Eve'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Dan'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
6856,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <James Joyce Pub|9|3.575|Sheila>
(there may be other errors too)
your output >>>>>
--------------------
<James Joyce Pub|9|3.575|Sheila>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","WITH total AS (
    SELECT bar, COUNT(drinker) as totalno
    FROM frequents
    GROUP BY bar
),

average AS (
    SELECT bar, AVG(price) as averageprice
    FROM serves
    GROUP BY bar
), 

maxfreq AS (
    SELECT bar, MAX(times_a_week) as maxno
    FROM frequents
    GROUP BY bar
),

maxname AS (
    SELECT frequents.bar, MAX(drinker) as theregular
    FROM frequents
    JOIN maxfreq ON frequents.bar = maxfreq.bar AND frequents.times_a_week = maxfreq.maxno
    GROUP BY frequents.bar
)

SELECT bar.name, COALESCE(total.totalno, 0), average.averageprice, maxname.theregular
FROM bar
LEFT JOIN total
ON bar.name = total.bar
LEFT JOIN average
ON bar.name = average.bar
LEFT JOIN maxname
ON bar.name = maxname.bar;","{'student_result': [['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Dan'], ['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Eve'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Dan'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
6880,2,N,"<Fernando> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Joshua>
... ommitted ...
--------------------",SELECT DISTINCT drinker FROM frequents NATURAL JOIN serves WHERE beer = 'Corona' AND drinker not in (SELECT drinker FROM Likes WHERE beer = 'Corona');,"SELECT frequents.drinker
FROM frequents, likes, serves
WHERE likes.drinker = frequents.drinker
AND likes.beer != 'Corona';","{'student_result': [['Amy'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Coy'], ['Coy'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Eve'], ['Amy'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Coy'], ['Coy'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Eve'], ['Amy'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Coy'], ['Coy'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Eve'], ['Amy'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Coy'], ['Coy'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Eve'], ['Amy'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Coy'], ['Coy'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Eve'], ['Amy'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Coy'], ['Coy'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Eve'], ['Amy'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Coy'], ['Coy'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Eve'], ['Amy'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Coy'], ['Coy'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Eve'], ['Amy'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Coy'], ['Coy'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Eve'], ['Amy'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Coy'], ['Coy'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Eve'], ['Amy'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Coy'], ['Coy'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Eve'], ['Amy'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Coy'], ['Coy'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Eve'], ['Amy'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Coy'], ['Coy'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Eve'], ['Amy'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Coy'], ['Coy'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Eve'], ['Amy'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Coy'], ['Coy'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Eve'], ['Amy'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Coy'], ['Coy'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Eve'], ['Amy'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Ben'], ['Coy'], ['Coy'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Dan'], ['Eve']], 'teacher_result': [['Ben'], ['Coy']]}",Find the names of all drinkers that do not like Corona but frequent a bar that serves Corona.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
6942,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <James Joyce Pub|90|3.575|Amy>
(there may be other errors too)
your output >>>>>
--------------------
<James Joyce Pub|90|3.575|Amy>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","SELECT 
    b.name AS bar_name,
    COUNT(f.drinker) AS total_num_drinker,
    COALESCE(AVG(s.price), NULL) AS avg_price,
    (
        SELECT d.name
        FROM frequents f2
        JOIN drinker d ON f2.drinker = d.name
        WHERE f2.bar = b.name
        GROUP BY f2.bar, f2.drinker, d.name
        ORDER BY COUNT(*) DESC, d.name ASC
        LIMIT 1
    ) AS most_reg_drinker
FROM bar b
LEFT JOIN frequents f ON b.name = f.bar
LEFT JOIN serves s ON b.name = s.bar
GROUP BY b.name
ORDER BY total_num_drinker DESC, b.name ASC;
","{'student_result': [['James Joyce Pub', 16, Decimal('3.6250000000000000'), 'Amy'], ['Satisfaction', 10, Decimal('4.3000000000000000'), 'Ben'], ['Down Under Pub', 6, Decimal('3.4166666666666667'), 'Coy'], ['The Edge', 6, Decimal('3.7500000000000000'), 'Coy'], ['Talk of the Town', 4, Decimal('1.8500000000000000'), 'Ben']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
6946,6,N,"<El-Rayyan|McDonalds> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<James Joyce Pub|Wein Zeit>
... ommitted ...
--------------------","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE NOT EXISTS (SELECT s1.beer FROM serves s1 WHERE s1.bar = b1.name AND NOT EXISTS (SELECT 1 FROM serves s2 WHERE s2.bar = b2.name AND s2.beer = s1.beer)) AND EXISTS (SELECT s2.beer FROM serves s2 WHERE s2.bar = b2.name AND NOT EXISTS (SELECT 1 FROM serves s1 WHERE s1.bar = b1.name AND s1.beer = s2.beer));","select b1.name as bar1, b2.name as bar2
from bar b1, bar b2
where b1.name <> b2.name
and not exists (select beer from serves s2
    where s2.bar = b2.name
    and s2.beer not in (select beer from serves s1
    where s1.bar = b1.name))","{'student_result': [['Down Under Pub', 'The Edge'], ['Down Under Pub', 'Talk of the Town'], ['The Edge', 'Down Under Pub'], ['The Edge', 'Talk of the Town'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'Talk of the Town']], 'teacher_result': [['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction']]}","Find all (bar1, bar2) pairs where the set of beers served at bar1 is a proper subset of the those served at bar2; i.e., bar2 serves every beer that bar1 serves and plus some more.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
7146,4,N,"<Denise|Nathaniel> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Adam|Adrienne>
... ommitted ...
--------------------","SELECT f1.drinker, f2.drinker FROM (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f1, (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f2 WHERE f1.drinker < f2.drinker AND f1.st = f2.st","SELECT DISTINCT frequents.drinker, schedule.drinker
FROM frequents, frequents AS schedule
WHERE frequents.drinker <> schedule.drinker 
GROUP BY frequents.drinker, schedule.drinker
HAVING COUNT(frequents.times_a_week) = COUNT(schedule.times_a_week)
","{'student_result': [['Amy', 'Ben'], ['Amy', 'Coy'], ['Amy', 'Dan'], ['Amy', 'Eve'], ['Ben', 'Amy'], ['Ben', 'Coy'], ['Ben', 'Dan'], ['Ben', 'Eve'], ['Coy', 'Amy'], ['Coy', 'Ben'], ['Coy', 'Dan'], ['Coy', 'Eve'], ['Dan', 'Amy'], ['Dan', 'Ben'], ['Dan', 'Coy'], ['Dan', 'Eve'], ['Eve', 'Amy'], ['Eve', 'Ben'], ['Eve', 'Coy'], ['Eve', 'Dan']], 'teacher_result': [['Coy', 'Eve'], ['Amy', 'Eve'], ['Amy', 'Coy']]}","Find the pair of drinkers who frequent bars the same total number of times per week. Don't list (drinkerA, drinkerA). Only list pairs (drinkerA, drinkerB) where drinkerA < drinkerB  in the answer; don't list (drinkerB, drinkerA) again.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
7161,5,N,"<Patrick> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Alan>
... ommitted ...
--------------------","SELECT name FROM drinker WHERE NOT EXISTS (SELECT f.bar FROM frequents f, serves s WHERE f.drinker = drinker.name AND f.bar = s.bar AND s.beer NOT IN (SELECT beer FROM likes WHERE drinker = drinker.name));","SELECT DISTINCT frequents.drinker
FROM frequents
WHERE frequents.bar IN (
    SELECT serves.bar
    FROM serves
    WHERE serves.beer IN (
        SELECT likes.beer
        FROM likes
        WHERE likes.drinker = frequents.drinker
    )
    GROUP BY serves.bar
    HAVING COUNT(DISTINCT serves.beer) = (
        SELECT COUNT(DISTINCT likes.beer)
        FROM likes
        WHERE likes.drinker = frequents.drinker
    )
);","{'student_result': [['Amy'], ['Ben'], ['Eve']], 'teacher_result': []}",Find names of all drinkers who do not frequent any bar that serves any beer they do not like.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
7174,4,N,"<Colleen|Benjamin> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Adrienne|Adam>
... ommitted ...
--------------------","SELECT f1.drinker, f2.drinker FROM (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f1, (SELECT drinker, sum(times_a_week) as st FROM frequents GROUP BY drinker) f2 WHERE f1.drinker < f2.drinker AND f1.st = f2.st","SELECT DISTINCT
	CASE WHEN frequents.drinker > schedule.drinker 
	THEN frequents.drinker 
	ELSE schedule.drinker 
	END AS ""frequents.drinker"",
    CASE WHEN frequents.drinker > schedule.drinker THEN schedule.drinker ELSE frequents.drinker END AS ""schedule.drinker""
FROM frequents, frequents AS schedule
WHERE frequents.drinker <> schedule.drinker 
GROUP BY frequents.drinker, schedule.drinker
HAVING COUNT(frequents.times_a_week) = COUNT(schedule.times_a_week)
","{'student_result': [['Ben', 'Amy'], ['Coy', 'Amy'], ['Coy', 'Ben'], ['Dan', 'Amy'], ['Dan', 'Ben'], ['Dan', 'Coy'], ['Eve', 'Amy'], ['Eve', 'Ben'], ['Eve', 'Coy'], ['Eve', 'Dan']], 'teacher_result': [['Coy', 'Eve'], ['Amy', 'Eve'], ['Amy', 'Coy']]}","Find the pair of drinkers who frequent bars the same total number of times per week. Don't list (drinkerA, drinkerA). Only list pairs (drinkerA, drinkerB) where drinkerA < drinkerB  in the answer; don't list (drinkerB, drinkerA) again.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
7189,5,N,"<Andre> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Meredith>
... ommitted ...
--------------------","SELECT name FROM drinker WHERE NOT EXISTS (SELECT f.bar FROM frequents f, serves s WHERE f.drinker = drinker.name AND f.bar = s.bar AND s.beer NOT IN (SELECT beer FROM likes WHERE drinker = drinker.name));","SELECT DISTINCT frequents.drinker FROM serves, frequents,likes WHERE serves.bar = frequents.bar AND frequents.drinker = likes.drinker AND likes.beer = serves.beer
 INTERSECT
SELECT DISTINCT frequents.drinker FROM serves, frequents,likes WHERE serves.bar = frequents.bar AND frequents.drinker = likes.drinker AND likes.beer <> serves.beer
","{'student_result': [['Ben'], ['Eve'], ['Amy'], ['Dan']], 'teacher_result': []}",Find names of all drinkers who do not frequent any bar that serves any beer they do not like.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
7200,6,N,"answer should have 1 instead of 14 occurrence(s) of <Neu Kong Fondue Restaurant|Down Under Pub>
(there may be other errors too)
your output >>>>>
--------------------
<Neu Kong Fondue Restaurant|Down Under Pub>
... ommitted ...
--------------------","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE NOT EXISTS (SELECT s1.beer FROM serves s1 WHERE s1.bar = b1.name AND NOT EXISTS (SELECT 1 FROM serves s2 WHERE s2.bar = b2.name AND s2.beer = s1.beer)) AND EXISTS (SELECT s2.beer FROM serves s2 WHERE s2.bar = b2.name AND NOT EXISTS (SELECT 1 FROM serves s1 WHERE s1.bar = b1.name AND s1.beer = s2.beer));","SELECT b1.bar, b2.bar
FROM serves AS b1
JOIN serves AS b2
ON b1.bar <> b2.bar
WHERE NOT EXISTS (
    SELECT *
    FROM serves AS s1
    WHERE b1.bar = s1.bar 
        AND NOT EXISTS (
            SELECT *
            FROM serves AS s2
            WHERE s2.bar = b2.bar AND s1.beer = s2.beer
        )
);","{'student_result': [['Down Under Pub', 'The Edge'], ['Down Under Pub', 'The Edge'], ['Down Under Pub', 'The Edge'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'The Edge'], ['Down Under Pub', 'The Edge'], ['Down Under Pub', 'The Edge'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'The Edge'], ['Down Under Pub', 'The Edge'], ['Down Under Pub', 'The Edge'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'Satisfaction'], ['The Edge', 'Down Under Pub'], ['The Edge', 'Down Under Pub'], ['The Edge', 'Down Under Pub'], ['The Edge', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['The Edge', 'Down Under Pub'], ['The Edge', 'Down Under Pub'], ['The Edge', 'Down Under Pub'], ['The Edge', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['The Edge', 'Down Under Pub'], ['The Edge', 'Down Under Pub'], ['The Edge', 'Down Under Pub'], ['The Edge', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction'], ['Talk of the Town', 'Satisfaction'], ['Talk of the Town', 'Satisfaction'], ['Talk of the Town', 'Satisfaction'], ['Talk of the Town', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction'], ['Talk of the Town', 'Satisfaction'], ['Talk of the Town', 'Satisfaction'], ['Talk of the Town', 'Satisfaction'], ['Talk of the Town', 'Satisfaction']], 'teacher_result': [['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction']]}","Find all (bar1, bar2) pairs where the set of beers served at bar1 is a proper subset of the those served at bar2; i.e., bar2 serves every beer that bar1 serves and plus some more.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
7208,6,N,"<Gasthof Adler|Zum Grauen Bock> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<James Joyce Pub|Satisfaction>
... ommitted ...
--------------------","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE NOT EXISTS (SELECT s1.beer FROM serves s1 WHERE s1.bar = b1.name AND NOT EXISTS (SELECT 1 FROM serves s2 WHERE s2.bar = b2.name AND s2.beer = s1.beer)) AND EXISTS (SELECT s2.beer FROM serves s2 WHERE s2.bar = b2.name AND NOT EXISTS (SELECT 1 FROM serves s1 WHERE s1.bar = b1.name AND s1.beer = s2.beer));","SELECT b1.bar, b2.bar
FROM serves AS b1
JOIN serves AS b2
ON b1.bar <> b2.bar
WHERE NOT EXISTS (
    SELECT *
    FROM serves AS s1
    LEFT JOIN serves AS s2
    ON s1.bar <> s2.bar
    WHERE s2.beer IS NULL
);","{'student_result': [['Down Under Pub', 'The Edge'], ['Down Under Pub', 'The Edge'], ['Down Under Pub', 'The Edge'], ['Down Under Pub', 'James Joyce Pub'], ['Down Under Pub', 'James Joyce Pub'], ['Down Under Pub', 'James Joyce Pub'], ['Down Under Pub', 'James Joyce Pub'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'Talk of the Town'], ['Down Under Pub', 'Talk of the Town'], ['Down Under Pub', 'The Edge'], ['Down Under Pub', 'The Edge'], ['Down Under Pub', 'The Edge'], ['Down Under Pub', 'James Joyce Pub'], ['Down Under Pub', 'James Joyce Pub'], ['Down Under Pub', 'James Joyce Pub'], ['Down Under Pub', 'James Joyce Pub'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'Talk of the Town'], ['Down Under Pub', 'Talk of the Town'], ['Down Under Pub', 'The Edge'], ['Down Under Pub', 'The Edge'], ['Down Under Pub', 'The Edge'], ['Down Under Pub', 'James Joyce Pub'], ['Down Under Pub', 'James Joyce Pub'], ['Down Under Pub', 'James Joyce Pub'], ['Down Under Pub', 'James Joyce Pub'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'Talk of the Town'], ['Down Under Pub', 'Talk of the Town'], ['The Edge', 'Down Under Pub'], ['The Edge', 'Down Under Pub'], ['The Edge', 'Down Under Pub'], ['The Edge', 'James Joyce Pub'], ['The Edge', 'James Joyce Pub'], ['The Edge', 'James Joyce Pub'], ['The Edge', 'James Joyce Pub'], ['The Edge', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['The Edge', 'Talk of the Town'], ['The Edge', 'Talk of the Town'], ['The Edge', 'Down Under Pub'], ['The Edge', 'Down Under Pub'], ['The Edge', 'Down Under Pub'], ['The Edge', 'James Joyce Pub'], ['The Edge', 'James Joyce Pub'], ['The Edge', 'James Joyce Pub'], ['The Edge', 'James Joyce Pub'], ['The Edge', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['The Edge', 'Talk of the Town'], ['The Edge', 'Talk of the Town'], ['The Edge', 'Down Under Pub'], ['The Edge', 'Down Under Pub'], ['The Edge', 'Down Under Pub'], ['The Edge', 'James Joyce Pub'], ['The Edge', 'James Joyce Pub'], ['The Edge', 'James Joyce Pub'], ['The Edge', 'James Joyce Pub'], ['The Edge', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['The Edge', 'Talk of the Town'], ['The Edge', 'Talk of the Town'], ['James Joyce Pub', 'Down Under Pub'], ['James Joyce Pub', 'Down Under Pub'], ['James Joyce Pub', 'Down Under Pub'], ['James Joyce Pub', 'The Edge'], ['James Joyce Pub', 'The Edge'], ['James Joyce Pub', 'The Edge'], ['James Joyce Pub', 'Satisfaction'], ['James Joyce Pub', 'Satisfaction'], ['James Joyce Pub', 'Satisfaction'], ['James Joyce Pub', 'Satisfaction'], ['James Joyce Pub', 'Satisfaction'], ['James Joyce Pub', 'Talk of the Town'], ['James Joyce Pub', 'Talk of the Town'], ['James Joyce Pub', 'Down Under Pub'], ['James Joyce Pub', 'Down Under Pub'], ['James Joyce Pub', 'Down Under Pub'], ['James Joyce Pub', 'The Edge'], ['James Joyce Pub', 'The Edge'], ['James Joyce Pub', 'The Edge'], ['James Joyce Pub', 'Satisfaction'], ['James Joyce Pub', 'Satisfaction'], ['James Joyce Pub', 'Satisfaction'], ['James Joyce Pub', 'Satisfaction'], ['James Joyce Pub', 'Satisfaction'], ['James Joyce Pub', 'Talk of the Town'], ['James Joyce Pub', 'Talk of the Town'], ['James Joyce Pub', 'Down Under Pub'], ['James Joyce Pub', 'Down Under Pub'], ['James Joyce Pub', 'Down Under Pub'], ['James Joyce Pub', 'The Edge'], ['James Joyce Pub', 'The Edge'], ['James Joyce Pub', 'The Edge'], ['James Joyce Pub', 'Satisfaction'], ['James Joyce Pub', 'Satisfaction'], ['James Joyce Pub', 'Satisfaction'], ['James Joyce Pub', 'Satisfaction'], ['James Joyce Pub', 'Satisfaction'], ['James Joyce Pub', 'Talk of the Town'], ['James Joyce Pub', 'Talk of the Town'], ['James Joyce Pub', 'Down Under Pub'], ['James Joyce Pub', 'Down Under Pub'], ['James Joyce Pub', 'Down Under Pub'], ['James Joyce Pub', 'The Edge'], ['James Joyce Pub', 'The Edge'], ['James Joyce Pub', 'The Edge'], ['James Joyce Pub', 'Satisfaction'], ['James Joyce Pub', 'Satisfaction'], ['James Joyce Pub', 'Satisfaction'], ['James Joyce Pub', 'Satisfaction'], ['James Joyce Pub', 'Satisfaction'], ['James Joyce Pub', 'Talk of the Town'], ['James Joyce Pub', 'Talk of the Town'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'James Joyce Pub'], ['Satisfaction', 'James Joyce Pub'], ['Satisfaction', 'James Joyce Pub'], ['Satisfaction', 'James Joyce Pub'], ['Satisfaction', 'Talk of the Town'], ['Satisfaction', 'Talk of the Town'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'James Joyce Pub'], ['Satisfaction', 'James Joyce Pub'], ['Satisfaction', 'James Joyce Pub'], ['Satisfaction', 'James Joyce Pub'], ['Satisfaction', 'Talk of the Town'], ['Satisfaction', 'Talk of the Town'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'James Joyce Pub'], ['Satisfaction', 'James Joyce Pub'], ['Satisfaction', 'James Joyce Pub'], ['Satisfaction', 'James Joyce Pub'], ['Satisfaction', 'Talk of the Town'], ['Satisfaction', 'Talk of the Town'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'James Joyce Pub'], ['Satisfaction', 'James Joyce Pub'], ['Satisfaction', 'James Joyce Pub'], ['Satisfaction', 'James Joyce Pub'], ['Satisfaction', 'Talk of the Town'], ['Satisfaction', 'Talk of the Town'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'Down Under Pub'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'The Edge'], ['Satisfaction', 'James Joyce Pub'], ['Satisfaction', 'James Joyce Pub'], ['Satisfaction', 'James Joyce Pub'], ['Satisfaction', 'James Joyce Pub'], ['Satisfaction', 'Talk of the Town'], ['Satisfaction', 'Talk of the Town'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'James Joyce Pub'], ['Talk of the Town', 'James Joyce Pub'], ['Talk of the Town', 'James Joyce Pub'], ['Talk of the Town', 'James Joyce Pub'], ['Talk of the Town', 'Satisfaction'], ['Talk of the Town', 'Satisfaction'], ['Talk of the Town', 'Satisfaction'], ['Talk of the Town', 'Satisfaction'], ['Talk of the Town', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'James Joyce Pub'], ['Talk of the Town', 'James Joyce Pub'], ['Talk of the Town', 'James Joyce Pub'], ['Talk of the Town', 'James Joyce Pub'], ['Talk of the Town', 'Satisfaction'], ['Talk of the Town', 'Satisfaction'], ['Talk of the Town', 'Satisfaction'], ['Talk of the Town', 'Satisfaction'], ['Talk of the Town', 'Satisfaction']], 'teacher_result': [['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction']]}","Find all (bar1, bar2) pairs where the set of beers served at bar1 is a proper subset of the those served at bar2; i.e., bar2 serves every beer that bar1 serves and plus some more.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
7245,7,N,"1-th tuple in answer should be <Donerhaus Dest|16|2.95|Faith> instead of <Adel.es Restaurant|3|3.0|Ben>
(there may be other errors too)
your output >>>>>
--------------------
<Adel.es Restaurant|3|3.0|Ben>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","select 
    f.bar,
    count(distinct f.drinker) as total_num_drinker,
    avg(s.price) as avg_price,
    (select f1.drinker 
     from frequents as f1 
     where f1.bar = f.bar 
     group by f1.drinker 
     order by count(f1.times_a_week) desc 
     limit 1) as most_reg_drinker
from frequents as f
join serves s on f.bar = s.bar
group by f.bar;
","{'student_result': [['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Ben'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Dan'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Dan']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
7272,9,N,"answer should have 1 instead of 2 occurrence(s) of <Beer Town Brown|None|None>
(there may be other errors too)
your output >>>>>
--------------------
<471 Extra ESB|2.25|Restaurant Hotel Bessunger Forst>
... ommitted ...
--------------------","SELECT beer.name, min_price, bar FROM beer LEFT OUTER JOIN (SELECT beer, MIN(price) AS min_price FROM serves GROUP BY beer) t ON beer.name = t.beer LEFT OUTER JOIN serves ON beer.name = serves.beer AND min_price = serves.price;","WITH beer_prices AS (
    SELECT
        beer.name AS beer,
        MIN(s.price) AS min_price
    FROM
        beer
    LEFT JOIN
        serves s ON beer.name = s.beer
    GROUP BY
        beer.name
),
beer_bars AS (
    SELECT
        s.beer,
        s.price,
        s.bar
    FROM
        serves s
    JOIN
        beer_prices bp ON s.beer = bp.beer AND s.price = bp.min_price
)
SELECT
    bp.beer,
    bp.min_price AS price,
    bb.bar
FROM
    beer_prices bp
LEFT JOIN
    beer_bars bb ON bp.beer = bb.beer
UNION ALL
SELECT
    beer.name AS beer,
    NULL AS price,
    NULL AS bar
FROM
    beer
WHERE
    beer.name NOT IN (
        SELECT DISTINCT s.beer
        FROM serves s
    )
ORDER BY
    beer;","{'student_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Budweiser', Decimal('2.20'), 'Talk of the Town'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Corona', Decimal('7.00'), 'The Edge'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Full Sail', Decimal('7.75'), 'Satisfaction']], 'teacher_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Talk of the Town']]}","Find, for each beer, its lowest serving price and the bar(s) serving it at this price. The output should be a list of (beer, price, bar) triples. If some beer B is not served anywhere, you should still output (B, NULL, NULL).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
7424,9,N,"<Cardinal Pale Ale|None|Bierbrunnen> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<471 Extra ESB|2.25|Restaurant Hotel Bessunger Forst>
... ommitted ...
--------------------","SELECT beer.name, min_price, bar FROM beer LEFT OUTER JOIN (SELECT beer, MIN(price) AS min_price FROM serves GROUP BY beer) t ON beer.name = t.beer LEFT OUTER JOIN serves ON beer.name = serves.beer AND min_price = serves.price;","SELECT
    beer.name AS beer,
    min_price.price AS price,
    serves.bar AS bar
FROM
    beer
LEFT JOIN
    serves ON beer.name = serves.beer
LEFT JOIN (
    SELECT
        beer,
        MIN(price) AS price
    FROM
        serves
    GROUP BY
        beer
) AS min_price ON serves.beer = min_price.beer AND serves.price = min_price.price
ORDER BY
    beer.name;","{'student_result': [['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Amstel', None, 'Talk of the Town'], ['Amstel', None, 'Satisfaction'], ['Amstel', None, 'The Edge'], ['Budweiser', Decimal('2.20'), 'Talk of the Town'], ['Budweiser', None, 'Satisfaction'], ['Budweiser', None, 'Down Under Pub'], ['Budweiser', None, 'The Edge'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Dixie', None, 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Full Sail', Decimal('7.75'), 'Satisfaction']], 'teacher_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Talk of the Town']]}","Find, for each beer, its lowest serving price and the bar(s) serving it at this price. The output should be a list of (beer, price, bar) triples. If some beer B is not served anywhere, you should still output (B, NULL, NULL).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
7426,9,N,"<Bigfoot 2004|3.25|Zum Heidekuppel> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<471 Extra ESB|2.25|Restaurant Hotel Bessunger Forst>
... ommitted ...
--------------------","SELECT beer.name, min_price, bar FROM beer LEFT OUTER JOIN (SELECT beer, MIN(price) AS min_price FROM serves GROUP BY beer) t ON beer.name = t.beer LEFT OUTER JOIN serves ON beer.name = serves.beer AND min_price = serves.price;"," SELECT
    beer.name AS beer,
    MIN(serves.price) AS price,
    serves.bar AS bar
FROM
    beer
LEFT JOIN
    serves ON beer.name = serves.beer
GROUP BY
    beer.name, serves.bar
HAVING
    COUNT(serves.bar) > 0
ORDER BY
    beer.name;
","{'student_result': [['Amstel', Decimal('1.50'), 'Talk of the Town'], ['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Amstel', Decimal('1.75'), 'Satisfaction'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Amstel', Decimal('1.75'), 'The Edge'], ['Budweiser', Decimal('2.25'), 'Down Under Pub'], ['Budweiser', Decimal('2.50'), 'The Edge'], ['Budweiser', Decimal('2.20'), 'Talk of the Town'], ['Budweiser', Decimal('2.25'), 'Satisfaction'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Corona', Decimal('7.00'), 'The Edge'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Dixie', Decimal('3.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Full Sail', Decimal('7.75'), 'Satisfaction']], 'teacher_result': [['Amstel', Decimal('1.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'Down Under Pub'], ['Corona', Decimal('7.00'), 'The Edge'], ['Amstel', Decimal('1.00'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'James Joyce Pub'], ['Erdinger', Decimal('3.50'), 'James Joyce Pub'], ['Corona', Decimal('7.00'), 'Satisfaction'], ['Dixie', Decimal('2.75'), 'Satisfaction'], ['Full Sail', Decimal('7.75'), 'Satisfaction'], ['Budweiser', Decimal('2.20'), 'Talk of the Town']]}","Find, for each beer, its lowest serving price and the bar(s) serving it at this price. The output should be a list of (beer, price, bar) triples. If some beer B is not served anywhere, you should still output (B, NULL, NULL).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
7668,5,N,"<Fernando> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Joshua>
... ommitted ...
--------------------","SELECT name FROM drinker WHERE NOT EXISTS (SELECT f.bar FROM frequents f, serves s WHERE f.drinker = drinker.name AND f.bar = s.bar AND s.beer NOT IN (SELECT beer FROM likes WHERE drinker = drinker.name));","select drinker from frequents natural join serves
where beer in (select beer from likes)
","{'student_result': [['Dan'], ['Coy'], ['Dan'], ['Coy'], ['Dan'], ['Coy'], ['Dan'], ['Coy'], ['Dan'], ['Coy'], ['Dan'], ['Coy'], ['Eve'], ['Dan'], ['Ben'], ['Amy'], ['Eve'], ['Dan'], ['Ben'], ['Amy'], ['Eve'], ['Dan'], ['Ben'], ['Amy'], ['Eve'], ['Dan'], ['Ben'], ['Amy'], ['Dan'], ['Ben'], ['Dan'], ['Ben'], ['Dan'], ['Ben'], ['Dan'], ['Ben'], ['Dan'], ['Ben'], ['Dan'], ['Ben']], 'teacher_result': []}",Find names of all drinkers who do not frequent any bar that serves any beer they do not like.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
7692,3,N,"<3> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<1>
... ommitted ...
--------------------",SELECT bar FROM Serves GROUP BY bar HAVING COUNT(beer) >= 5;,"SELECT times_a_week
FROM frequents
GROUP BY times_a_week
HAVING times_a_week >= MAX(times_a_week)","{'student_result': [[1], [2]], 'teacher_result': [['Satisfaction']]}",Find the names of all bars that serve at least 5 beers.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
7702,3,N,"<Andre> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Denise>
... ommitted ...
--------------------",SELECT bar FROM Serves GROUP BY bar HAVING COUNT(beer) >= 5;,"SELECT drinker
FROM frequents
GROUP BY drinker
HAVING COUNT(drinker) >= SUM(times_a_week)","{'student_result': [['Coy']], 'teacher_result': [['Satisfaction']]}",Find the names of all bars that serve at least 5 beers.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
7727,3,N,"answer should have 1 instead of 2090 occurrence(s) of <James Joyce Pub>
(there may be other errors too)
your output >>>>>
--------------------
<James Joyce Pub>
... ommitted ...
--------------------",SELECT bar FROM Serves GROUP BY bar HAVING COUNT(beer) >= 5;,"--  Out of all bars that serve beers, group them by bar. (i) Is also (A).
WITH BarsThatServeBeers AS (
	SELECT bar, beer
	FROM serves
), 
-- For each of these entries in (i), select distinct bar group and that bar group's count of beers. (j)
BarsAndTheCountOfBeersTheyServe AS (
	SELECT bar, COUNT(DISTINCT beer) AS count
	FROM BarsThatServeBeers
	GROUP BY bar
),
-- For each entry in (j), select those with count < 5.
BarsThatServeLessThan5Beers AS (
	SELECT bar
	FROM BarsAndTheCountOfBeersTheyServe a
	WHERE a.count < 5
)
SELECT a.bar
FROM BarsThatServeBeers a, BarsThatServeLessThan5Beers b
WHERE a.bar NOT IN (SELECT * FROM BarsThatServeLessThan5Beers);","{'student_result': [['Satisfaction'], ['Satisfaction'], ['Satisfaction'], ['Satisfaction'], ['Satisfaction'], ['Satisfaction'], ['Satisfaction'], ['Satisfaction'], ['Satisfaction'], ['Satisfaction'], ['Satisfaction'], ['Satisfaction'], ['Satisfaction'], ['Satisfaction'], ['Satisfaction'], ['Satisfaction'], ['Satisfaction'], ['Satisfaction'], ['Satisfaction'], ['Satisfaction']], 'teacher_result': [['Satisfaction']]}",Find the names of all bars that serve at least 5 beers.,"CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
7778,6,N,"<Man Wah|Pik-Dame> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<Sonne Inh. Leubecher|My Coffee Backshop>
... ommitted ...
--------------------","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE NOT EXISTS (SELECT s1.beer FROM serves s1 WHERE s1.bar = b1.name AND NOT EXISTS (SELECT 1 FROM serves s2 WHERE s2.bar = b2.name AND s2.beer = s1.beer)) AND EXISTS (SELECT s2.beer FROM serves s2 WHERE s2.bar = b2.name AND NOT EXISTS (SELECT 1 FROM serves s1 WHERE s1.bar = b1.name AND s1.beer = s2.beer));","WITH Bar1ServesCount AS (
	SELECT bar AS bar1, COUNT(beer) AS count1
	FROM serves
	GROUP BY bar
),
Bar2ServesCount AS (
	SELECT bar AS bar2, COUNT(beer) AS count2
	FROM serves
	GROUP BY bar
),
Bar1ServesBeer AS (
	SELECT bar1, count1, s.beer AS beer1
	FROM Bar1ServesCount AS b1 INNER JOIN serves AS s
	ON b1.bar1=s.bar
),
Bar2ServesBeer AS (
	SELECT bar2, count2, s.beer AS beer2
	FROM Bar2ServesCount AS b2 INNER JOIN serves AS s
	ON b2.bar2=s.bar
),
Bar1ProperSetBar2 AS (
	SELECT DISTINCT b2.bar2, b1.bar1
	FROM Bar2ServesBeer AS b2 LEFT JOIN Bar1ServesBeer AS b1
	ON b2.beer2=b1.beer1
	AND b2.bar2<>b1.bar1
	AND b2.count2>b1.count1
	WHERE b1.bar1 IS NOT NULL
)
SELECT *
FROM Bar1ProperSetBar2;","{'student_result': [['Satisfaction', 'James Joyce Pub'], ['Satisfaction', 'Down Under Pub'], ['James Joyce Pub', 'The Edge'], ['The Edge', 'Talk of the Town'], ['Down Under Pub', 'Talk of the Town'], ['Satisfaction', 'The Edge'], ['James Joyce Pub', 'Down Under Pub'], ['James Joyce Pub', 'Talk of the Town'], ['Satisfaction', 'Talk of the Town']], 'teacher_result': [['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction']]}","Find all (bar1, bar2) pairs where the set of beers served at bar1 is a proper subset of the those served at bar2; i.e., bar2 serves every beer that bar1 serves and plus some more.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
7782,6,N,"<Gosch Fisch-Bistro|Bierbrunnen> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<My Coffee Backshop|Sonne Inh. Leubecher>
... ommitted ...
--------------------","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE NOT EXISTS (SELECT s1.beer FROM serves s1 WHERE s1.bar = b1.name AND NOT EXISTS (SELECT 1 FROM serves s2 WHERE s2.bar = b2.name AND s2.beer = s1.beer)) AND EXISTS (SELECT s2.beer FROM serves s2 WHERE s2.bar = b2.name AND NOT EXISTS (SELECT 1 FROM serves s1 WHERE s1.bar = b1.name AND s1.beer = s2.beer));","WITH Bar1ServesCount AS (
	SELECT bar AS bar1, COUNT(beer) AS count1
	FROM serves
	GROUP BY bar
),
Bar2ServesCount AS (
	SELECT bar AS bar2, COUNT(beer) AS count2
	FROM serves
	GROUP BY bar
),
Bar1ServesBeer AS (
	SELECT bar1, count1, s.beer AS beer1
	FROM Bar1ServesCount AS b1 INNER JOIN serves AS s
	ON b1.bar1=s.bar
),
Bar2ServesBeer AS (
	SELECT bar2, count2, s.beer AS beer2
	FROM Bar2ServesCount AS b2 INNER JOIN serves AS s
	ON b2.bar2=s.bar
),
Bar1ProperSetBar2 AS (
	SELECT DISTINCT b2.bar2, b1.bar1
	FROM Bar2ServesBeer AS b2 LEFT JOIN Bar1ServesBeer AS b1
	ON b2.beer2=b1.beer1
	AND b2.bar2<>b1.bar1
	AND b2.count2>b1.count1
	WHERE b1.bar1 IS NOT NULL AND b1.beer1 IS NOT NULL
)
SELECT bar1, bar2
FROM Bar1ProperSetBar2;","{'student_result': [['James Joyce Pub', 'Satisfaction'], ['Down Under Pub', 'Satisfaction'], ['The Edge', 'James Joyce Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Down Under Pub'], ['The Edge', 'Satisfaction'], ['Down Under Pub', 'James Joyce Pub'], ['Talk of the Town', 'James Joyce Pub'], ['Talk of the Town', 'Satisfaction']], 'teacher_result': [['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction']]}","Find all (bar1, bar2) pairs where the set of beers served at bar1 is a proper subset of the those served at bar2; i.e., bar2 serves every beer that bar1 serves and plus some more.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
7783,6,N,"<Gosch Fisch-Bistro|Bierbrunnen> should not be in answer table
(there may be other errors too)
your output >>>>>
--------------------
<La Terrazza|James Joyce Pub>
... ommitted ...
--------------------","SELECT b1.name AS bar1, b2.name AS bar2 FROM bar b1, bar b2 WHERE NOT EXISTS (SELECT s1.beer FROM serves s1 WHERE s1.bar = b1.name AND NOT EXISTS (SELECT 1 FROM serves s2 WHERE s2.bar = b2.name AND s2.beer = s1.beer)) AND EXISTS (SELECT s2.beer FROM serves s2 WHERE s2.bar = b2.name AND NOT EXISTS (SELECT 1 FROM serves s1 WHERE s1.bar = b1.name AND s1.beer = s2.beer));","WITH Bar1ServesCount AS (
	SELECT bar AS bar1, COUNT(beer) AS count1
	FROM serves
	GROUP BY bar
),
Bar2ServesCount AS (
	SELECT bar AS bar2, COUNT(beer) AS count2
	FROM serves
	GROUP BY bar
),
Bar1ServesBeer AS (
	SELECT bar1, count1, s.beer AS beer1
	FROM Bar1ServesCount AS b1 INNER JOIN serves AS s
	ON b1.bar1=s.bar
),
Bar2ServesBeer AS (
	SELECT bar2, count2, s.beer AS beer2
	FROM Bar2ServesCount AS b2 INNER JOIN serves AS s
	ON b2.bar2=s.bar
),
Bar1ProperSetBar2 AS (
	SELECT b1.bar1, b1.count1, b1.beer1, b2.bar2, b2.count2, b2.beer2
	FROM Bar2ServesBeer AS b2 LEFT JOIN Bar1ServesBeer AS b1
	ON b2.beer2=b1.beer1
	AND b2.bar2<>b1.bar1
	AND b2.count2>b1.count1
	WHERE b1.bar1 IS NOT NULL AND b1.beer1 IS NOT NULL
)
SELECT bar1, bar2
FROM Bar1ProperSetBar2;","{'student_result': [['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'James Joyce Pub'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'Satisfaction'], ['Down Under Pub', 'James Joyce Pub'], ['The Edge', 'Satisfaction'], ['The Edge', 'James Joyce Pub'], ['The Edge', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['The Edge', 'James Joyce Pub'], ['James Joyce Pub', 'Satisfaction'], ['James Joyce Pub', 'Satisfaction'], ['James Joyce Pub', 'Satisfaction'], ['Talk of the Town', 'Satisfaction'], ['Talk of the Town', 'James Joyce Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'Satisfaction'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Down Under Pub']], 'teacher_result': [['Down Under Pub', 'Satisfaction'], ['The Edge', 'Satisfaction'], ['Talk of the Town', 'Down Under Pub'], ['Talk of the Town', 'The Edge'], ['Talk of the Town', 'Satisfaction']]}","Find all (bar1, bar2) pairs where the set of beers served at bar1 is a proper subset of the those served at bar2; i.e., bar2 serves every beer that bar1 serves and plus some more.","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"
7825,7,N,"3-th tuple in answer should be <Altes Sudhaus|11|3.0|Curtis> instead of <Rhodos|11|2.9375|Adrienne>
(there may be other errors too)
your output >>>>>
--------------------
<Donerhaus Dest|16|2.95|Faith>
... ommitted ...
--------------------","SELECT b.name AS bar, COUNT(DISTINCT f.drinker) AS num_drinker, AVG(s.price) AS avg_price, (SELECT f1.drinker FROM frequents f1 WHERE f1.bar = b.name ORDER BY f1.times_a_week DESC, f1.drinker ASC LIMIT 1) AS most_reg_drinker FROM bar b LEFT JOIN frequents f ON b.name = f.bar LEFT JOIN serves s ON b.name = s.bar GROUP BY b.name ORDER BY num_drinker DESC, b.name ASC;","WITH DrinkerFrequentsBar AS (
	SELECT drinker, bar, times_a_week AS taw
	FROM frequents
),
BarServesBeerPrice AS (
	SELECT bar, beer, price
	FROM serves
),
TotalDrinkersWhoFrequentBar AS (
	SELECT bar, COUNT(DISTINCT drinker) AS tnd -- total_num_drinker
	FROM DrinkerFrequentsBar f
	GROUP BY bar
),
BarAveragePriceOfBeerServed AS (
	SELECT bar, AVG(price) AS ap -- avg_price
	FROM BarServesBeerPrice s
	GROUP BY bar
),
BarMaxTAW AS (
	SELECT bar, MAX(taw) AS max_taw 
	FROM DrinkerFrequentsBar f
	GROUP BY bar
),
BarAndMultipleMRDrinkers AS (
	SELECT mtaw.bar AS bar, f.drinker AS drinker
	FROM BarMaxTAW mtaw
	INNER JOIN DrinkerFrequentsBar f
	ON mtaw.bar=f.bar AND mtaw.max_taw=f.taw
),
BarAndOneMRDrinker AS (
	SELECT mtaw.bar, MIN(mtaw.drinker) AS drinker -- most_reg_drinker
	FROM BarAndMultipleMRDrinkers mtaw
	GROUP BY mtaw.bar
)
SELECT t.bar AS bar, t.tnd AS total_num_drinker, a.ap AS avg_price, m.drinker AS most_reg_drinker
FROM TotalDrinkersWhoFrequentBar t, BarAveragePriceOfBeerServed a, BarAndOneMRDrinker m
WHERE t.bar=a.bar
AND t.bar=m.bar
ORDER BY t.tnd DESC, m.drinker ASC;","{'student_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan']], 'teacher_result': [['James Joyce Pub', 4, Decimal('3.6250000000000000'), 'Amy'], ['Down Under Pub', 2, Decimal('3.4166666666666667'), 'Dan'], ['Satisfaction', 2, Decimal('4.3000000000000000'), 'Ben'], ['Talk of the Town', 2, Decimal('1.8500000000000000'), 'Dan'], ['The Edge', 2, Decimal('3.7500000000000000'), 'Coy']]}","Calculate some statistics for each bar: (1) total number of drinkers who frequent it, (2) average price of beers it serves, and (3) name of the drinker who frequents it the maximum number of times a week (the most regular customer!). Your query should output bar, num_drinker, avg_price, most_reg_drinker. In case of ties in (3), rank the drinkers by the alphabetical order or their names. Sort the output by the number of drinkers (in descending order), in case of ties, sort by bar in alphabetical order. You need to list every bar, even if it is not frequented by anyone (show 0 as the total number of drinkers in this case and NULL as the most regular customer) or serves no beers (show NULL as average price in this case).","CREATE TABLE Bar (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Beer (
    name VARCHAR NOT NULL,
    brewer VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Drinker (
    name VARCHAR NOT NULL,
    address VARCHAR NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE Frequents (
    drinker VARCHAR NOT NULL,
    bar VARCHAR NOT NULL,
    times_a_week SMALLINT NOT NULL,
    PRIMARY KEY (drinker, bar),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (bar) REFERENCES Bar(name)
);

CREATE TABLE Serves (
    bar VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    PRIMARY KEY (bar, beer),
    FOREIGN KEY (bar) REFERENCES Bar(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);

CREATE TABLE Likes (
    drinker VARCHAR NOT NULL,
    beer VARCHAR NOT NULL,
    PRIMARY KEY (drinker, beer),
    FOREIGN KEY (drinker) REFERENCES Drinker(name),
    FOREIGN KEY (beer) REFERENCES Beer(name)
);"